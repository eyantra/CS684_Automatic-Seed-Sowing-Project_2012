
alignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000278  00800200  00006d02  00006d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800478  00800478  0000700e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000700e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000524  00000000  00000000  0000702e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d60  00000000  00000000  00007552  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000262  00000000  00000000  000092b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a2e  00000000  00000000  00009514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  0000bf44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064f  00000000  00000000  0000c304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_5>
      18:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e0       	ldi	r30, 0x02	; 2
      fc:	fd e6       	ldi	r31, 0x6D	; 109
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 37       	cpi	r26, 0x78	; 120
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	a8 e7       	ldi	r26, 0x78	; 120
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3b       	cpi	r26, 0xB3	; 179
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <main>
     122:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 8b 04 	sts	0x048B, r25
    12ec:	80 93 8a 04 	sts	0x048A, r24
		lcd_wr_char(million);
    12f0:	80 91 8a 04 	lds	r24, 0x048A
    12f4:	90 91 8b 04 	lds	r25, 0x048B
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 8d 04 	sts	0x048D, r25
    1324:	80 93 8c 04 	sts	0x048C, r24
		thousand = temp%10 + 48;
    1328:	80 91 8c 04 	lds	r24, 0x048C
    132c:	90 91 8d 04 	lds	r25, 0x048D
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 b2 04 	sts	0x04B2, r25
    1340:	80 93 b1 04 	sts	0x04B1, r24
		lcd_wr_char(thousand);
    1344:	80 91 b1 04 	lds	r24, 0x04B1
    1348:	90 91 b2 04 	lds	r25, 0x04B2
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 8d 04 	sts	0x048D, r25
    1378:	80 93 8c 04 	sts	0x048C, r24
		hundred = temp%10 + 48;
    137c:	80 91 8c 04 	lds	r24, 0x048C
    1380:	90 91 8d 04 	lds	r25, 0x048D
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 ae 04 	sts	0x04AE, r25
    1394:	80 93 ad 04 	sts	0x04AD, r24
		lcd_wr_char(hundred);
    1398:	80 91 ad 04 	lds	r24, 0x04AD
    139c:	90 91 ae 04 	lds	r25, 0x04AE
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 8d 04 	sts	0x048D, r25
    13cc:	80 93 8c 04 	sts	0x048C, r24
		tens = temp%10 + 48;
    13d0:	80 91 8c 04 	lds	r24, 0x048C
    13d4:	90 91 8d 04 	lds	r25, 0x048D
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 90 04 	sts	0x0490, r25
    13e8:	80 93 8f 04 	sts	0x048F, r24
		lcd_wr_char(tens);
    13ec:	80 91 8f 04 	lds	r24, 0x048F
    13f0:	90 91 90 04 	lds	r25, 0x0490
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 b0 04 	sts	0x04B0, r25
    1420:	80 93 af 04 	sts	0x04AF, r24
		lcd_wr_char(unit);
    1424:	80 91 af 04 	lds	r24, 0x04AF
    1428:	90 91 b0 04 	lds	r25, 0x04B0
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    145a:	e1 ec       	ldi	r30, 0xC1	; 193
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1460:	e0 ec       	ldi	r30, 0xC0	; 192
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1466:	e2 ec       	ldi	r30, 0xC2	; 194
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	80 83       	st	Z, r24
 UBRR0L = 0x47; //11059200 Hz
    146e:	e4 ec       	ldi	r30, 0xC4	; 196
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	87 e4       	ldi	r24, 0x47	; 71
    1474:	80 83       	st	Z, r24
// UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
 UBRR0H = 0x00; //set baud rate hi
    1476:	e5 ec       	ldi	r30, 0xC5	; 197
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    147c:	e1 ec       	ldi	r30, 0xC1	; 193
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	88 e9       	ldi	r24, 0x98	; 152
    1482:	80 83       	st	Z, r24
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <function_caller>:
int botId;

/* Function called by the ISR to interpret the data sent through Zigbee
and call the automaticSeedSowing function with trough ID*/
void function_caller()
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <function_caller+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	int val, par;
	val = atoi(fcall[1]); //fcall[1] would contain the task id 
    1496:	89 e9       	ldi	r24, 0x99	; 153
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <atoi>
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
	switch(val) {
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	39 f4       	brne	.+14     	; 0x14ba <function_caller+0x30>
		case 1 : automaticSeedSowing(atoi(fcall[2])); break; //fcall[2] would contain trough id
    14ac:	8e e9       	ldi	r24, 0x9E	; 158
    14ae:	94 e0       	ldi	r25, 0x04	; 4
    14b0:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <atoi>
    14b4:	0e 94 81 1b 	call	0x3702	; 0x3702 <automaticSeedSowing>
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <function_caller+0x38>
		default: UDR0 = 0x26;
    14ba:	e6 ec       	ldi	r30, 0xC6	; 198
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	86 e2       	ldi	r24, 0x26	; 38
    14c0:	80 83       	st	Z, r24
	}
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <__vector_25>:

/* ISR to handle the data sent through Zigbee 
The data format is "botId$taskid$troughid#" */

SIGNAL(SIG_USART0_RECV)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	00 90 5b 00 	lds	r0, 0x005B
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	cli();
    1500:	f8 94       	cli
	data = UDR0;
    1502:	e6 ec       	ldi	r30, 0xC6	; 198
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 93 93 04 	sts	0x0493, r24

	if(data == 0x23) // #
    150c:	80 91 93 04 	lds	r24, 0x0493
    1510:	83 32       	cpi	r24, 0x23	; 35
    1512:	c9 f5       	brne	.+114    	; 0x1586 <__vector_25+0xb6>
	{
		if(atoi(fcall[0]) == botId) {           //To verify if correct BOT ID is sent
    1514:	84 e9       	ldi	r24, 0x94	; 148
    1516:	94 e0       	ldi	r25, 0x04	; 4
    1518:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <atoi>
    151c:	9c 01       	movw	r18, r24
    151e:	80 91 91 04 	lds	r24, 0x0491
    1522:	90 91 92 04 	lds	r25, 0x0492
    1526:	28 17       	cp	r18, r24
    1528:	39 07       	cpc	r19, r25
    152a:	21 f5       	brne	.+72     	; 0x1574 <__vector_25+0xa4>
			if(j != 0) {
    152c:	80 91 7a 04 	lds	r24, 0x047A
    1530:	90 91 7b 04 	lds	r25, 0x047B
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	c9 f0       	breq	.+50     	; 0x156a <__vector_25+0x9a>
				fcall[i][j] = 0;
    1538:	20 91 78 04 	lds	r18, 0x0478
    153c:	30 91 79 04 	lds	r19, 0x0479
    1540:	40 91 7a 04 	lds	r20, 0x047A
    1544:	50 91 7b 04 	lds	r21, 0x047B
    1548:	c9 01       	movw	r24, r18
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	82 0f       	add	r24, r18
    1554:	93 1f       	adc	r25, r19
    1556:	84 0f       	add	r24, r20
    1558:	95 1f       	adc	r25, r21
    155a:	fc 01       	movw	r30, r24
    155c:	ec 56       	subi	r30, 0x6C	; 108
    155e:	fb 4f       	sbci	r31, 0xFB	; 251
    1560:	10 82       	st	Z, r1
				sei();
    1562:	78 94       	sei
				function_caller();
    1564:	0e 94 45 0a 	call	0x148a	; 0x148a <function_caller>
				cli();
    1568:	f8 94       	cli
			}
			UDR0 = data;
    156a:	e6 ec       	ldi	r30, 0xC6	; 198
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 91 93 04 	lds	r24, 0x0493
    1572:	80 83       	st	Z, r24
		}
		i = 0;
    1574:	10 92 79 04 	sts	0x0479, r1
    1578:	10 92 78 04 	sts	0x0478, r1
		j = 0;
    157c:	10 92 7b 04 	sts	0x047B, r1
    1580:	10 92 7a 04 	sts	0x047A, r1
    1584:	47 c0       	rjmp	.+142    	; 0x1614 <__vector_25+0x144>
	}
	else if(data == 0x24) // $
    1586:	80 91 93 04 	lds	r24, 0x0493
    158a:	84 32       	cpi	r24, 0x24	; 36
    158c:	19 f5       	brne	.+70     	; 0x15d4 <__vector_25+0x104>
	{
		fcall[i][j] = 0;
    158e:	20 91 78 04 	lds	r18, 0x0478
    1592:	30 91 79 04 	lds	r19, 0x0479
    1596:	40 91 7a 04 	lds	r20, 0x047A
    159a:	50 91 7b 04 	lds	r21, 0x047B
    159e:	c9 01       	movw	r24, r18
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	84 0f       	add	r24, r20
    15ae:	95 1f       	adc	r25, r21
    15b0:	fc 01       	movw	r30, r24
    15b2:	ec 56       	subi	r30, 0x6C	; 108
    15b4:	fb 4f       	sbci	r31, 0xFB	; 251
    15b6:	10 82       	st	Z, r1
		i++;
    15b8:	80 91 78 04 	lds	r24, 0x0478
    15bc:	90 91 79 04 	lds	r25, 0x0479
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	90 93 79 04 	sts	0x0479, r25
    15c6:	80 93 78 04 	sts	0x0478, r24
		j = 0;
    15ca:	10 92 7b 04 	sts	0x047B, r1
    15ce:	10 92 7a 04 	sts	0x047A, r1
    15d2:	20 c0       	rjmp	.+64     	; 0x1614 <__vector_25+0x144>
	}
	else
	{
		fcall[i][j] = data;
    15d4:	20 91 78 04 	lds	r18, 0x0478
    15d8:	30 91 79 04 	lds	r19, 0x0479
    15dc:	40 91 7a 04 	lds	r20, 0x047A
    15e0:	50 91 7b 04 	lds	r21, 0x047B
    15e4:	60 91 93 04 	lds	r22, 0x0493
    15e8:	c9 01       	movw	r24, r18
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	84 0f       	add	r24, r20
    15f8:	95 1f       	adc	r25, r21
    15fa:	fc 01       	movw	r30, r24
    15fc:	ec 56       	subi	r30, 0x6C	; 108
    15fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1600:	60 83       	st	Z, r22
		j++;
    1602:	80 91 7a 04 	lds	r24, 0x047A
    1606:	90 91 7b 04 	lds	r25, 0x047B
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	90 93 7b 04 	sts	0x047B, r25
    1610:	80 93 7a 04 	sts	0x047A, r24
	}
	sei();
    1614:	78 94       	sei
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	00 92 5b 00 	sts	0x005B, r0
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <my_lcd_print>:
unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
unsigned int Degrees; //to accept angle in degrees for turning


void my_lcd_print(char row, char coloumn, unsigned int value, unsigned int digits)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <my_lcd_print+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <my_lcd_print+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
    1652:	5c 83       	std	Y+4, r21	; 0x04
    1654:	4b 83       	std	Y+3, r20	; 0x03
    1656:	3e 83       	std	Y+6, r19	; 0x06
    1658:	2d 83       	std	Y+5, r18	; 0x05
	lcd_cursor(2, 1);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	lcd_print(row, coloumn, value, digits);
    1662:	ed 81       	ldd	r30, Y+5	; 0x05
    1664:	fe 81       	ldd	r31, Y+6	; 0x06
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	6a 81       	ldd	r22, Y+2	; 0x02
    166e:	a9 01       	movw	r20, r18
    1670:	9f 01       	movw	r18, r30
    1672:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
	return;
}
    1676:	26 96       	adiw	r28, 0x06	; 6
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <my_lcd_string>:

void my_lcd_string(char *str)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	0f 92       	push	r0
    168e:	0f 92       	push	r0
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	lcd_cursor(1, 1);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	lcd_string(str);
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
	return;
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <velocity>:



//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    16c2:	e8 e2       	ldi	r30, 0x28	; 40
    16c4:	f1 e0       	ldi	r31, 0x01	; 1
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    16ca:	ea e2       	ldi	r30, 0x2A	; 42
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	80 83       	st	Z, r24
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <motion_pin_config>:



//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    16e4:	a1 e2       	ldi	r26, 0x21	; 33
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e1 e2       	ldi	r30, 0x21	; 33
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 60       	ori	r24, 0x0F	; 15
    16f0:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    16f2:	a2 e2       	ldi	r26, 0x22	; 34
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e2 e2       	ldi	r30, 0x22	; 34
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 7f       	andi	r24, 0xF0	; 240
    16fe:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1700:	aa e0       	ldi	r26, 0x0A	; 10
    1702:	b1 e0       	ldi	r27, 0x01	; 1
    1704:	ea e0       	ldi	r30, 0x0A	; 10
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	80 81       	ld	r24, Z
    170a:	88 61       	ori	r24, 0x18	; 24
    170c:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    170e:	ab e0       	ldi	r26, 0x0B	; 11
    1710:	b1 e0       	ldi	r27, 0x01	; 1
    1712:	eb e0       	ldi	r30, 0x0B	; 11
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	80 81       	ld	r24, Z
    1718:	88 61       	ori	r24, 0x18	; 24
    171a:	8c 93       	st	X, r24
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    172a:	ad e2       	ldi	r26, 0x2D	; 45
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ed e2       	ldi	r30, 0x2D	; 45
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 7e       	andi	r24, 0xEF	; 239
    1736:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1738:	ae e2       	ldi	r26, 0x2E	; 46
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ee e2       	ldi	r30, 0x2E	; 46
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1754:	ad e2       	ldi	r26, 0x2D	; 45
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ed e2       	ldi	r30, 0x2D	; 45
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1762:	ae e2       	ldi	r26, 0x2E	; 46
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ee e2       	ldi	r30, 0x2E	; 46
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 62       	ori	r24, 0x20	; 32
    176e:	8c 93       	st	X, r24
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <left_position_encoder_interrupt_init>:



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    177e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1780:	aa e6       	ldi	r26, 0x6A	; 106
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ea e6       	ldi	r30, 0x6A	; 106
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	82 60       	ori	r24, 0x02	; 2
    178c:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    178e:	ad e3       	ldi	r26, 0x3D	; 61
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed e3       	ldi	r30, 0x3D	; 61
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	80 61       	ori	r24, 0x10	; 16
    179a:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt
    179c:	78 94       	sei
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    17ac:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    17ae:	aa e6       	ldi	r26, 0x6A	; 106
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ea e6       	ldi	r30, 0x6A	; 106
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 60       	ori	r24, 0x08	; 8
    17ba:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    17bc:	ad e3       	ldi	r26, 0x3D	; 61
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ed e3       	ldi	r30, 0x3D	; 61
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 62       	ori	r24, 0x20	; 32
    17c8:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt
    17ca:	78 94       	sei
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    17ec:	80 91 84 04 	lds	r24, 0x0484
    17f0:	90 91 85 04 	lds	r25, 0x0485
    17f4:	a0 91 86 04 	lds	r26, 0x0486
    17f8:	b0 91 87 04 	lds	r27, 0x0487
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	a1 1d       	adc	r26, r1
    1800:	b1 1d       	adc	r27, r1
    1802:	80 93 84 04 	sts	0x0484, r24
    1806:	90 93 85 04 	sts	0x0485, r25
    180a:	a0 93 86 04 	sts	0x0486, r26
    180e:	b0 93 87 04 	sts	0x0487, r27
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1842:	80 91 80 04 	lds	r24, 0x0480
    1846:	90 91 81 04 	lds	r25, 0x0481
    184a:	a0 91 82 04 	lds	r26, 0x0482
    184e:	b0 91 83 04 	lds	r27, 0x0483
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	a1 1d       	adc	r26, r1
    1856:	b1 1d       	adc	r27, r1
    1858:	80 93 80 04 	sts	0x0480, r24
    185c:	90 93 81 04 	sts	0x0481, r25
    1860:	a0 93 82 04 	sts	0x0482, r26
    1864:	b0 93 83 04 	sts	0x0483, r27
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	0f 90       	pop	r0
    187a:	1f 90       	pop	r1
    187c:	18 95       	reti

0000187e <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	0f 92       	push	r0
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    188c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	8f 70       	andi	r24, 0x0F	; 15
    1892:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1894:	e2 e2       	ldi	r30, 0x22	; 34
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	80 7f       	andi	r24, 0xF0	; 240
    18a0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18a2:	99 81       	ldd	r25, Y+1	; 0x01
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	89 2b       	or	r24, r25
    18a8:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    18aa:	e2 e2       	ldi	r30, 0x22	; 34
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	80 83       	st	Z, r24
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <forward>:

void forward (void) //both wheels forward
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    18c4:	86 e0       	ldi	r24, 0x06	; 6
    18c6:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <back>:

void back (void) //both wheels backward
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    18d8:	89 e0       	ldi	r24, 0x09	; 9
    18da:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    1950:	88 e0       	ldi	r24, 0x08	; 8
    1952:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <stop>:

void stop (void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 3f 0c 	call	0x187e	; 0x187e <motion_set>
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	2c 97       	sbiw	r28, 0x0c	; 12
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	9a 87       	std	Y+10, r25	; 0x0a
    1986:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e0       	ldi	r26, 0x00	; 0
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	af 83       	std	Y+7, r26	; 0x07
    1996:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1998:	19 82       	std	Y+1, r1	; 0x01
    199a:	1a 82       	std	Y+2, r1	; 0x02
    199c:	1b 82       	std	Y+3, r1	; 0x03
    199e:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	cc 01       	movw	r24, r24
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 a0 33 	call	0x6740	; 0x6740 <__floatunsisf>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	28 e4       	ldi	r18, 0x48	; 72
    19bc:	31 ee       	ldi	r19, 0xE1	; 225
    19be:	42 e8       	ldi	r20, 0x82	; 130
    19c0:	50 e4       	ldi	r21, 0x40	; 64
    19c2:	0e 94 10 32 	call	0x6420	; 0x6420 <__divsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	af 83       	std	Y+7, r26	; 0x07
    19d0:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    19d2:	6d 81       	ldd	r22, Y+5	; 0x05
    19d4:	7e 81       	ldd	r23, Y+6	; 0x06
    19d6:	8f 81       	ldd	r24, Y+7	; 0x07
    19d8:	98 85       	ldd	r25, Y+8	; 0x08
    19da:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	cc 01       	movw	r24, r24
    19e4:	a0 e0       	ldi	r26, 0x00	; 0
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	ab 83       	std	Y+3, r26	; 0x03
    19ee:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0;
    19f0:	10 92 84 04 	sts	0x0484, r1
    19f4:	10 92 85 04 	sts	0x0485, r1
    19f8:	10 92 86 04 	sts	0x0486, r1
    19fc:	10 92 87 04 	sts	0x0487, r1
 ShaftCountLeft = 0;
    1a00:	10 92 80 04 	sts	0x0480, r1
    1a04:	10 92 81 04 	sts	0x0481, r1
    1a08:	10 92 82 04 	sts	0x0482, r1
    1a0c:	10 92 83 04 	sts	0x0483, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1a10:	20 91 84 04 	lds	r18, 0x0484
    1a14:	30 91 85 04 	lds	r19, 0x0485
    1a18:	40 91 86 04 	lds	r20, 0x0486
    1a1c:	50 91 87 04 	lds	r21, 0x0487
    1a20:	1c 86       	std	Y+12, r1	; 0x0c
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	ab 81       	ldd	r26, Y+3	; 0x03
    1a28:	bc 81       	ldd	r27, Y+4	; 0x04
    1a2a:	28 17       	cp	r18, r24
    1a2c:	39 07       	cpc	r19, r25
    1a2e:	4a 07       	cpc	r20, r26
    1a30:	5b 07       	cpc	r21, r27
    1a32:	10 f0       	brcs	.+4      	; 0x1a38 <angle_rotate+0xc8>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	8c 87       	std	Y+12, r24	; 0x0c
    1a38:	20 91 80 04 	lds	r18, 0x0480
    1a3c:	30 91 81 04 	lds	r19, 0x0481
    1a40:	40 91 82 04 	lds	r20, 0x0482
    1a44:	50 91 83 04 	lds	r21, 0x0483
    1a48:	1b 86       	std	Y+11, r1	; 0x0b
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a50:	bc 81       	ldd	r27, Y+4	; 0x04
    1a52:	28 17       	cp	r18, r24
    1a54:	39 07       	cpc	r19, r25
    1a56:	4a 07       	cpc	r20, r26
    1a58:	5b 07       	cpc	r21, r27
    1a5a:	10 f0       	brcs	.+4      	; 0x1a60 <angle_rotate+0xf0>
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9b 87       	std	Y+11, r25	; 0x0b
    1a60:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a64:	89 2b       	or	r24, r25
    1a66:	88 23       	and	r24, r24
    1a68:	99 f2       	breq	.-90     	; 0x1a10 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    1a6a:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
}
    1a6e:	2c 96       	adiw	r28, 0x0c	; 12
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	2a 97       	sbiw	r28, 0x0a	; 10
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	9a 87       	std	Y+10, r25	; 0x0a
    1a96:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e0       	ldi	r26, 0x00	; 0
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	af 83       	std	Y+7, r26	; 0x07
    1aa6:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
    1aaa:	1a 82       	std	Y+2, r1	; 0x02
    1aac:	1b 82       	std	Y+3, r1	; 0x03
    1aae:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	cc 01       	movw	r24, r24
    1ab6:	a0 e0       	ldi	r26, 0x00	; 0
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 a0 33 	call	0x6740	; 0x6740 <__floatunsisf>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	25 ee       	ldi	r18, 0xE5	; 229
    1acc:	30 ed       	ldi	r19, 0xD0	; 208
    1ace:	4a ea       	ldi	r20, 0xAA	; 170
    1ad0:	50 e4       	ldi	r21, 0x40	; 64
    1ad2:	0e 94 10 32 	call	0x6420	; 0x6420 <__divsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	af 83       	std	Y+7, r26	; 0x07
    1ae0:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ae2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	98 85       	ldd	r25, Y+8	; 0x08
    1aea:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	ab 83       	std	Y+3, r26	; 0x03
    1af8:	bc 83       	std	Y+4, r27	; 0x04

 ShaftCountRight = 0;
    1afa:	10 92 84 04 	sts	0x0484, r1
    1afe:	10 92 85 04 	sts	0x0485, r1
    1b02:	10 92 86 04 	sts	0x0486, r1
    1b06:	10 92 87 04 	sts	0x0487, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
    1b0a:	20 91 84 04 	lds	r18, 0x0484
    1b0e:	30 91 85 04 	lds	r19, 0x0485
    1b12:	40 91 86 04 	lds	r20, 0x0486
    1b16:	50 91 87 04 	lds	r21, 0x0487
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b20:	bc 81       	ldd	r27, Y+4	; 0x04
    1b22:	82 17       	cp	r24, r18
    1b24:	93 07       	cpc	r25, r19
    1b26:	a4 07       	cpc	r26, r20
    1b28:	b5 07       	cpc	r27, r21
    1b2a:	78 f7       	brcc	.-34     	; 0x1b0a <linear_distance_mm+0x8a>
  {
  	break;
  }
 }
 stop(); //Stop robot
    1b2c:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
}
    1b30:	2a 96       	adiw	r28, 0x0a	; 10
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
 forward();
    1b52:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <forward>
 linear_distance_mm(DistanceInMM);
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <linear_distance_mm>
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	0f 92       	push	r0
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
 back();
    1b78:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <back>
 linear_distance_mm(DistanceInMM);
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <linear_distance_mm>
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	0f 92       	push	r0
    1b94:	0f 92       	push	r0
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1b9e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <left>
 angle_rotate(Degrees);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	0f 92       	push	r0
    1bba:	0f 92       	push	r0
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1bc4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <right>
 angle_rotate(Degrees);
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	0f 92       	push	r0
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
    1bea:	0e 94 86 0c 	call	0x190c	; 0x190c <soft_left>
 Degrees = Degrees * 2;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	0f 92       	push	r0
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
    1c1c:	0e 94 90 0c 	call	0x1920	; 0x1920 <soft_right>
 Degrees=Degrees*2;
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
    1c4e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <soft_left_2>
 Degrees=Degrees*2;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	0f 92       	push	r0
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
    1c80:	0e 94 a4 0c 	call	0x1948	; 0x1948 <soft_right_2>
 Degrees=Degrees*2;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	0e 94 b8 0c 	call	0x1970	; 0x1970 <angle_rotate>
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <servo1_pin_config>:


/**********************************/

void servo1_pin_config (void)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1caa:	a4 e2       	ldi	r26, 0x24	; 36
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e4 e2       	ldi	r30, 0x24	; 36
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 62       	ori	r24, 0x20	; 32
    1cb6:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1cb8:	a5 e2       	ldi	r26, 0x25	; 37
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e5 e2       	ldi	r30, 0x25	; 37
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	8c 93       	st	X, r24

}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1cd4:	e1 e8       	ldi	r30, 0x81	; 129
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1cda:	e5 e8       	ldi	r30, 0x85	; 133
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8c ef       	ldi	r24, 0xFC	; 252
    1ce0:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1ce2:	e4 e8       	ldi	r30, 0x84	; 132
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1cea:	e9 e8       	ldi	r30, 0x89	; 137
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1cf2:	e8 e8       	ldi	r30, 0x88	; 136
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	80 83       	st	Z, r24
 ICR1H  = 0x03;
    1cfa:	e7 e8       	ldi	r30, 0x87	; 135
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1d02:	e6 e8       	ldi	r30, 0x86	; 134
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1d0a:	e0 e8       	ldi	r30, 0x80	; 128
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8b ea       	ldi	r24, 0xAB	; 171
    1d10:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1d12:	e2 e8       	ldi	r30, 0x82	; 130
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1d18:	e1 e8       	ldi	r30, 0x81	; 129
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8c e0       	ldi	r24, 0x0C	; 12
    1d1e:	80 83       	st	Z, r24
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1d2e:	a7 e2       	ldi	r26, 0x27	; 39
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e7 e2       	ldi	r30, 0x27	; 39
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	87 6f       	ori	r24, 0xF7	; 247
    1d3a:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1d3c:	a8 e2       	ldi	r26, 0x28	; 40
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e2       	ldi	r30, 0x28	; 40
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 78       	andi	r24, 0x80	; 128
    1d48:	8c 93       	st	X, r24
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;
    1d58:	e0 e3       	ldi	r30, 0x30	; 48
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	10 82       	st	Z, r1
 PORTF = 0x00;
    1d5e:	e1 e3       	ldi	r30, 0x31	; 49
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	10 82       	st	Z, r1
 DDRK = 0x00;
    1d64:	e7 e0       	ldi	r30, 0x07	; 7
    1d66:	f1 e0       	ldi	r31, 0x01	; 1
    1d68:	10 82       	st	Z, r1
 PORTK = 0x00;
    1d6a:	e8 e0       	ldi	r30, 0x08	; 8
    1d6c:	f1 e0       	ldi	r31, 0x01	; 1
    1d6e:	10 82       	st	Z, r1
}
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <adc_init>:




void adc_init()
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1d7e:	ea e7       	ldi	r30, 0x7A	; 122
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1d84:	eb e7       	ldi	r30, 0x7B	; 123
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1d8a:	ec e7       	ldi	r30, 0x7C	; 124
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 e2       	ldi	r24, 0x20	; 32
    1d90:	80 83       	st	Z, r24
	ACSR = 0x80;
    1d92:	e0 e5       	ldi	r30, 0x50	; 80
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 e8       	ldi	r24, 0x80	; 128
    1d98:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1d9a:	ea e7       	ldi	r30, 0x7A	; 122
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	86 e8       	ldi	r24, 0x86	; 134
    1da0:	80 83       	st	Z, r24
}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	0f 92       	push	r0
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;
	if(Ch>7)
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	20 f0       	brcs	.+8      	; 0x1dc4 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1dbc:	eb e7       	ldi	r30, 0x7B	; 123
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	88 e0       	ldi	r24, 0x08	; 8
    1dc2:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	87 70       	andi	r24, 0x07	; 7
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    1dca:	ec e7       	ldi	r30, 0x7C	; 124
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	80 62       	ori	r24, 0x20	; 32
    1dd2:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1dd4:	aa e7       	ldi	r26, 0x7A	; 122
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	ea e7       	ldi	r30, 0x7A	; 122
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1de2:	ea e7       	ldi	r30, 0x7A	; 122
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	80 71       	andi	r24, 0x10	; 16
    1dee:	90 70       	andi	r25, 0x00	; 0
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	b9 f3       	breq	.-18     	; 0x1de2 <ADC_Conversion+0x3a>
	a=ADCH;
    1df4:	e9 e7       	ldi	r30, 0x79	; 121
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1dfc:	aa e7       	ldi	r26, 0x7A	; 122
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ea e7       	ldi	r30, 0x7A	; 122
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 61       	ori	r24, 0x10	; 16
    1e08:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1e0a:	eb e7       	ldi	r30, 0x7B	; 123
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	10 82       	st	Z, r1
	return a;
    1e10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <print_sensor+0x6>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	6a 83       	std	Y+2, r22	; 0x02
    1e2a:	4b 83       	std	Y+3, r20	; 0x03

	ADC_Value = ADC_Conversion(channel);
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    1e32:	80 93 8e 04 	sts	0x048E, r24
	my_lcd_print(row, coloumn, ADC_Value, 3);
    1e36:	80 91 8e 04 	lds	r24, 0x048E
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	6a 81       	ldd	r22, Y+2	; 0x02
    1e42:	a9 01       	movw	r20, r18
    1e44:	23 e0       	ldi	r18, 0x03	; 3
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <port_init>:

//Function to initialize ports
void port_init()
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
servo1_pin_config();
    1e60:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <servo1_pin_config>
 motion_pin_config(); //robot motion pins config
    1e64:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
    1e68:	0e 94 91 0b 	call	0x1722	; 0x1722 <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config
    1e6c:	0e 94 a6 0b 	call	0x174c	; 0x174c <right_encoder_pin_config>
 lcd_port_config();
    1e70:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <lcd_port_config>
adc_pin_config();
    1e74:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <adc_pin_config>

}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1e86:	e1 e2       	ldi	r30, 0x21	; 33
    1e88:	f1 e0       	ldi	r31, 0x01	; 1
    1e8a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1e8c:	e5 e2       	ldi	r30, 0x25	; 37
    1e8e:	f1 e0       	ldi	r31, 0x01	; 1
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1e94:	e4 e2       	ldi	r30, 0x24	; 36
    1e96:	f1 e0       	ldi	r31, 0x01	; 1
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1e9c:	e9 e2       	ldi	r30, 0x29	; 41
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1ea2:	e8 e2       	ldi	r30, 0x28	; 40
    1ea4:	f1 e0       	ldi	r31, 0x01	; 1
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1eaa:	eb e2       	ldi	r30, 0x2B	; 43
    1eac:	f1 e0       	ldi	r31, 0x01	; 1
    1eae:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1eb0:	ea e2       	ldi	r30, 0x2A	; 42
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1eb8:	ed e2       	ldi	r30, 0x2D	; 45
    1eba:	f1 e0       	ldi	r31, 0x01	; 1
    1ebc:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1ebe:	ec e2       	ldi	r30, 0x2C	; 44
    1ec0:	f1 e0       	ldi	r31, 0x01	; 1
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1ec6:	e0 e2       	ldi	r30, 0x20	; 32
    1ec8:	f1 e0       	ldi	r31, 0x01	; 1
    1eca:	89 ea       	ldi	r24, 0xA9	; 169
    1ecc:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1ece:	e1 e2       	ldi	r30, 0x21	; 33
    1ed0:	f1 e0       	ldi	r31, 0x01	; 1
    1ed2:	8b e0       	ldi	r24, 0x0B	; 11
    1ed4:	80 83       	st	Z, r24
}
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <init_devices>:


//Function to initialize all the devices
void init_devices()
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1ee4:	f8 94       	cli
 port_init();  //Initializes all the ports
    1ee6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <port_init>
 timer1_init();
    1eea:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <timer1_init>
 timer5_init(); //for white line follower
    1eee:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <timer5_init>
 left_position_encoder_interrupt_init();
    1ef2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    1ef6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <right_position_encoder_interrupt_init>
 adc_init();
    1efa:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <adc_init>
 sei();   // Enables the global interrupt
    1efe:	78 94       	sei
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(float degrees)
{
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	28 97       	sbiw	r28, 0x08	; 8
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	6d 83       	std	Y+5, r22	; 0x05
    1f20:	7e 83       	std	Y+6, r23	; 0x06
    1f22:	8f 83       	std	Y+7, r24	; 0x07
    1f24:	98 87       	std	Y+8, r25	; 0x08
    float PositionPanServo = 0;
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	ab 83       	std	Y+3, r26	; 0x03
    1f34:	bc 83       	std	Y+4, r27	; 0x04
    PositionPanServo = ((float)degrees / 1.86) + 35.0;
    1f36:	6d 81       	ldd	r22, Y+5	; 0x05
    1f38:	7e 81       	ldd	r23, Y+6	; 0x06
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	2b e7       	ldi	r18, 0x7B	; 123
    1f40:	34 e1       	ldi	r19, 0x14	; 20
    1f42:	4e ee       	ldi	r20, 0xEE	; 238
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 10 32 	call	0x6420	; 0x6420 <__divsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4c e0       	ldi	r20, 0x0C	; 12
    1f58:	52 e4       	ldi	r21, 0x42	; 66
    1f5a:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__addsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	ab 83       	std	Y+3, r26	; 0x03
    1f68:	bc 83       	std	Y+4, r27	; 0x04
    OCR1AH = 0x00;
    1f6a:	e9 e8       	ldi	r30, 0x89	; 137
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	10 82       	st	Z, r1
    OCR1AL = (unsigned char) PositionPanServo;
    1f70:	08 e8       	ldi	r16, 0x88	; 136
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	69 81       	ldd	r22, Y+1	; 0x01
    1f76:	7a 81       	ldd	r23, Y+2	; 0x02
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
}
    1f88:	28 96       	adiw	r28, 0x08	; 8
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <clear_lcd>:
#define ROTATE_MORE     		 10
#define ROTATE_RIGHT_DEGREES     180


void clear_lcd()
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	my_lcd_string("                       ");
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	92 e0       	ldi	r25, 0x02	; 2
    1fb2:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>

	lcd_cursor(2,1);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	my_lcd_string("                       ");
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <initVacantSpaceStruct>:



void initVacantSpaceStruct(vacantSpace *pstVacantSpace, unsigned int troughID)
{
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	cd 56       	subi	r28, 0x6D	; 109
    1fda:	d0 40       	sbci	r29, 0x00	; 0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e6 59       	subi	r30, 0x96	; 150
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e4 59       	subi	r30, 0x94	; 148
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	71 83       	std	Z+1, r23	; 0x01
    1ff8:	60 83       	st	Z, r22
	char right = 0;
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e7 59       	subi	r30, 0x97	; 151
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	10 82       	st	Z, r1
	unsigned int skipWhiteLineJx = 0;
    2002:	fe 01       	movw	r30, r28
    2004:	e9 59       	subi	r30, 0x99	; 153
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	11 82       	std	Z+1, r1	; 0x01
    200a:	10 82       	st	Z, r1
	unsigned int trough_ID = 0;
    200c:	fe 01       	movw	r30, r28
    200e:	eb 59       	subi	r30, 0x9B	; 155
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	11 82       	std	Z+1, r1	; 0x01
    2014:	10 82       	st	Z, r1
	unsigned int remainder = 0;
    2016:	fe 01       	movw	r30, r28
    2018:	ed 59       	subi	r30, 0x9D	; 157
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	11 82       	std	Z+1, r1	; 0x01
    201e:	10 82       	st	Z, r1

	skipWhiteLineJx = troughID / TROUGHS_IN_AISLE;
    2020:	de 01       	movw	r26, r28
    2022:	a9 59       	subi	r26, 0x99	; 153
    2024:	bf 4f       	sbci	r27, 0xFF	; 255
    2026:	fe 01       	movw	r30, r28
    2028:	e4 59       	subi	r30, 0x94	; 148
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	96 95       	lsr	r25
    2032:	87 95       	ror	r24
    2034:	96 95       	lsr	r25
    2036:	87 95       	ror	r24
    2038:	8d 93       	st	X+, r24
    203a:	9c 93       	st	X, r25
	remainder = troughID % TROUGHS_IN_AISLE;
    203c:	de 01       	movw	r26, r28
    203e:	ad 59       	subi	r26, 0x9D	; 157
    2040:	bf 4f       	sbci	r27, 0xFF	; 255
    2042:	fe 01       	movw	r30, r28
    2044:	e4 59       	subi	r30, 0x94	; 148
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	83 70       	andi	r24, 0x03	; 3
    204e:	90 70       	andi	r25, 0x00	; 0
    2050:	8d 93       	st	X+, r24
    2052:	9c 93       	st	X, r25

	right = remainder / TROUGHS_IN_ONE_ROW;
    2054:	fe 01       	movw	r30, r28
    2056:	ed 59       	subi	r30, 0x9D	; 157
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	96 95       	lsr	r25
    2060:	87 95       	ror	r24
    2062:	fe 01       	movw	r30, r28
    2064:	e7 59       	subi	r30, 0x97	; 151
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 83       	st	Z, r24
	trough_ID = remainder;
    206a:	de 01       	movw	r26, r28
    206c:	ab 59       	subi	r26, 0x9B	; 155
    206e:	bf 4f       	sbci	r27, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	ed 59       	subi	r30, 0x9D	; 157
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	8d 93       	st	X+, r24
    207c:	9c 93       	st	X, r25

	pstVacantSpace->vacantSpace_SeedSow    = (trough_ID  + 1);
    207e:	fe 01       	movw	r30, r28
    2080:	eb 59       	subi	r30, 0x9B	; 155
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	fe 01       	movw	r30, r28
    208c:	e6 59       	subi	r30, 0x96	; 150
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	01 90       	ld	r0, Z+
    2092:	f0 81       	ld	r31, Z
    2094:	e0 2d       	mov	r30, r0
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
	pstVacantSpace->vacantSpace_SeedStop   = (trough_ID  + 2);
    209a:	fe 01       	movw	r30, r28
    209c:	eb 59       	subi	r30, 0x9B	; 155
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	02 96       	adiw	r24, 0x02	; 2
    20a6:	fe 01       	movw	r30, r28
    20a8:	e6 59       	subi	r30, 0x96	; 150
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	01 90       	ld	r0, Z+
    20ae:	f0 81       	ld	r31, Z
    20b0:	e0 2d       	mov	r30, r0
    20b2:	93 83       	std	Z+3, r25	; 0x03
    20b4:	82 83       	std	Z+2, r24	; 0x02
	pstVacantSpace->skipWhiteLineJx		   = skipWhiteLineJx;
    20b6:	fe 01       	movw	r30, r28
    20b8:	e6 59       	subi	r30, 0x96	; 150
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	a0 81       	ld	r26, Z
    20be:	b1 81       	ldd	r27, Z+1	; 0x01
    20c0:	fe 01       	movw	r30, r28
    20c2:	e9 59       	subi	r30, 0x99	; 153
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	1b 96       	adiw	r26, 0x0b	; 11
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
    20d0:	1a 97       	sbiw	r26, 0x0a	; 10

    /* Initial vacant count has been kept as 1 as when the bot starts
     * from initial position, there is no trough, so it assumes that
     * there is a vacant space.
     */
    pstVacantSpace->vacantSpace_Count      = 1;
    20d2:	fe 01       	movw	r30, r28
    20d4:	e6 59       	subi	r30, 0x96	; 150
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	01 90       	ld	r0, Z+
    20da:	f0 81       	ld	r31, Z
    20dc:	e0 2d       	mov	r30, r0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	91 87       	std	Z+9, r25	; 0x09
    20e4:	80 87       	std	Z+8, r24	; 0x08

	clear_lcd();
    20e6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Seed Sow");
    20ea:	88 e1       	ldi	r24, 0x18	; 24
    20ec:	92 e0       	ldi	r25, 0x02	; 2
    20ee:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, pstVacantSpace->vacantSpace_SeedSow, 2);
    20f2:	fe 01       	movw	r30, r28
    20f4:	e6 59       	subi	r30, 0x96	; 150
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	01 90       	ld	r0, Z+
    20fa:	f0 81       	ld	r31, Z
    20fc:	e0 2d       	mov	r30, r0
    20fe:	20 81       	ld	r18, Z
    2100:	31 81       	ldd	r19, Z+1	; 0x01
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	a9 01       	movw	r20, r18
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    2110:	fe 01       	movw	r30, r28
    2112:	e1 5a       	subi	r30, 0xA1	; 161
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	aa ef       	ldi	r26, 0xFA	; 250
    211c:	b3 e4       	ldi	r27, 0x43	; 67
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	8e 01       	movw	r16, r28
    2128:	05 5a       	subi	r16, 0xA5	; 165
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	e1 5a       	subi	r30, 0xA1	; 161
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	26 e6       	ldi	r18, 0x66	; 102
    213c:	36 e6       	ldi	r19, 0x66	; 102
    213e:	46 e6       	ldi	r20, 0x66	; 102
    2140:	55 e4       	ldi	r21, 0x45	; 69
    2142:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	80 83       	st	Z, r24
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	a2 83       	std	Z+2, r26	; 0x02
    2152:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2154:	fe 01       	movw	r30, r28
    2156:	e5 5a       	subi	r30, 0xA5	; 165
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	44 f4       	brge	.+16     	; 0x2182 <initVacantSpaceStruct+0x1b6>
		__ticks = 1;
    2172:	fe 01       	movw	r30, r28
    2174:	e7 5a       	subi	r30, 0xA7	; 167
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	64 c0       	rjmp	.+200    	; 0x224a <__stack+0x4b>
	else if (__tmp > 65535)
    2182:	fe 01       	movw	r30, r28
    2184:	e5 5a       	subi	r30, 0xA5	; 165
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	0c f0       	brlt	.+2      	; 0x21a2 <initVacantSpaceStruct+0x1d6>
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <__stack+0x29>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	fe 01       	movw	r30, r28
    21a4:	e1 5a       	subi	r30, 0xA1	; 161
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8e 01       	movw	r16, r28
    21c2:	07 5a       	subi	r16, 0xA7	; 167
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	1f c0       	rjmp	.+62     	; 0x2218 <__stack+0x19>
    21da:	fe 01       	movw	r30, r28
    21dc:	e9 5a       	subi	r30, 0xA9	; 169
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 e7       	ldi	r24, 0x70	; 112
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	fe 01       	movw	r30, r28
    21ea:	e9 5a       	subi	r30, 0xA9	; 169
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <initVacantSpaceStruct+0x226>
    21f6:	fe 01       	movw	r30, r28
    21f8:	e9 5a       	subi	r30, 0xA9	; 169
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	de 01       	movw	r26, r28
    2202:	a7 5a       	subi	r26, 0xA7	; 167
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5a       	subi	r30, 0xA7	; 167
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	fe 01       	movw	r30, r28
    221a:	e7 5a       	subi	r30, 0xA7	; 167
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	d1 f6       	brne	.-76     	; 0x21da <initVacantSpaceStruct+0x20e>
    2226:	27 c0       	rjmp	.+78     	; 0x2276 <__stack+0x77>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	8e 01       	movw	r16, r28
    222a:	07 5a       	subi	r16, 0xA7	; 167
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e5 5a       	subi	r30, 0xA5	; 165
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	de 01       	movw	r26, r28
    224c:	ab 5a       	subi	r26, 0xAB	; 171
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 5a       	subi	r30, 0xA7	; 167
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	8d 93       	st	X+, r24
    225c:	9c 93       	st	X, r25
    225e:	fe 01       	movw	r30, r28
    2260:	eb 5a       	subi	r30, 0xAB	; 171
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <__stack+0x69>
    226c:	fe 01       	movw	r30, r28
    226e:	eb 5a       	subi	r30, 0xAB	; 171
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
	_delay_ms(DELAY);

	clear_lcd();
    2276:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Seed Stop");
    227a:	81 e2       	ldi	r24, 0x21	; 33
    227c:	92 e0       	ldi	r25, 0x02	; 2
    227e:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, pstVacantSpace->vacantSpace_SeedStop, 2);
    2282:	fe 01       	movw	r30, r28
    2284:	e6 59       	subi	r30, 0x96	; 150
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	01 90       	ld	r0, Z+
    228a:	f0 81       	ld	r31, Z
    228c:	e0 2d       	mov	r30, r0
    228e:	22 81       	ldd	r18, Z+2	; 0x02
    2290:	33 81       	ldd	r19, Z+3	; 0x03
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	a9 01       	movw	r20, r18
    2298:	22 e0       	ldi	r18, 0x02	; 2
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    22a0:	fe 01       	movw	r30, r28
    22a2:	ef 5a       	subi	r30, 0xAF	; 175
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	aa ef       	ldi	r26, 0xFA	; 250
    22ac:	b3 e4       	ldi	r27, 0x43	; 67
    22ae:	80 83       	st	Z, r24
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	a2 83       	std	Z+2, r26	; 0x02
    22b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	8e 01       	movw	r16, r28
    22b8:	03 5b       	subi	r16, 0xB3	; 179
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 5a       	subi	r30, 0xAF	; 175
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	26 e6       	ldi	r18, 0x66	; 102
    22cc:	36 e6       	ldi	r19, 0x66	; 102
    22ce:	46 e6       	ldi	r20, 0x66	; 102
    22d0:	55 e4       	ldi	r21, 0x45	; 69
    22d2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	80 83       	st	Z, r24
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	a2 83       	std	Z+2, r26	; 0x02
    22e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e4:	fe 01       	movw	r30, r28
    22e6:	e3 5b       	subi	r30, 0xB3	; 179
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	44 f4       	brge	.+16     	; 0x2312 <__stack+0x113>
		__ticks = 1;
    2302:	fe 01       	movw	r30, r28
    2304:	e5 5b       	subi	r30, 0xB5	; 181
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	64 c0       	rjmp	.+200    	; 0x23da <__stack+0x1db>
	else if (__tmp > 65535)
    2312:	fe 01       	movw	r30, r28
    2314:	e3 5b       	subi	r30, 0xB3	; 179
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	0c f0       	brlt	.+2      	; 0x2332 <__stack+0x133>
    2330:	43 c0       	rjmp	.+134    	; 0x23b8 <__stack+0x1b9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	fe 01       	movw	r30, r28
    2334:	ef 5a       	subi	r30, 0xAF	; 175
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8e 01       	movw	r16, r28
    2352:	05 5b       	subi	r16, 0xB5	; 181
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	f8 01       	movw	r30, r16
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	1f c0       	rjmp	.+62     	; 0x23a8 <__stack+0x1a9>
    236a:	fe 01       	movw	r30, r28
    236c:	e7 5b       	subi	r30, 0xB7	; 183
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 e7       	ldi	r24, 0x70	; 112
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5b       	subi	r30, 0xB7	; 183
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <__stack+0x183>
    2386:	fe 01       	movw	r30, r28
    2388:	e7 5b       	subi	r30, 0xB7	; 183
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	de 01       	movw	r26, r28
    2392:	a5 5b       	subi	r26, 0xB5	; 181
    2394:	bf 4f       	sbci	r27, 0xFF	; 255
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5b       	subi	r30, 0xB5	; 181
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	11 96       	adiw	r26, 0x01	; 1
    23a4:	9c 93       	st	X, r25
    23a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	fe 01       	movw	r30, r28
    23aa:	e5 5b       	subi	r30, 0xB5	; 181
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	d1 f6       	brne	.-76     	; 0x236a <__stack+0x16b>
    23b6:	27 c0       	rjmp	.+78     	; 0x2406 <__stack+0x207>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	8e 01       	movw	r16, r28
    23ba:	05 5b       	subi	r16, 0xB5	; 181
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	fe 01       	movw	r30, r28
    23c0:	e3 5b       	subi	r30, 0xB3	; 179
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
    23da:	de 01       	movw	r26, r28
    23dc:	a9 5b       	subi	r26, 0xB9	; 185
    23de:	bf 4f       	sbci	r27, 0xFF	; 255
    23e0:	fe 01       	movw	r30, r28
    23e2:	e5 5b       	subi	r30, 0xB5	; 181
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	8d 93       	st	X+, r24
    23ec:	9c 93       	st	X, r25
    23ee:	fe 01       	movw	r30, r28
    23f0:	e9 5b       	subi	r30, 0xB9	; 185
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <__stack+0x1f9>
    23fc:	fe 01       	movw	r30, r28
    23fe:	e9 5b       	subi	r30, 0xB9	; 185
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
	_delay_ms(DELAY);

	clear_lcd();
    2406:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Skip White Jx");
    240a:	8b e2       	ldi	r24, 0x2B	; 43
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, pstVacantSpace->skipWhiteLineJx, 2);
    2412:	fe 01       	movw	r30, r28
    2414:	e6 59       	subi	r30, 0x96	; 150
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	01 90       	ld	r0, Z+
    241a:	f0 81       	ld	r31, Z
    241c:	e0 2d       	mov	r30, r0
    241e:	22 85       	ldd	r18, Z+10	; 0x0a
    2420:	33 85       	ldd	r19, Z+11	; 0x0b
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	a9 01       	movw	r20, r18
    2428:	22 e0       	ldi	r18, 0x02	; 2
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    2430:	fe 01       	movw	r30, r28
    2432:	ed 5b       	subi	r30, 0xBD	; 189
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	aa ef       	ldi	r26, 0xFA	; 250
    243c:	b3 e4       	ldi	r27, 0x43	; 67
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	8e 01       	movw	r16, r28
    2448:	01 5c       	subi	r16, 0xC1	; 193
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	fe 01       	movw	r30, r28
    244e:	ed 5b       	subi	r30, 0xBD	; 189
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	26 e6       	ldi	r18, 0x66	; 102
    245c:	36 e6       	ldi	r19, 0x66	; 102
    245e:	46 e6       	ldi	r20, 0x66	; 102
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	80 83       	st	Z, r24
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	a2 83       	std	Z+2, r26	; 0x02
    2472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2474:	fe 01       	movw	r30, r28
    2476:	ff 96       	adiw	r30, 0x3f	; 63
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <__stack+0x29b>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e af       	std	Y+62, r25	; 0x3e
    2496:	8d af       	std	Y+61, r24	; 0x3d
    2498:	46 c0       	rjmp	.+140    	; 0x2526 <__stack+0x327>
	else if (__tmp > 65535)
    249a:	fe 01       	movw	r30, r28
    249c:	ff 96       	adiw	r30, 0x3f	; 63
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	64 f5       	brge	.+88     	; 0x250e <__stack+0x30f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	fe 01       	movw	r30, r28
    24b8:	ed 5b       	subi	r30, 0xBD	; 189
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e af       	std	Y+62, r25	; 0x3e
    24e2:	8d af       	std	Y+61, r24	; 0x3d
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <__stack+0x305>
    24e6:	80 e7       	ldi	r24, 0x70	; 112
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	9c af       	std	Y+60, r25	; 0x3c
    24ec:	8b af       	std	Y+59, r24	; 0x3b
    24ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    24f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <__stack+0x2f3>
    24f6:	9c af       	std	Y+60, r25	; 0x3c
    24f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e af       	std	Y+62, r25	; 0x3e
    2502:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d ad       	ldd	r24, Y+61	; 0x3d
    2506:	9e ad       	ldd	r25, Y+62	; 0x3e
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <__stack+0x2e7>
    250c:	16 c0       	rjmp	.+44     	; 0x253a <__stack+0x33b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	fe 01       	movw	r30, r28
    2510:	ff 96       	adiw	r30, 0x3f	; 63
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9e af       	std	Y+62, r25	; 0x3e
    2524:	8d af       	std	Y+61, r24	; 0x3d
    2526:	8d ad       	ldd	r24, Y+61	; 0x3d
    2528:	9e ad       	ldd	r25, Y+62	; 0x3e
    252a:	9a af       	std	Y+58, r25	; 0x3a
    252c:	89 af       	std	Y+57, r24	; 0x39
    252e:	89 ad       	ldd	r24, Y+57	; 0x39
    2530:	9a ad       	ldd	r25, Y+58	; 0x3a
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <__stack+0x333>
    2536:	9a af       	std	Y+58, r25	; 0x3a
    2538:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(DELAY);

	clear_lcd();
    253a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Right");
    253e:	89 e3       	ldi	r24, 0x39	; 57
    2540:	92 e0       	ldi	r25, 0x02	; 2
    2542:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, right, 2);
    2546:	fe 01       	movw	r30, r28
    2548:	e7 59       	subi	r30, 0x97	; 151
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	a9 01       	movw	r20, r18
    2558:	22 e0       	ldi	r18, 0x02	; 2
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	aa ef       	ldi	r26, 0xFA	; 250
    2566:	b3 e4       	ldi	r27, 0x43	; 67
    2568:	8d ab       	std	Y+53, r24	; 0x35
    256a:	9e ab       	std	Y+54, r25	; 0x36
    256c:	af ab       	std	Y+55, r26	; 0x37
    256e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	6d a9       	ldd	r22, Y+53	; 0x35
    2572:	7e a9       	ldd	r23, Y+54	; 0x36
    2574:	8f a9       	ldd	r24, Y+55	; 0x37
    2576:	98 ad       	ldd	r25, Y+56	; 0x38
    2578:	26 e6       	ldi	r18, 0x66	; 102
    257a:	36 e6       	ldi	r19, 0x66	; 102
    257c:	46 e6       	ldi	r20, 0x66	; 102
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	89 ab       	std	Y+49, r24	; 0x31
    258a:	9a ab       	std	Y+50, r25	; 0x32
    258c:	ab ab       	std	Y+51, r26	; 0x33
    258e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2590:	69 a9       	ldd	r22, Y+49	; 0x31
    2592:	7a a9       	ldd	r23, Y+50	; 0x32
    2594:	8b a9       	ldd	r24, Y+51	; 0x33
    2596:	9c a9       	ldd	r25, Y+52	; 0x34
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <__stack+0x3b3>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	98 ab       	std	Y+48, r25	; 0x30
    25ae:	8f a7       	std	Y+47, r24	; 0x2f
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <__stack+0x431>
	else if (__tmp > 65535)
    25b2:	69 a9       	ldd	r22, Y+49	; 0x31
    25b4:	7a a9       	ldd	r23, Y+50	; 0x32
    25b6:	8b a9       	ldd	r24, Y+51	; 0x33
    25b8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <__stack+0x41d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	6d a9       	ldd	r22, Y+53	; 0x35
    25cc:	7e a9       	ldd	r23, Y+54	; 0x36
    25ce:	8f a9       	ldd	r24, Y+55	; 0x37
    25d0:	98 ad       	ldd	r25, Y+56	; 0x38
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	98 ab       	std	Y+48, r25	; 0x30
    25f0:	8f a7       	std	Y+47, r24	; 0x2f
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <__stack+0x413>
    25f4:	80 e7       	ldi	r24, 0x70	; 112
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9e a7       	std	Y+46, r25	; 0x2e
    25fa:	8d a7       	std	Y+45, r24	; 0x2d
    25fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    25fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <__stack+0x401>
    2604:	9e a7       	std	Y+46, r25	; 0x2e
    2606:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8f a5       	ldd	r24, Y+47	; 0x2f
    260a:	98 a9       	ldd	r25, Y+48	; 0x30
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	98 ab       	std	Y+48, r25	; 0x30
    2610:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8f a5       	ldd	r24, Y+47	; 0x2f
    2614:	98 a9       	ldd	r25, Y+48	; 0x30
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <__stack+0x3f5>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <__stack+0x445>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	69 a9       	ldd	r22, Y+49	; 0x31
    261e:	7a a9       	ldd	r23, Y+50	; 0x32
    2620:	8b a9       	ldd	r24, Y+51	; 0x33
    2622:	9c a9       	ldd	r25, Y+52	; 0x34
    2624:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	98 ab       	std	Y+48, r25	; 0x30
    262e:	8f a7       	std	Y+47, r24	; 0x2f
    2630:	8f a5       	ldd	r24, Y+47	; 0x2f
    2632:	98 a9       	ldd	r25, Y+48	; 0x30
    2634:	9c a7       	std	Y+44, r25	; 0x2c
    2636:	8b a7       	std	Y+43, r24	; 0x2b
    2638:	8b a5       	ldd	r24, Y+43	; 0x2b
    263a:	9c a5       	ldd	r25, Y+44	; 0x2c
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <__stack+0x43d>
    2640:	9c a7       	std	Y+44, r25	; 0x2c
    2642:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DELAY);

	if (right == 1)
    2644:	fe 01       	movw	r30, r28
    2646:	e7 59       	subi	r30, 0x97	; 151
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	f1 f4       	brne	.+60     	; 0x268c <__stack+0x48d>
	{
		pstVacantSpace->vacantSpace_Rotate = (trough_ID - TROUGHS_IN_ONE_ROW + 2);
    2650:	fe 01       	movw	r30, r28
    2652:	e6 59       	subi	r30, 0x96	; 150
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	a0 81       	ld	r26, Z
    2658:	b1 81       	ldd	r27, Z+1	; 0x01
    265a:	fe 01       	movw	r30, r28
    265c:	eb 59       	subi	r30, 0x9B	; 155
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	17 96       	adiw	r26, 0x07	; 7
    2666:	9c 93       	st	X, r25
    2668:	8e 93       	st	-X, r24
    266a:	16 97       	sbiw	r26, 0x06	; 6
		pstVacantSpace->vacantSpace_Return = ((trough_ID - TROUGHS_IN_ONE_ROW) * 2) + 4;
    266c:	fe 01       	movw	r30, r28
    266e:	eb 59       	subi	r30, 0x9B	; 155
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	fe 01       	movw	r30, r28
    267c:	e6 59       	subi	r30, 0x96	; 150
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	01 90       	ld	r0, Z+
    2682:	f0 81       	ld	r31, Z
    2684:	e0 2d       	mov	r30, r0
    2686:	95 83       	std	Z+5, r25	; 0x05
    2688:	84 83       	std	Z+4, r24	; 0x04
    268a:	1e c0       	rjmp	.+60     	; 0x26c8 <__stack+0x4c9>
	}
	else
	{
		pstVacantSpace->vacantSpace_Return = ((trough_ID) * 2) + 4;
    268c:	fe 01       	movw	r30, r28
    268e:	eb 59       	subi	r30, 0x9B	; 155
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	02 96       	adiw	r24, 0x02	; 2
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	fe 01       	movw	r30, r28
    269e:	e6 59       	subi	r30, 0x96	; 150
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	01 90       	ld	r0, Z+
    26a4:	f0 81       	ld	r31, Z
    26a6:	e0 2d       	mov	r30, r0
    26a8:	95 83       	std	Z+5, r25	; 0x05
    26aa:	84 83       	std	Z+4, r24	; 0x04
		pstVacantSpace->vacantSpace_Rotate = (trough_ID + 2);
    26ac:	fe 01       	movw	r30, r28
    26ae:	eb 59       	subi	r30, 0x9B	; 155
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	02 96       	adiw	r24, 0x02	; 2
    26b8:	fe 01       	movw	r30, r28
    26ba:	e6 59       	subi	r30, 0x96	; 150
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	01 90       	ld	r0, Z+
    26c0:	f0 81       	ld	r31, Z
    26c2:	e0 2d       	mov	r30, r0
    26c4:	97 83       	std	Z+7, r25	; 0x07
    26c6:	86 83       	std	Z+6, r24	; 0x06
	}

	clear_lcd();
    26c8:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Return");
    26cc:	8f e3       	ldi	r24, 0x3F	; 63
    26ce:	92 e0       	ldi	r25, 0x02	; 2
    26d0:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, pstVacantSpace->vacantSpace_Return, 2);
    26d4:	fe 01       	movw	r30, r28
    26d6:	e6 59       	subi	r30, 0x96	; 150
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	01 90       	ld	r0, Z+
    26dc:	f0 81       	ld	r31, Z
    26de:	e0 2d       	mov	r30, r0
    26e0:	24 81       	ldd	r18, Z+4	; 0x04
    26e2:	35 81       	ldd	r19, Z+5	; 0x05
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	a9 01       	movw	r20, r18
    26ea:	22 e0       	ldi	r18, 0x02	; 2
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	aa ef       	ldi	r26, 0xFA	; 250
    26f8:	b3 e4       	ldi	r27, 0x43	; 67
    26fa:	8f a3       	std	Y+39, r24	; 0x27
    26fc:	98 a7       	std	Y+40, r25	; 0x28
    26fe:	a9 a7       	std	Y+41, r26	; 0x29
    2700:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	6f a1       	ldd	r22, Y+39	; 0x27
    2704:	78 a5       	ldd	r23, Y+40	; 0x28
    2706:	89 a5       	ldd	r24, Y+41	; 0x29
    2708:	9a a5       	ldd	r25, Y+42	; 0x2a
    270a:	26 e6       	ldi	r18, 0x66	; 102
    270c:	36 e6       	ldi	r19, 0x66	; 102
    270e:	46 e6       	ldi	r20, 0x66	; 102
    2710:	55 e4       	ldi	r21, 0x45	; 69
    2712:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8b a3       	std	Y+35, r24	; 0x23
    271c:	9c a3       	std	Y+36, r25	; 0x24
    271e:	ad a3       	std	Y+37, r26	; 0x25
    2720:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2722:	6b a1       	ldd	r22, Y+35	; 0x23
    2724:	7c a1       	ldd	r23, Y+36	; 0x24
    2726:	8d a1       	ldd	r24, Y+37	; 0x25
    2728:	9e a1       	ldd	r25, Y+38	; 0x26
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <__stack+0x545>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <__stack+0x5c3>
	else if (__tmp > 65535)
    2744:	6b a1       	ldd	r22, Y+35	; 0x23
    2746:	7c a1       	ldd	r23, Y+36	; 0x24
    2748:	8d a1       	ldd	r24, Y+37	; 0x25
    274a:	9e a1       	ldd	r25, Y+38	; 0x26
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <__stack+0x5af>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	6f a1       	ldd	r22, Y+39	; 0x27
    275e:	78 a5       	ldd	r23, Y+40	; 0x28
    2760:	89 a5       	ldd	r24, Y+41	; 0x29
    2762:	9a a5       	ldd	r25, Y+42	; 0x2a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9a a3       	std	Y+34, r25	; 0x22
    2782:	89 a3       	std	Y+33, r24	; 0x21
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <__stack+0x5a5>
    2786:	80 e7       	ldi	r24, 0x70	; 112
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	98 a3       	std	Y+32, r25	; 0x20
    278c:	8f 8f       	std	Y+31, r24	; 0x1f
    278e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2790:	98 a1       	ldd	r25, Y+32	; 0x20
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <__stack+0x593>
    2796:	98 a3       	std	Y+32, r25	; 0x20
    2798:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	89 a1       	ldd	r24, Y+33	; 0x21
    279c:	9a a1       	ldd	r25, Y+34	; 0x22
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	89 a1       	ldd	r24, Y+33	; 0x21
    27a6:	9a a1       	ldd	r25, Y+34	; 0x22
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <__stack+0x587>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <__stack+0x5d7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	9e 8f       	std	Y+30, r25	; 0x1e
    27c8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <__stack+0x5cf>
    27d2:	9e 8f       	std	Y+30, r25	; 0x1e
    27d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DELAY);

	clear_lcd();
    27d6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Rotate");
    27da:	86 e4       	ldi	r24, 0x46	; 70
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, pstVacantSpace->vacantSpace_Rotate, 2);
    27e2:	fe 01       	movw	r30, r28
    27e4:	e6 59       	subi	r30, 0x96	; 150
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	01 90       	ld	r0, Z+
    27ea:	f0 81       	ld	r31, Z
    27ec:	e0 2d       	mov	r30, r0
    27ee:	26 81       	ldd	r18, Z+6	; 0x06
    27f0:	37 81       	ldd	r19, Z+7	; 0x07
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	a9 01       	movw	r20, r18
    27f8:	22 e0       	ldi	r18, 0x02	; 2
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa ef       	ldi	r26, 0xFA	; 250
    2806:	b3 e4       	ldi	r27, 0x43	; 67
    2808:	89 8f       	std	Y+25, r24	; 0x19
    280a:	9a 8f       	std	Y+26, r25	; 0x1a
    280c:	ab 8f       	std	Y+27, r26	; 0x1b
    280e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	69 8d       	ldd	r22, Y+25	; 0x19
    2812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2818:	26 e6       	ldi	r18, 0x66	; 102
    281a:	36 e6       	ldi	r19, 0x66	; 102
    281c:	46 e6       	ldi	r20, 0x66	; 102
    281e:	55 e4       	ldi	r21, 0x45	; 69
    2820:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8d 8b       	std	Y+21, r24	; 0x15
    282a:	9e 8b       	std	Y+22, r25	; 0x16
    282c:	af 8b       	std	Y+23, r26	; 0x17
    282e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2830:	6d 89       	ldd	r22, Y+21	; 0x15
    2832:	7e 89       	ldd	r23, Y+22	; 0x16
    2834:	8f 89       	ldd	r24, Y+23	; 0x17
    2836:	98 8d       	ldd	r25, Y+24	; 0x18
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <__stack+0x653>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <__stack+0x6d1>
	else if (__tmp > 65535)
    2852:	6d 89       	ldd	r22, Y+21	; 0x15
    2854:	7e 89       	ldd	r23, Y+22	; 0x16
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <__stack+0x6bd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	69 8d       	ldd	r22, Y+25	; 0x19
    286c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <__stack+0x6b3>
    2894:	80 e7       	ldi	r24, 0x70	; 112
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	9a 8b       	std	Y+18, r25	; 0x12
    289a:	89 8b       	std	Y+17, r24	; 0x11
    289c:	89 89       	ldd	r24, Y+17	; 0x11
    289e:	9a 89       	ldd	r25, Y+18	; 0x12
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <__stack+0x6a1>
    28a4:	9a 8b       	std	Y+18, r25	; 0x12
    28a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8b 89       	ldd	r24, Y+19	; 0x13
    28aa:	9c 89       	ldd	r25, Y+20	; 0x14
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <__stack+0x695>
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <__stack+0x6e5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	98 8b       	std	Y+16, r25	; 0x10
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <__stack+0x6dd>
    28e0:	98 8b       	std	Y+16, r25	; 0x10
    28e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DELAY);

	clear_lcd();
    28e4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	aa ef       	ldi	r26, 0xFA	; 250
    28ee:	b3 e4       	ldi	r27, 0x43	; 67
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	9c 87       	std	Y+12, r25	; 0x0c
    28f4:	ad 87       	std	Y+13, r26	; 0x0d
    28f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	26 e6       	ldi	r18, 0x66	; 102
    2902:	36 e6       	ldi	r19, 0x66	; 102
    2904:	46 e6       	ldi	r20, 0x66	; 102
    2906:	55 e4       	ldi	r21, 0x45	; 69
    2908:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8f 83       	std	Y+7, r24	; 0x07
    2912:	98 87       	std	Y+8, r25	; 0x08
    2914:	a9 87       	std	Y+9, r26	; 0x09
    2916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <__stack+0x73b>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <__stack+0x7b9>
	else if (__tmp > 65535)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <__stack+0x7a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	0f c0       	rjmp	.+30     	; 0x299a <__stack+0x79b>
    297c:	80 e7       	ldi	r24, 0x70	; 112
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <__stack+0x789>
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <__stack+0x77d>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <__stack+0x7cd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <__stack+0x7c5>
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY);
}
    29cc:	c3 59       	subi	r28, 0x93	; 147
    29ce:	df 4f       	sbci	r29, 0xFF	; 255
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	08 95       	ret

000029e4 <decideWhatToDoOnVacantSpace>:
 * retVal = 2 (Return)
*/


unsigned int decideWhatToDoOnVacantSpace(vacantSpace *pstVacantSpace)
{
    29e4:	0f 93       	push	r16
    29e6:	1f 93       	push	r17
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	c8 58       	subi	r28, 0x88	; 136
    29f2:	d0 40       	sbci	r29, 0x00	; 0
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	fe 01       	movw	r30, r28
    2a00:	e9 57       	subi	r30, 0x79	; 121
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
	unsigned int vacantSpace_Count = 0;
    2a08:	fe 01       	movw	r30, r28
    2a0a:	eb 57       	subi	r30, 0x7B	; 123
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	11 82       	std	Z+1, r1	; 0x01
    2a10:	10 82       	st	Z, r1
	unsigned int retVal = 0, forward = 0, came = 0;
    2a12:	fe 01       	movw	r30, r28
    2a14:	ed 57       	subi	r30, 0x7D	; 125
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	11 82       	std	Z+1, r1	; 0x01
    2a1a:	10 82       	st	Z, r1
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ef 57       	subi	r30, 0x7F	; 127
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	11 82       	std	Z+1, r1	; 0x01
    2a24:	10 82       	st	Z, r1
    2a26:	fe 01       	movw	r30, r28
    2a28:	e1 58       	subi	r30, 0x81	; 129
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	11 82       	std	Z+1, r1	; 0x01
    2a2e:	10 82       	st	Z, r1


	vacantSpace_Count = pstVacantSpace->vacantSpace_Count;
    2a30:	de 01       	movw	r26, r28
    2a32:	ab 57       	subi	r26, 0x7B	; 123
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	e9 57       	subi	r30, 0x79	; 121
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	01 90       	ld	r0, Z+
    2a3e:	f0 81       	ld	r31, Z
    2a40:	e0 2d       	mov	r30, r0
    2a42:	80 85       	ldd	r24, Z+8	; 0x08
    2a44:	91 85       	ldd	r25, Z+9	; 0x09
    2a46:	8d 93       	st	X+, r24
    2a48:	9c 93       	st	X, r25

	vacantSpace_Count++;
    2a4a:	de 01       	movw	r26, r28
    2a4c:	ab 57       	subi	r26, 0x7B	; 123
    2a4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	eb 57       	subi	r30, 0x7B	; 123
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	8d 93       	st	X+, r24
    2a5e:	9c 93       	st	X, r25
	pstVacantSpace->vacantSpace_Count = vacantSpace_Count;
    2a60:	fe 01       	movw	r30, r28
    2a62:	e9 57       	subi	r30, 0x79	; 121
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	a0 81       	ld	r26, Z
    2a68:	b1 81       	ldd	r27, Z+1	; 0x01
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	eb 57       	subi	r30, 0x7B	; 123
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	19 96       	adiw	r26, 0x09	; 9
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
    2a7a:	18 97       	sbiw	r26, 0x08	; 8

	clear_lcd();
    2a7c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("WhatToDo?");
    2a80:	8d e4       	ldi	r24, 0x4D	; 77
    2a82:	92 e0       	ldi	r25, 0x02	; 2
    2a84:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e5 58       	subi	r30, 0x85	; 133
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	aa ef       	ldi	r26, 0xFA	; 250
    2a94:	b3 e4       	ldi	r27, 0x43	; 67
    2a96:	80 83       	st	Z, r24
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	a2 83       	std	Z+2, r26	; 0x02
    2a9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	09 58       	subi	r16, 0x89	; 137
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 58       	subi	r30, 0x85	; 133
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	26 e6       	ldi	r18, 0x66	; 102
    2ab4:	36 e6       	ldi	r19, 0x66	; 102
    2ab6:	46 e6       	ldi	r20, 0x66	; 102
    2ab8:	55 e4       	ldi	r21, 0x45	; 69
    2aba:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2acc:	fe 01       	movw	r30, r28
    2ace:	e9 58       	subi	r30, 0x89	; 137
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	44 f4       	brge	.+16     	; 0x2afa <decideWhatToDoOnVacantSpace+0x116>
		__ticks = 1;
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 58       	subi	r30, 0x8B	; 139
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	64 c0       	rjmp	.+200    	; 0x2bc2 <decideWhatToDoOnVacantSpace+0x1de>
	else if (__tmp > 65535)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e9 58       	subi	r30, 0x89	; 137
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	3f ef       	ldi	r19, 0xFF	; 255
    2b0c:	4f e7       	ldi	r20, 0x7F	; 127
    2b0e:	57 e4       	ldi	r21, 0x47	; 71
    2b10:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    2b14:	18 16       	cp	r1, r24
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <decideWhatToDoOnVacantSpace+0x136>
    2b18:	43 c0       	rjmp	.+134    	; 0x2ba0 <decideWhatToDoOnVacantSpace+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e5 58       	subi	r30, 0x85	; 133
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	51 e4       	ldi	r21, 0x41	; 65
    2b30:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8e 01       	movw	r16, r28
    2b3a:	0b 58       	subi	r16, 0x8B	; 139
    2b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
    2b50:	1f c0       	rjmp	.+62     	; 0x2b90 <decideWhatToDoOnVacantSpace+0x1ac>
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 58       	subi	r30, 0x8D	; 141
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 e7       	ldi	r24, 0x70	; 112
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 58       	subi	r30, 0x8D	; 141
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <decideWhatToDoOnVacantSpace+0x186>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ed 58       	subi	r30, 0x8D	; 141
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	de 01       	movw	r26, r28
    2b7a:	ab 58       	subi	r26, 0x8B	; 139
    2b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	eb 58       	subi	r30, 0x8B	; 139
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	9c 93       	st	X, r25
    2b8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	fe 01       	movw	r30, r28
    2b92:	eb 58       	subi	r30, 0x8B	; 139
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	d1 f6       	brne	.-76     	; 0x2b52 <decideWhatToDoOnVacantSpace+0x16e>
    2b9e:	27 c0       	rjmp	.+78     	; 0x2bee <decideWhatToDoOnVacantSpace+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	0b 58       	subi	r16, 0x8B	; 139
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e9 58       	subi	r30, 0x89	; 137
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	de 01       	movw	r26, r28
    2bc4:	af 58       	subi	r26, 0x8F	; 143
    2bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	eb 58       	subi	r30, 0x8B	; 139
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	8d 93       	st	X+, r24
    2bd4:	9c 93       	st	X, r25
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ef 58       	subi	r30, 0x8F	; 143
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <decideWhatToDoOnVacantSpace+0x1fc>
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 58       	subi	r30, 0x8F	; 143
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
	_delay_ms(DELAY);

	clear_lcd();
    2bee:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("Vacant Count");
    2bf2:	87 e5       	ldi	r24, 0x57	; 87
    2bf4:	92 e0       	ldi	r25, 0x02	; 2
    2bf6:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, vacantSpace_Count, 2);
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	eb 57       	subi	r30, 0x7B	; 123
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	20 81       	ld	r18, Z
    2c02:	31 81       	ldd	r19, Z+1	; 0x01
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	a9 01       	movw	r20, r18
    2c0a:	22 e0       	ldi	r18, 0x02	; 2
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    2c12:	fe 01       	movw	r30, r28
    2c14:	e3 59       	subi	r30, 0x93	; 147
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	aa ef       	ldi	r26, 0xFA	; 250
    2c1e:	b3 e4       	ldi	r27, 0x43	; 67
    2c20:	80 83       	st	Z, r24
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	a2 83       	std	Z+2, r26	; 0x02
    2c26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c28:	8e 01       	movw	r16, r28
    2c2a:	07 59       	subi	r16, 0x97	; 151
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e3 59       	subi	r30, 0x93	; 147
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	26 e6       	ldi	r18, 0x66	; 102
    2c3e:	36 e6       	ldi	r19, 0x66	; 102
    2c40:	46 e6       	ldi	r20, 0x66	; 102
    2c42:	55 e4       	ldi	r21, 0x45	; 69
    2c44:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	80 83       	st	Z, r24
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	a2 83       	std	Z+2, r26	; 0x02
    2c54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c56:	fe 01       	movw	r30, r28
    2c58:	e7 59       	subi	r30, 0x97	; 151
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e8       	ldi	r20, 0x80	; 128
    2c6a:	5f e3       	ldi	r21, 0x3F	; 63
    2c6c:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2c70:	88 23       	and	r24, r24
    2c72:	44 f4       	brge	.+16     	; 0x2c84 <decideWhatToDoOnVacantSpace+0x2a0>
		__ticks = 1;
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 59       	subi	r30, 0x99	; 153
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	80 83       	st	Z, r24
    2c82:	64 c0       	rjmp	.+200    	; 0x2d4c <decideWhatToDoOnVacantSpace+0x368>
	else if (__tmp > 65535)
    2c84:	fe 01       	movw	r30, r28
    2c86:	e7 59       	subi	r30, 0x97	; 151
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <decideWhatToDoOnVacantSpace+0x2c0>
    2ca2:	43 c0       	rjmp	.+134    	; 0x2d2a <decideWhatToDoOnVacantSpace+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e3 59       	subi	r30, 0x93	; 147
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8e 01       	movw	r16, r28
    2cc4:	09 59       	subi	r16, 0x99	; 153
    2cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	f8 01       	movw	r30, r16
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	1f c0       	rjmp	.+62     	; 0x2d1a <decideWhatToDoOnVacantSpace+0x336>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 59       	subi	r30, 0x9B	; 155
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 e7       	ldi	r24, 0x70	; 112
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	fe 01       	movw	r30, r28
    2cec:	eb 59       	subi	r30, 0x9B	; 155
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <decideWhatToDoOnVacantSpace+0x310>
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	eb 59       	subi	r30, 0x9B	; 155
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	de 01       	movw	r26, r28
    2d04:	a9 59       	subi	r26, 0x99	; 153
    2d06:	bf 4f       	sbci	r27, 0xFF	; 255
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e9 59       	subi	r30, 0x99	; 153
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	11 96       	adiw	r26, 0x01	; 1
    2d16:	9c 93       	st	X, r25
    2d18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e9 59       	subi	r30, 0x99	; 153
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	d1 f6       	brne	.-76     	; 0x2cdc <decideWhatToDoOnVacantSpace+0x2f8>
    2d28:	28 c0       	rjmp	.+80     	; 0x2d7a <decideWhatToDoOnVacantSpace+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	8e 01       	movw	r16, r28
    2d2c:	09 59       	subi	r16, 0x99	; 153
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	e7 59       	subi	r30, 0x97	; 151
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	f8 01       	movw	r30, r16
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
    2d4c:	de 01       	movw	r26, r28
    2d4e:	ad 59       	subi	r26, 0x9D	; 157
    2d50:	bf 4f       	sbci	r27, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	e9 59       	subi	r30, 0x99	; 153
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	9c 93       	st	X, r25
    2d60:	8e 93       	st	-X, r24
    2d62:	fe 01       	movw	r30, r28
    2d64:	ed 59       	subi	r30, 0x9D	; 157
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <decideWhatToDoOnVacantSpace+0x388>
    2d70:	fe 01       	movw	r30, r28
    2d72:	ed 59       	subi	r30, 0x9D	; 157
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24

    /* Order in which these cases have been written is important.
     * It is possible that after the same vacant space the bot
     * has to rotate and has to stop/start sowing seed.
     */
	if (vacantSpace_Count == pstVacantSpace->vacantSpace_Rotate)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e9 57       	subi	r30, 0x79	; 121
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	01 90       	ld	r0, Z+
    2d82:	f0 81       	ld	r31, Z
    2d84:	e0 2d       	mov	r30, r0
    2d86:	26 81       	ldd	r18, Z+6	; 0x06
    2d88:	37 81       	ldd	r19, Z+7	; 0x07
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	eb 57       	subi	r30, 0x7B	; 123
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	91 81       	ldd	r25, Z+1	; 0x01
    2d94:	28 17       	cp	r18, r24
    2d96:	39 07       	cpc	r19, r25
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <decideWhatToDoOnVacantSpace+0x3b8>
    2d9a:	de c0       	rjmp	.+444    	; 0x2f58 <decideWhatToDoOnVacantSpace+0x574>
	{
		clear_lcd();
    2d9c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
		my_lcd_string("CAME ROTATE");
    2da0:	84 e6       	ldi	r24, 0x64	; 100
    2da2:	92 e0       	ldi	r25, 0x02	; 2
    2da4:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    2da8:	fe 01       	movw	r30, r28
    2daa:	e1 5a       	subi	r30, 0xA1	; 161
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	aa ef       	ldi	r26, 0xFA	; 250
    2db4:	b3 e4       	ldi	r27, 0x43	; 67
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	05 5a       	subi	r16, 0xA5	; 165
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e1 5a       	subi	r30, 0xA1	; 161
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	26 e6       	ldi	r18, 0x66	; 102
    2dd4:	36 e6       	ldi	r19, 0x66	; 102
    2dd6:	46 e6       	ldi	r20, 0x66	; 102
    2dd8:	55 e4       	ldi	r21, 0x45	; 69
    2dda:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 83       	st	Z, r24
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	a2 83       	std	Z+2, r26	; 0x02
    2dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dec:	fe 01       	movw	r30, r28
    2dee:	e5 5a       	subi	r30, 0xA5	; 165
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	44 f4       	brge	.+16     	; 0x2e1a <decideWhatToDoOnVacantSpace+0x436>
		__ticks = 1;
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 5a       	subi	r30, 0xA7	; 167
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	64 c0       	rjmp	.+200    	; 0x2ee2 <decideWhatToDoOnVacantSpace+0x4fe>
	else if (__tmp > 65535)
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e5 5a       	subi	r30, 0xA5	; 165
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	0c f0       	brlt	.+2      	; 0x2e3a <decideWhatToDoOnVacantSpace+0x456>
    2e38:	43 c0       	rjmp	.+134    	; 0x2ec0 <decideWhatToDoOnVacantSpace+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e1 5a       	subi	r30, 0xA1	; 161
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	60 81       	ld	r22, Z
    2e42:	71 81       	ldd	r23, Z+1	; 0x01
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8e 01       	movw	r16, r28
    2e5a:	07 5a       	subi	r16, 0xA7	; 167
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	1f c0       	rjmp	.+62     	; 0x2eb0 <decideWhatToDoOnVacantSpace+0x4cc>
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 5a       	subi	r30, 0xA9	; 169
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 e7       	ldi	r24, 0x70	; 112
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
    2e80:	fe 01       	movw	r30, r28
    2e82:	e9 5a       	subi	r30, 0xA9	; 169
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 81       	ld	r24, Z
    2e88:	91 81       	ldd	r25, Z+1	; 0x01
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <decideWhatToDoOnVacantSpace+0x4a6>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 5a       	subi	r30, 0xA9	; 169
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e98:	de 01       	movw	r26, r28
    2e9a:	a7 5a       	subi	r26, 0xA7	; 167
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 5a       	subi	r30, 0xA7	; 167
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	11 96       	adiw	r26, 0x01	; 1
    2eac:	9c 93       	st	X, r25
    2eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e7 5a       	subi	r30, 0xA7	; 167
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	d1 f6       	brne	.-76     	; 0x2e72 <decideWhatToDoOnVacantSpace+0x48e>
    2ebe:	27 c0       	rjmp	.+78     	; 0x2f0e <decideWhatToDoOnVacantSpace+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	07 5a       	subi	r16, 0xA7	; 167
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e5 5a       	subi	r30, 0xA5	; 165
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	f8 01       	movw	r30, r16
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
    2ee2:	de 01       	movw	r26, r28
    2ee4:	ab 5a       	subi	r26, 0xAB	; 171
    2ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e7 5a       	subi	r30, 0xA7	; 167
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	8d 93       	st	X+, r24
    2ef4:	9c 93       	st	X, r25
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	eb 5a       	subi	r30, 0xAB	; 171
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <decideWhatToDoOnVacantSpace+0x51c>
    2f04:	fe 01       	movw	r30, r28
    2f06:	eb 5a       	subi	r30, 0xAB	; 171
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
		_delay_ms(DELAY);

		right_degrees(ROTATE_RIGHT_DEGREES);
    2f0e:	84 eb       	ldi	r24, 0xB4	; 180
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <right_degrees>
		came = 1;
    2f16:	fe 01       	movw	r30, r28
    2f18:	e1 58       	subi	r30, 0x81	; 129
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24

		vacantSpace_Count++;
    2f24:	de 01       	movw	r26, r28
    2f26:	ab 57       	subi	r26, 0x7B	; 123
    2f28:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	eb 57       	subi	r30, 0x7B	; 123
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	8d 93       	st	X+, r24
    2f38:	9c 93       	st	X, r25
		pstVacantSpace->vacantSpace_Count = vacantSpace_Count;
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e9 57       	subi	r30, 0x79	; 121
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	a0 81       	ld	r26, Z
    2f42:	b1 81       	ldd	r27, Z+1	; 0x01
    2f44:	fe 01       	movw	r30, r28
    2f46:	eb 57       	subi	r30, 0x7B	; 123
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	19 96       	adiw	r26, 0x09	; 9
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
    2f54:	18 97       	sbiw	r26, 0x08	; 8
    2f56:	ef c0       	rjmp	.+478    	; 0x3136 <decideWhatToDoOnVacantSpace+0x752>

        /* When bot rotates, no need to move bot in forward direction */
	}
	else if (vacantSpace_Count == pstVacantSpace->vacantSpace_Return)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e9 57       	subi	r30, 0x79	; 121
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	01 90       	ld	r0, Z+
    2f60:	f0 81       	ld	r31, Z
    2f62:	e0 2d       	mov	r30, r0
    2f64:	24 81       	ldd	r18, Z+4	; 0x04
    2f66:	35 81       	ldd	r19, Z+5	; 0x05
    2f68:	fe 01       	movw	r30, r28
    2f6a:	eb 57       	subi	r30, 0x7B	; 123
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	28 17       	cp	r18, r24
    2f74:	39 07       	cpc	r19, r25
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <decideWhatToDoOnVacantSpace+0x596>
    2f78:	d0 c0       	rjmp	.+416    	; 0x311a <decideWhatToDoOnVacantSpace+0x736>
	{
		clear_lcd();
    2f7a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
		my_lcd_string("CAME RETURN");
    2f7e:	80 e7       	ldi	r24, 0x70	; 112
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 5a       	subi	r30, 0xAF	; 175
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	aa ef       	ldi	r26, 0xFA	; 250
    2f92:	b3 e4       	ldi	r27, 0x43	; 67
    2f94:	80 83       	st	Z, r24
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	a2 83       	std	Z+2, r26	; 0x02
    2f9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9c:	8e 01       	movw	r16, r28
    2f9e:	03 5b       	subi	r16, 0xB3	; 179
    2fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ef 5a       	subi	r30, 0xAF	; 175
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	26 e6       	ldi	r18, 0x66	; 102
    2fb2:	36 e6       	ldi	r19, 0x66	; 102
    2fb4:	46 e6       	ldi	r20, 0x66	; 102
    2fb6:	55 e4       	ldi	r21, 0x45	; 69
    2fb8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	80 83       	st	Z, r24
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	a2 83       	std	Z+2, r26	; 0x02
    2fc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e3 5b       	subi	r30, 0xB3	; 179
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	60 81       	ld	r22, Z
    2fd2:	71 81       	ldd	r23, Z+1	; 0x01
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e8       	ldi	r20, 0x80	; 128
    2fde:	5f e3       	ldi	r21, 0x3F	; 63
    2fe0:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    2fe4:	88 23       	and	r24, r24
    2fe6:	44 f4       	brge	.+16     	; 0x2ff8 <decideWhatToDoOnVacantSpace+0x614>
		__ticks = 1;
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 5b       	subi	r30, 0xB5	; 181
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	80 83       	st	Z, r24
    2ff6:	64 c0       	rjmp	.+200    	; 0x30c0 <decideWhatToDoOnVacantSpace+0x6dc>
	else if (__tmp > 65535)
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e3 5b       	subi	r30, 0xB3	; 179
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	0c f0       	brlt	.+2      	; 0x3018 <decideWhatToDoOnVacantSpace+0x634>
    3016:	43 c0       	rjmp	.+134    	; 0x309e <decideWhatToDoOnVacantSpace+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3018:	fe 01       	movw	r30, r28
    301a:	ef 5a       	subi	r30, 0xAF	; 175
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8e 01       	movw	r16, r28
    3038:	05 5b       	subi	r16, 0xB5	; 181
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	1f c0       	rjmp	.+62     	; 0x308e <decideWhatToDoOnVacantSpace+0x6aa>
    3050:	fe 01       	movw	r30, r28
    3052:	e7 5b       	subi	r30, 0xB7	; 183
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 e7       	ldi	r24, 0x70	; 112
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	80 83       	st	Z, r24
    305e:	fe 01       	movw	r30, r28
    3060:	e7 5b       	subi	r30, 0xB7	; 183
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <decideWhatToDoOnVacantSpace+0x684>
    306c:	fe 01       	movw	r30, r28
    306e:	e7 5b       	subi	r30, 0xB7	; 183
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	de 01       	movw	r26, r28
    3078:	a5 5b       	subi	r26, 0xB5	; 181
    307a:	bf 4f       	sbci	r27, 0xFF	; 255
    307c:	fe 01       	movw	r30, r28
    307e:	e5 5b       	subi	r30, 0xB5	; 181
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	11 96       	adiw	r26, 0x01	; 1
    308a:	9c 93       	st	X, r25
    308c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	fe 01       	movw	r30, r28
    3090:	e5 5b       	subi	r30, 0xB5	; 181
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	d1 f6       	brne	.-76     	; 0x3050 <decideWhatToDoOnVacantSpace+0x66c>
    309c:	28 c0       	rjmp	.+80     	; 0x30ee <decideWhatToDoOnVacantSpace+0x70a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	8e 01       	movw	r16, r28
    30a0:	05 5b       	subi	r16, 0xB5	; 181
    30a2:	1f 4f       	sbci	r17, 0xFF	; 255
    30a4:	fe 01       	movw	r30, r28
    30a6:	e3 5b       	subi	r30, 0xB3	; 179
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	f8 01       	movw	r30, r16
    30bc:	91 83       	std	Z+1, r25	; 0x01
    30be:	80 83       	st	Z, r24
    30c0:	de 01       	movw	r26, r28
    30c2:	a9 5b       	subi	r26, 0xB9	; 185
    30c4:	bf 4f       	sbci	r27, 0xFF	; 255
    30c6:	fe 01       	movw	r30, r28
    30c8:	e5 5b       	subi	r30, 0xB5	; 181
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	91 81       	ldd	r25, Z+1	; 0x01
    30d0:	11 96       	adiw	r26, 0x01	; 1
    30d2:	9c 93       	st	X, r25
    30d4:	8e 93       	st	-X, r24
    30d6:	fe 01       	movw	r30, r28
    30d8:	e9 5b       	subi	r30, 0xB9	; 185
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <decideWhatToDoOnVacantSpace+0x6fc>
    30e4:	fe 01       	movw	r30, r28
    30e6:	e9 5b       	subi	r30, 0xB9	; 185
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
		_delay_ms(DELAY);

		retVal = 2;
    30ee:	fe 01       	movw	r30, r28
    30f0:	ed 57       	subi	r30, 0x7D	; 125
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
		forward = 1;
    30fc:	fe 01       	movw	r30, r28
    30fe:	ef 57       	subi	r30, 0x7F	; 127
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
		came = 1;
    310a:	fe 01       	movw	r30, r28
    310c:	e1 58       	subi	r30, 0x81	; 129
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	80 83       	st	Z, r24
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <decideWhatToDoOnVacantSpace+0x752>
	}
    else
    {
        forward = 1;
    311a:	fe 01       	movw	r30, r28
    311c:	ef 57       	subi	r30, 0x7F	; 127
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
        came = 1;
    3128:	fe 01       	movw	r30, r28
    312a:	e1 58       	subi	r30, 0x81	; 129
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	80 83       	st	Z, r24
    }

	if (vacantSpace_Count == pstVacantSpace->vacantSpace_SeedSow)
    3136:	fe 01       	movw	r30, r28
    3138:	e9 57       	subi	r30, 0x79	; 121
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	01 90       	ld	r0, Z+
    313e:	f0 81       	ld	r31, Z
    3140:	e0 2d       	mov	r30, r0
    3142:	20 81       	ld	r18, Z
    3144:	31 81       	ldd	r19, Z+1	; 0x01
    3146:	fe 01       	movw	r30, r28
    3148:	eb 57       	subi	r30, 0x7B	; 123
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	09 f0       	breq	.+2      	; 0x3158 <decideWhatToDoOnVacantSpace+0x774>
    3156:	a1 c0       	rjmp	.+322    	; 0x329a <decideWhatToDoOnVacantSpace+0x8b6>
	{
		clear_lcd();
    3158:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
		my_lcd_string("CAME SEED SOW");
    315c:	8c e7       	ldi	r24, 0x7C	; 124
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    3164:	fe 01       	movw	r30, r28
    3166:	ed 5b       	subi	r30, 0xBD	; 189
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	aa ef       	ldi	r26, 0xFA	; 250
    3170:	b3 e4       	ldi	r27, 0x43	; 67
    3172:	80 83       	st	Z, r24
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	a2 83       	std	Z+2, r26	; 0x02
    3178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	8e 01       	movw	r16, r28
    317c:	01 5c       	subi	r16, 0xC1	; 193
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	ed 5b       	subi	r30, 0xBD	; 189
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	26 e6       	ldi	r18, 0x66	; 102
    3190:	36 e6       	ldi	r19, 0x66	; 102
    3192:	46 e6       	ldi	r20, 0x66	; 102
    3194:	55 e4       	ldi	r21, 0x45	; 69
    3196:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	f8 01       	movw	r30, r16
    31a0:	80 83       	st	Z, r24
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	a2 83       	std	Z+2, r26	; 0x02
    31a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a8:	fe 01       	movw	r30, r28
    31aa:	ff 96       	adiw	r30, 0x3f	; 63
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <decideWhatToDoOnVacantSpace+0x7ea>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9e af       	std	Y+62, r25	; 0x3e
    31ca:	8d af       	std	Y+61, r24	; 0x3d
    31cc:	46 c0       	rjmp	.+140    	; 0x325a <decideWhatToDoOnVacantSpace+0x876>
	else if (__tmp > 65535)
    31ce:	fe 01       	movw	r30, r28
    31d0:	ff 96       	adiw	r30, 0x3f	; 63
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	3f ef       	ldi	r19, 0xFF	; 255
    31de:	4f e7       	ldi	r20, 0x7F	; 127
    31e0:	57 e4       	ldi	r21, 0x47	; 71
    31e2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    31e6:	18 16       	cp	r1, r24
    31e8:	64 f5       	brge	.+88     	; 0x3242 <decideWhatToDoOnVacantSpace+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ea:	fe 01       	movw	r30, r28
    31ec:	ed 5b       	subi	r30, 0xBD	; 189
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	60 81       	ld	r22, Z
    31f2:	71 81       	ldd	r23, Z+1	; 0x01
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	93 81       	ldd	r25, Z+3	; 0x03
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e2       	ldi	r20, 0x20	; 32
    31fe:	51 e4       	ldi	r21, 0x41	; 65
    3200:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	9e af       	std	Y+62, r25	; 0x3e
    3216:	8d af       	std	Y+61, r24	; 0x3d
    3218:	0f c0       	rjmp	.+30     	; 0x3238 <decideWhatToDoOnVacantSpace+0x854>
    321a:	80 e7       	ldi	r24, 0x70	; 112
    321c:	91 e0       	ldi	r25, 0x01	; 1
    321e:	9c af       	std	Y+60, r25	; 0x3c
    3220:	8b af       	std	Y+59, r24	; 0x3b
    3222:	8b ad       	ldd	r24, Y+59	; 0x3b
    3224:	9c ad       	ldd	r25, Y+60	; 0x3c
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <decideWhatToDoOnVacantSpace+0x842>
    322a:	9c af       	std	Y+60, r25	; 0x3c
    322c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3230:	9e ad       	ldd	r25, Y+62	; 0x3e
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	9e af       	std	Y+62, r25	; 0x3e
    3236:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3238:	8d ad       	ldd	r24, Y+61	; 0x3d
    323a:	9e ad       	ldd	r25, Y+62	; 0x3e
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	69 f7       	brne	.-38     	; 0x321a <decideWhatToDoOnVacantSpace+0x836>
    3240:	16 c0       	rjmp	.+44     	; 0x326e <decideWhatToDoOnVacantSpace+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3242:	fe 01       	movw	r30, r28
    3244:	ff 96       	adiw	r30, 0x3f	; 63
    3246:	60 81       	ld	r22, Z
    3248:	71 81       	ldd	r23, Z+1	; 0x01
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e af       	std	Y+62, r25	; 0x3e
    3258:	8d af       	std	Y+61, r24	; 0x3d
    325a:	8d ad       	ldd	r24, Y+61	; 0x3d
    325c:	9e ad       	ldd	r25, Y+62	; 0x3e
    325e:	9a af       	std	Y+58, r25	; 0x3a
    3260:	89 af       	std	Y+57, r24	; 0x39
    3262:	89 ad       	ldd	r24, Y+57	; 0x39
    3264:	9a ad       	ldd	r25, Y+58	; 0x3a
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <decideWhatToDoOnVacantSpace+0x882>
    326a:	9a af       	std	Y+58, r25	; 0x3a
    326c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(DELAY);
		retVal = 1;
    326e:	fe 01       	movw	r30, r28
    3270:	ed 57       	subi	r30, 0x7D	; 125
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	80 83       	st	Z, r24
		forward = 1;
    327c:	fe 01       	movw	r30, r28
    327e:	ef 57       	subi	r30, 0x7F	; 127
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
		came = 1;
    328a:	fe 01       	movw	r30, r28
    328c:	e1 58       	subi	r30, 0x81	; 129
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	9c c0       	rjmp	.+312    	; 0x33d2 <decideWhatToDoOnVacantSpace+0x9ee>
	}
	else if (vacantSpace_Count == pstVacantSpace->vacantSpace_SeedStop)
    329a:	fe 01       	movw	r30, r28
    329c:	e9 57       	subi	r30, 0x79	; 121
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	01 90       	ld	r0, Z+
    32a2:	f0 81       	ld	r31, Z
    32a4:	e0 2d       	mov	r30, r0
    32a6:	22 81       	ldd	r18, Z+2	; 0x02
    32a8:	33 81       	ldd	r19, Z+3	; 0x03
    32aa:	fe 01       	movw	r30, r28
    32ac:	eb 57       	subi	r30, 0x7B	; 123
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	28 17       	cp	r18, r24
    32b6:	39 07       	cpc	r19, r25
    32b8:	09 f0       	breq	.+2      	; 0x32bc <decideWhatToDoOnVacantSpace+0x8d8>
    32ba:	8b c0       	rjmp	.+278    	; 0x33d2 <decideWhatToDoOnVacantSpace+0x9ee>
	{
		clear_lcd();
    32bc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
		my_lcd_string("CAME SEED STOP");
    32c0:	8a e8       	ldi	r24, 0x8A	; 138
    32c2:	92 e0       	ldi	r25, 0x02	; 2
    32c4:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	aa ef       	ldi	r26, 0xFA	; 250
    32ce:	b3 e4       	ldi	r27, 0x43	; 67
    32d0:	8d ab       	std	Y+53, r24	; 0x35
    32d2:	9e ab       	std	Y+54, r25	; 0x36
    32d4:	af ab       	std	Y+55, r26	; 0x37
    32d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d8:	6d a9       	ldd	r22, Y+53	; 0x35
    32da:	7e a9       	ldd	r23, Y+54	; 0x36
    32dc:	8f a9       	ldd	r24, Y+55	; 0x37
    32de:	98 ad       	ldd	r25, Y+56	; 0x38
    32e0:	26 e6       	ldi	r18, 0x66	; 102
    32e2:	36 e6       	ldi	r19, 0x66	; 102
    32e4:	46 e6       	ldi	r20, 0x66	; 102
    32e6:	55 e4       	ldi	r21, 0x45	; 69
    32e8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	89 ab       	std	Y+49, r24	; 0x31
    32f2:	9a ab       	std	Y+50, r25	; 0x32
    32f4:	ab ab       	std	Y+51, r26	; 0x33
    32f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32f8:	69 a9       	ldd	r22, Y+49	; 0x31
    32fa:	7a a9       	ldd	r23, Y+50	; 0x32
    32fc:	8b a9       	ldd	r24, Y+51	; 0x33
    32fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    330c:	88 23       	and	r24, r24
    330e:	2c f4       	brge	.+10     	; 0x331a <decideWhatToDoOnVacantSpace+0x936>
		__ticks = 1;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	98 ab       	std	Y+48, r25	; 0x30
    3316:	8f a7       	std	Y+47, r24	; 0x2f
    3318:	3f c0       	rjmp	.+126    	; 0x3398 <decideWhatToDoOnVacantSpace+0x9b4>
	else if (__tmp > 65535)
    331a:	69 a9       	ldd	r22, Y+49	; 0x31
    331c:	7a a9       	ldd	r23, Y+50	; 0x32
    331e:	8b a9       	ldd	r24, Y+51	; 0x33
    3320:	9c a9       	ldd	r25, Y+52	; 0x34
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	3f ef       	ldi	r19, 0xFF	; 255
    3326:	4f e7       	ldi	r20, 0x7F	; 127
    3328:	57 e4       	ldi	r21, 0x47	; 71
    332a:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    332e:	18 16       	cp	r1, r24
    3330:	4c f5       	brge	.+82     	; 0x3384 <decideWhatToDoOnVacantSpace+0x9a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3332:	6d a9       	ldd	r22, Y+53	; 0x35
    3334:	7e a9       	ldd	r23, Y+54	; 0x36
    3336:	8f a9       	ldd	r24, Y+55	; 0x37
    3338:	98 ad       	ldd	r25, Y+56	; 0x38
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	98 ab       	std	Y+48, r25	; 0x30
    3358:	8f a7       	std	Y+47, r24	; 0x2f
    335a:	0f c0       	rjmp	.+30     	; 0x337a <decideWhatToDoOnVacantSpace+0x996>
    335c:	80 e7       	ldi	r24, 0x70	; 112
    335e:	91 e0       	ldi	r25, 0x01	; 1
    3360:	9e a7       	std	Y+46, r25	; 0x2e
    3362:	8d a7       	std	Y+45, r24	; 0x2d
    3364:	8d a5       	ldd	r24, Y+45	; 0x2d
    3366:	9e a5       	ldd	r25, Y+46	; 0x2e
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <decideWhatToDoOnVacantSpace+0x984>
    336c:	9e a7       	std	Y+46, r25	; 0x2e
    336e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3370:	8f a5       	ldd	r24, Y+47	; 0x2f
    3372:	98 a9       	ldd	r25, Y+48	; 0x30
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	98 ab       	std	Y+48, r25	; 0x30
    3378:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337a:	8f a5       	ldd	r24, Y+47	; 0x2f
    337c:	98 a9       	ldd	r25, Y+48	; 0x30
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	69 f7       	brne	.-38     	; 0x335c <decideWhatToDoOnVacantSpace+0x978>
    3382:	14 c0       	rjmp	.+40     	; 0x33ac <decideWhatToDoOnVacantSpace+0x9c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3384:	69 a9       	ldd	r22, Y+49	; 0x31
    3386:	7a a9       	ldd	r23, Y+50	; 0x32
    3388:	8b a9       	ldd	r24, Y+51	; 0x33
    338a:	9c a9       	ldd	r25, Y+52	; 0x34
    338c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	98 ab       	std	Y+48, r25	; 0x30
    3396:	8f a7       	std	Y+47, r24	; 0x2f
    3398:	8f a5       	ldd	r24, Y+47	; 0x2f
    339a:	98 a9       	ldd	r25, Y+48	; 0x30
    339c:	9c a7       	std	Y+44, r25	; 0x2c
    339e:	8b a7       	std	Y+43, r24	; 0x2b
    33a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <decideWhatToDoOnVacantSpace+0x9c0>
    33a8:	9c a7       	std	Y+44, r25	; 0x2c
    33aa:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(DELAY);

		retVal = 0;
    33ac:	fe 01       	movw	r30, r28
    33ae:	ed 57       	subi	r30, 0x7D	; 125
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	11 82       	std	Z+1, r1	; 0x01
    33b4:	10 82       	st	Z, r1
		forward = 1;
    33b6:	fe 01       	movw	r30, r28
    33b8:	ef 57       	subi	r30, 0x7F	; 127
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	80 83       	st	Z, r24
		came = 1;
    33c4:	fe 01       	movw	r30, r28
    33c6:	e1 58       	subi	r30, 0x81	; 129
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
	}

	if (1 == forward)
    33d2:	fe 01       	movw	r30, r28
    33d4:	ef 57       	subi	r30, 0x7F	; 127
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	81 30       	cpi	r24, 0x01	; 1
    33de:	91 05       	cpc	r25, r1
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <decideWhatToDoOnVacantSpace+0xa00>
    33e2:	7c c0       	rjmp	.+248    	; 0x34dc <decideWhatToDoOnVacantSpace+0xaf8>
	{
		clear_lcd();
    33e4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
		my_lcd_string("CAME FORWARD");
    33e8:	89 e9       	ldi	r24, 0x99	; 153
    33ea:	92 e0       	ldi	r25, 0x02	; 2
    33ec:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	aa ef       	ldi	r26, 0xFA	; 250
    33f6:	b3 e4       	ldi	r27, 0x43	; 67
    33f8:	8f a3       	std	Y+39, r24	; 0x27
    33fa:	98 a7       	std	Y+40, r25	; 0x28
    33fc:	a9 a7       	std	Y+41, r26	; 0x29
    33fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3400:	6f a1       	ldd	r22, Y+39	; 0x27
    3402:	78 a5       	ldd	r23, Y+40	; 0x28
    3404:	89 a5       	ldd	r24, Y+41	; 0x29
    3406:	9a a5       	ldd	r25, Y+42	; 0x2a
    3408:	26 e6       	ldi	r18, 0x66	; 102
    340a:	36 e6       	ldi	r19, 0x66	; 102
    340c:	46 e6       	ldi	r20, 0x66	; 102
    340e:	55 e4       	ldi	r21, 0x45	; 69
    3410:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8b a3       	std	Y+35, r24	; 0x23
    341a:	9c a3       	std	Y+36, r25	; 0x24
    341c:	ad a3       	std	Y+37, r26	; 0x25
    341e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3420:	6b a1       	ldd	r22, Y+35	; 0x23
    3422:	7c a1       	ldd	r23, Y+36	; 0x24
    3424:	8d a1       	ldd	r24, Y+37	; 0x25
    3426:	9e a1       	ldd	r25, Y+38	; 0x26
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e8       	ldi	r20, 0x80	; 128
    342e:	5f e3       	ldi	r21, 0x3F	; 63
    3430:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3434:	88 23       	and	r24, r24
    3436:	2c f4       	brge	.+10     	; 0x3442 <decideWhatToDoOnVacantSpace+0xa5e>
		__ticks = 1;
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9a a3       	std	Y+34, r25	; 0x22
    343e:	89 a3       	std	Y+33, r24	; 0x21
    3440:	3f c0       	rjmp	.+126    	; 0x34c0 <decideWhatToDoOnVacantSpace+0xadc>
	else if (__tmp > 65535)
    3442:	6b a1       	ldd	r22, Y+35	; 0x23
    3444:	7c a1       	ldd	r23, Y+36	; 0x24
    3446:	8d a1       	ldd	r24, Y+37	; 0x25
    3448:	9e a1       	ldd	r25, Y+38	; 0x26
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3456:	18 16       	cp	r1, r24
    3458:	4c f5       	brge	.+82     	; 0x34ac <decideWhatToDoOnVacantSpace+0xac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345a:	6f a1       	ldd	r22, Y+39	; 0x27
    345c:	78 a5       	ldd	r23, Y+40	; 0x28
    345e:	89 a5       	ldd	r24, Y+41	; 0x29
    3460:	9a a5       	ldd	r25, Y+42	; 0x2a
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e2       	ldi	r20, 0x20	; 32
    3468:	51 e4       	ldi	r21, 0x41	; 65
    346a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	9a a3       	std	Y+34, r25	; 0x22
    3480:	89 a3       	std	Y+33, r24	; 0x21
    3482:	0f c0       	rjmp	.+30     	; 0x34a2 <decideWhatToDoOnVacantSpace+0xabe>
    3484:	80 e7       	ldi	r24, 0x70	; 112
    3486:	91 e0       	ldi	r25, 0x01	; 1
    3488:	98 a3       	std	Y+32, r25	; 0x20
    348a:	8f 8f       	std	Y+31, r24	; 0x1f
    348c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    348e:	98 a1       	ldd	r25, Y+32	; 0x20
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <decideWhatToDoOnVacantSpace+0xaac>
    3494:	98 a3       	std	Y+32, r25	; 0x20
    3496:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3498:	89 a1       	ldd	r24, Y+33	; 0x21
    349a:	9a a1       	ldd	r25, Y+34	; 0x22
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	9a a3       	std	Y+34, r25	; 0x22
    34a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a2:	89 a1       	ldd	r24, Y+33	; 0x21
    34a4:	9a a1       	ldd	r25, Y+34	; 0x22
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	69 f7       	brne	.-38     	; 0x3484 <decideWhatToDoOnVacantSpace+0xaa0>
    34aa:	14 c0       	rjmp	.+40     	; 0x34d4 <decideWhatToDoOnVacantSpace+0xaf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ac:	6b a1       	ldd	r22, Y+35	; 0x23
    34ae:	7c a1       	ldd	r23, Y+36	; 0x24
    34b0:	8d a1       	ldd	r24, Y+37	; 0x25
    34b2:	9e a1       	ldd	r25, Y+38	; 0x26
    34b4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9a a3       	std	Y+34, r25	; 0x22
    34be:	89 a3       	std	Y+33, r24	; 0x21
    34c0:	89 a1       	ldd	r24, Y+33	; 0x21
    34c2:	9a a1       	ldd	r25, Y+34	; 0x22
    34c4:	9e 8f       	std	Y+30, r25	; 0x1e
    34c6:	8d 8f       	std	Y+29, r24	; 0x1d
    34c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <decideWhatToDoOnVacantSpace+0xae8>
    34d0:	9e 8f       	std	Y+30, r25	; 0x1e
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(DELAY);
		forward_mm(60);
    34d4:	8c e3       	ldi	r24, 0x3C	; 60
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <forward_mm>
	}

	if (came == 0)
    34dc:	fe 01       	movw	r30, r28
    34de:	e1 58       	subi	r30, 0x81	; 129
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	09 f0       	breq	.+2      	; 0x34ec <decideWhatToDoOnVacantSpace+0xb08>
    34ea:	76 c0       	rjmp	.+236    	; 0x35d8 <decideWhatToDoOnVacantSpace+0xbf4>
	{
		my_lcd_string("ERROR");
    34ec:	86 ea       	ldi	r24, 0xA6	; 166
    34ee:	92 e0       	ldi	r25, 0x02	; 2
    34f0:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	aa ef       	ldi	r26, 0xFA	; 250
    34fa:	b3 e4       	ldi	r27, 0x43	; 67
    34fc:	89 8f       	std	Y+25, r24	; 0x19
    34fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3500:	ab 8f       	std	Y+27, r26	; 0x1b
    3502:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	69 8d       	ldd	r22, Y+25	; 0x19
    3506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350c:	26 e6       	ldi	r18, 0x66	; 102
    350e:	36 e6       	ldi	r19, 0x66	; 102
    3510:	46 e6       	ldi	r20, 0x66	; 102
    3512:	55 e4       	ldi	r21, 0x45	; 69
    3514:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8d 8b       	std	Y+21, r24	; 0x15
    351e:	9e 8b       	std	Y+22, r25	; 0x16
    3520:	af 8b       	std	Y+23, r26	; 0x17
    3522:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <decideWhatToDoOnVacantSpace+0xb62>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9c 8b       	std	Y+20, r25	; 0x14
    3542:	8b 8b       	std	Y+19, r24	; 0x13
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <decideWhatToDoOnVacantSpace+0xbe0>
	else if (__tmp > 65535)
    3546:	6d 89       	ldd	r22, Y+21	; 0x15
    3548:	7e 89       	ldd	r23, Y+22	; 0x16
    354a:	8f 89       	ldd	r24, Y+23	; 0x17
    354c:	98 8d       	ldd	r25, Y+24	; 0x18
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <decideWhatToDoOnVacantSpace+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	69 8d       	ldd	r22, Y+25	; 0x19
    3560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9c 8b       	std	Y+20, r25	; 0x14
    3584:	8b 8b       	std	Y+19, r24	; 0x13
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <decideWhatToDoOnVacantSpace+0xbc2>
    3588:	80 e7       	ldi	r24, 0x70	; 112
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	9a 8b       	std	Y+18, r25	; 0x12
    358e:	89 8b       	std	Y+17, r24	; 0x11
    3590:	89 89       	ldd	r24, Y+17	; 0x11
    3592:	9a 89       	ldd	r25, Y+18	; 0x12
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <decideWhatToDoOnVacantSpace+0xbb0>
    3598:	9a 8b       	std	Y+18, r25	; 0x12
    359a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8b 89       	ldd	r24, Y+19	; 0x13
    359e:	9c 89       	ldd	r25, Y+20	; 0x14
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9c 8b       	std	Y+20, r25	; 0x14
    35a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8b 89       	ldd	r24, Y+19	; 0x13
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <decideWhatToDoOnVacantSpace+0xba4>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <decideWhatToDoOnVacantSpace+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6d 89       	ldd	r22, Y+21	; 0x15
    35b2:	7e 89       	ldd	r23, Y+22	; 0x16
    35b4:	8f 89       	ldd	r24, Y+23	; 0x17
    35b6:	98 8d       	ldd	r25, Y+24	; 0x18
    35b8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9c 8b       	std	Y+20, r25	; 0x14
    35c2:	8b 8b       	std	Y+19, r24	; 0x13
    35c4:	8b 89       	ldd	r24, Y+19	; 0x13
    35c6:	9c 89       	ldd	r25, Y+20	; 0x14
    35c8:	98 8b       	std	Y+16, r25	; 0x10
    35ca:	8f 87       	std	Y+15, r24	; 0x0f
    35cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ce:	98 89       	ldd	r25, Y+16	; 0x10
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <decideWhatToDoOnVacantSpace+0xbec>
    35d4:	98 8b       	std	Y+16, r25	; 0x10
    35d6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(DELAY);
	}


	clear_lcd();
    35d8:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
	my_lcd_string("retVal");
    35dc:	8c ea       	ldi	r24, 0xAC	; 172
    35de:	92 e0       	ldi	r25, 0x02	; 2
    35e0:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1,retVal, 2);
    35e4:	fe 01       	movw	r30, r28
    35e6:	ed 57       	subi	r30, 0x7D	; 125
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	20 81       	ld	r18, Z
    35ec:	31 81       	ldd	r19, Z+1	; 0x01
    35ee:	82 e0       	ldi	r24, 0x02	; 2
    35f0:	61 e0       	ldi	r22, 0x01	; 1
    35f2:	a9 01       	movw	r20, r18
    35f4:	22 e0       	ldi	r18, 0x02	; 2
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	aa ef       	ldi	r26, 0xFA	; 250
    3602:	b3 e4       	ldi	r27, 0x43	; 67
    3604:	8b 87       	std	Y+11, r24	; 0x0b
    3606:	9c 87       	std	Y+12, r25	; 0x0c
    3608:	ad 87       	std	Y+13, r26	; 0x0d
    360a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360c:	6b 85       	ldd	r22, Y+11	; 0x0b
    360e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3610:	8d 85       	ldd	r24, Y+13	; 0x0d
    3612:	9e 85       	ldd	r25, Y+14	; 0x0e
    3614:	26 e6       	ldi	r18, 0x66	; 102
    3616:	36 e6       	ldi	r19, 0x66	; 102
    3618:	46 e6       	ldi	r20, 0x66	; 102
    361a:	55 e4       	ldi	r21, 0x45	; 69
    361c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	8f 83       	std	Y+7, r24	; 0x07
    3626:	98 87       	std	Y+8, r25	; 0x08
    3628:	a9 87       	std	Y+9, r26	; 0x09
    362a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    362c:	6f 81       	ldd	r22, Y+7	; 0x07
    362e:	78 85       	ldd	r23, Y+8	; 0x08
    3630:	89 85       	ldd	r24, Y+9	; 0x09
    3632:	9a 85       	ldd	r25, Y+10	; 0x0a
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e8       	ldi	r20, 0x80	; 128
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3640:	88 23       	and	r24, r24
    3642:	2c f4       	brge	.+10     	; 0x364e <decideWhatToDoOnVacantSpace+0xc6a>
		__ticks = 1;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
    364c:	3f c0       	rjmp	.+126    	; 0x36cc <decideWhatToDoOnVacantSpace+0xce8>
	else if (__tmp > 65535)
    364e:	6f 81       	ldd	r22, Y+7	; 0x07
    3650:	78 85       	ldd	r23, Y+8	; 0x08
    3652:	89 85       	ldd	r24, Y+9	; 0x09
    3654:	9a 85       	ldd	r25, Y+10	; 0x0a
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	3f ef       	ldi	r19, 0xFF	; 255
    365a:	4f e7       	ldi	r20, 0x7F	; 127
    365c:	57 e4       	ldi	r21, 0x47	; 71
    365e:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3662:	18 16       	cp	r1, r24
    3664:	4c f5       	brge	.+82     	; 0x36b8 <decideWhatToDoOnVacantSpace+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3666:	6b 85       	ldd	r22, Y+11	; 0x0b
    3668:	7c 85       	ldd	r23, Y+12	; 0x0c
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e2       	ldi	r20, 0x20	; 32
    3674:	51 e4       	ldi	r21, 0x41	; 65
    3676:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
    368e:	0f c0       	rjmp	.+30     	; 0x36ae <decideWhatToDoOnVacantSpace+0xcca>
    3690:	80 e7       	ldi	r24, 0x70	; 112
    3692:	91 e0       	ldi	r25, 0x01	; 1
    3694:	9c 83       	std	Y+4, r25	; 0x04
    3696:	8b 83       	std	Y+3, r24	; 0x03
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	9c 81       	ldd	r25, Y+4	; 0x04
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	f1 f7       	brne	.-4      	; 0x369c <decideWhatToDoOnVacantSpace+0xcb8>
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	69 f7       	brne	.-38     	; 0x3690 <decideWhatToDoOnVacantSpace+0xcac>
    36b6:	14 c0       	rjmp	.+40     	; 0x36e0 <decideWhatToDoOnVacantSpace+0xcfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ba:	78 85       	ldd	r23, Y+8	; 0x08
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	9e 83       	std	Y+6, r25	; 0x06
    36ca:	8d 83       	std	Y+5, r24	; 0x05
    36cc:	8d 81       	ldd	r24, Y+5	; 0x05
    36ce:	9e 81       	ldd	r25, Y+6	; 0x06
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	9a 81       	ldd	r25, Y+2	; 0x02
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <decideWhatToDoOnVacantSpace+0xcf4>
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY);

	return retVal;
    36e0:	fe 01       	movw	r30, r28
    36e2:	ed 57       	subi	r30, 0x7D	; 125
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
}
    36ea:	c8 57       	subi	r28, 0x78	; 120
    36ec:	df 4f       	sbci	r29, 0xFF	; 255
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	08 95       	ret

00003702 <automaticSeedSowing>:




int automaticSeedSowing(unsigned int trough_ID)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	c6 54       	subi	r28, 0x46	; 70
    370c:	d0 40       	sbci	r29, 0x00	; 0
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	fe 01       	movw	r30, r28
    371a:	eb 5b       	subi	r30, 0xBB	; 187
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
	vacantSpace   strVacantSpace = {0, };
    3722:	8c e0       	ldi	r24, 0x0C	; 12
    3724:	fe 01       	movw	r30, r28
    3726:	f9 96       	adiw	r30, 0x39	; 57
    3728:	df 01       	movw	r26, r30
    372a:	98 2f       	mov	r25, r24
    372c:	1d 92       	st	X+, r1
    372e:	9a 95       	dec	r25
    3730:	e9 f7       	brne	.-6      	; 0x372c <automaticSeedSowing+0x2a>

    init_devices();
    3732:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <init_devices>
    servo_1(1.86 * 4);
    3736:	6b e7       	ldi	r22, 0x7B	; 123
    3738:	74 e1       	ldi	r23, 0x14	; 20
    373a:	8e ee       	ldi	r24, 0xEE	; 238
    373c:	90 e4       	ldi	r25, 0x40	; 64
    373e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e7       	ldi	r26, 0x70	; 112
    3748:	b2 e4       	ldi	r27, 0x42	; 66
    374a:	8d ab       	std	Y+53, r24	; 0x35
    374c:	9e ab       	std	Y+54, r25	; 0x36
    374e:	af ab       	std	Y+55, r26	; 0x37
    3750:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6d a9       	ldd	r22, Y+53	; 0x35
    3754:	7e a9       	ldd	r23, Y+54	; 0x36
    3756:	8f a9       	ldd	r24, Y+55	; 0x37
    3758:	98 ad       	ldd	r25, Y+56	; 0x38
    375a:	26 e6       	ldi	r18, 0x66	; 102
    375c:	36 e6       	ldi	r19, 0x66	; 102
    375e:	46 e6       	ldi	r20, 0x66	; 102
    3760:	55 e4       	ldi	r21, 0x45	; 69
    3762:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	89 ab       	std	Y+49, r24	; 0x31
    376c:	9a ab       	std	Y+50, r25	; 0x32
    376e:	ab ab       	std	Y+51, r26	; 0x33
    3770:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3772:	69 a9       	ldd	r22, Y+49	; 0x31
    3774:	7a a9       	ldd	r23, Y+50	; 0x32
    3776:	8b a9       	ldd	r24, Y+51	; 0x33
    3778:	9c a9       	ldd	r25, Y+52	; 0x34
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <automaticSeedSowing+0x92>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	98 ab       	std	Y+48, r25	; 0x30
    3790:	8f a7       	std	Y+47, r24	; 0x2f
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <automaticSeedSowing+0x110>
	else if (__tmp > 65535)
    3794:	69 a9       	ldd	r22, Y+49	; 0x31
    3796:	7a a9       	ldd	r23, Y+50	; 0x32
    3798:	8b a9       	ldd	r24, Y+51	; 0x33
    379a:	9c a9       	ldd	r25, Y+52	; 0x34
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <automaticSeedSowing+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6d a9       	ldd	r22, Y+53	; 0x35
    37ae:	7e a9       	ldd	r23, Y+54	; 0x36
    37b0:	8f a9       	ldd	r24, Y+55	; 0x37
    37b2:	98 ad       	ldd	r25, Y+56	; 0x38
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	98 ab       	std	Y+48, r25	; 0x30
    37d2:	8f a7       	std	Y+47, r24	; 0x2f
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <automaticSeedSowing+0xf2>
    37d6:	80 e7       	ldi	r24, 0x70	; 112
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	9e a7       	std	Y+46, r25	; 0x2e
    37dc:	8d a7       	std	Y+45, r24	; 0x2d
    37de:	8d a5       	ldd	r24, Y+45	; 0x2d
    37e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <automaticSeedSowing+0xe0>
    37e6:	9e a7       	std	Y+46, r25	; 0x2e
    37e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ec:	98 a9       	ldd	r25, Y+48	; 0x30
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	98 ab       	std	Y+48, r25	; 0x30
    37f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f6:	98 a9       	ldd	r25, Y+48	; 0x30
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <automaticSeedSowing+0xd4>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <automaticSeedSowing+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3800:	7a a9       	ldd	r23, Y+50	; 0x32
    3802:	8b a9       	ldd	r24, Y+51	; 0x33
    3804:	9c a9       	ldd	r25, Y+52	; 0x34
    3806:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	98 ab       	std	Y+48, r25	; 0x30
    3810:	8f a7       	std	Y+47, r24	; 0x2f
    3812:	8f a5       	ldd	r24, Y+47	; 0x2f
    3814:	98 a9       	ldd	r25, Y+48	; 0x30
    3816:	9c a7       	std	Y+44, r25	; 0x2c
    3818:	8b a7       	std	Y+43, r24	; 0x2b
    381a:	8b a5       	ldd	r24, Y+43	; 0x2b
    381c:	9c a5       	ldd	r25, Y+44	; 0x2c
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <automaticSeedSowing+0x11c>
    3822:	9c a7       	std	Y+44, r25	; 0x2c
    3824:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(60);
	servo_1(1.86 * 0);
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	a0 e7       	ldi	r26, 0x70	; 112
    3838:	b2 e4       	ldi	r27, 0x42	; 66
    383a:	8f a3       	std	Y+39, r24	; 0x27
    383c:	98 a7       	std	Y+40, r25	; 0x28
    383e:	a9 a7       	std	Y+41, r26	; 0x29
    3840:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	6f a1       	ldd	r22, Y+39	; 0x27
    3844:	78 a5       	ldd	r23, Y+40	; 0x28
    3846:	89 a5       	ldd	r24, Y+41	; 0x29
    3848:	9a a5       	ldd	r25, Y+42	; 0x2a
    384a:	26 e6       	ldi	r18, 0x66	; 102
    384c:	36 e6       	ldi	r19, 0x66	; 102
    384e:	46 e6       	ldi	r20, 0x66	; 102
    3850:	55 e4       	ldi	r21, 0x45	; 69
    3852:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	8b a3       	std	Y+35, r24	; 0x23
    385c:	9c a3       	std	Y+36, r25	; 0x24
    385e:	ad a3       	std	Y+37, r26	; 0x25
    3860:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3862:	6b a1       	ldd	r22, Y+35	; 0x23
    3864:	7c a1       	ldd	r23, Y+36	; 0x24
    3866:	8d a1       	ldd	r24, Y+37	; 0x25
    3868:	9e a1       	ldd	r25, Y+38	; 0x26
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e8       	ldi	r20, 0x80	; 128
    3870:	5f e3       	ldi	r21, 0x3F	; 63
    3872:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3876:	88 23       	and	r24, r24
    3878:	2c f4       	brge	.+10     	; 0x3884 <automaticSeedSowing+0x182>
		__ticks = 1;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9a a3       	std	Y+34, r25	; 0x22
    3880:	89 a3       	std	Y+33, r24	; 0x21
    3882:	3f c0       	rjmp	.+126    	; 0x3902 <automaticSeedSowing+0x200>
	else if (__tmp > 65535)
    3884:	6b a1       	ldd	r22, Y+35	; 0x23
    3886:	7c a1       	ldd	r23, Y+36	; 0x24
    3888:	8d a1       	ldd	r24, Y+37	; 0x25
    388a:	9e a1       	ldd	r25, Y+38	; 0x26
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	3f ef       	ldi	r19, 0xFF	; 255
    3890:	4f e7       	ldi	r20, 0x7F	; 127
    3892:	57 e4       	ldi	r21, 0x47	; 71
    3894:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3898:	18 16       	cp	r1, r24
    389a:	4c f5       	brge	.+82     	; 0x38ee <automaticSeedSowing+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389c:	6f a1       	ldd	r22, Y+39	; 0x27
    389e:	78 a5       	ldd	r23, Y+40	; 0x28
    38a0:	89 a5       	ldd	r24, Y+41	; 0x29
    38a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 e2       	ldi	r20, 0x20	; 32
    38aa:	51 e4       	ldi	r21, 0x41	; 65
    38ac:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	9a a3       	std	Y+34, r25	; 0x22
    38c2:	89 a3       	std	Y+33, r24	; 0x21
    38c4:	0f c0       	rjmp	.+30     	; 0x38e4 <automaticSeedSowing+0x1e2>
    38c6:	80 e7       	ldi	r24, 0x70	; 112
    38c8:	91 e0       	ldi	r25, 0x01	; 1
    38ca:	98 a3       	std	Y+32, r25	; 0x20
    38cc:	8f 8f       	std	Y+31, r24	; 0x1f
    38ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38d0:	98 a1       	ldd	r25, Y+32	; 0x20
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <automaticSeedSowing+0x1d0>
    38d6:	98 a3       	std	Y+32, r25	; 0x20
    38d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38da:	89 a1       	ldd	r24, Y+33	; 0x21
    38dc:	9a a1       	ldd	r25, Y+34	; 0x22
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	9a a3       	std	Y+34, r25	; 0x22
    38e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e4:	89 a1       	ldd	r24, Y+33	; 0x21
    38e6:	9a a1       	ldd	r25, Y+34	; 0x22
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	69 f7       	brne	.-38     	; 0x38c6 <automaticSeedSowing+0x1c4>
    38ec:	14 c0       	rjmp	.+40     	; 0x3916 <automaticSeedSowing+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ee:	6b a1       	ldd	r22, Y+35	; 0x23
    38f0:	7c a1       	ldd	r23, Y+36	; 0x24
    38f2:	8d a1       	ldd	r24, Y+37	; 0x25
    38f4:	9e a1       	ldd	r25, Y+38	; 0x26
    38f6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9a a3       	std	Y+34, r25	; 0x22
    3900:	89 a3       	std	Y+33, r24	; 0x21
    3902:	89 a1       	ldd	r24, Y+33	; 0x21
    3904:	9a a1       	ldd	r25, Y+34	; 0x22
    3906:	9e 8f       	std	Y+30, r25	; 0x1e
    3908:	8d 8f       	std	Y+29, r24	; 0x1d
    390a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    390c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <automaticSeedSowing+0x20c>
    3912:	9e 8f       	std	Y+30, r25	; 0x1e
    3914:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(60);
	servo_1(1.86 * 4);
    3916:	6b e7       	ldi	r22, 0x7B	; 123
    3918:	74 e1       	ldi	r23, 0x14	; 20
    391a:	8e ee       	ldi	r24, 0xEE	; 238
    391c:	90 e4       	ldi	r25, 0x40	; 64
    391e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a0 e7       	ldi	r26, 0x70	; 112
    3928:	b2 e4       	ldi	r27, 0x42	; 66
    392a:	89 8f       	std	Y+25, r24	; 0x19
    392c:	9a 8f       	std	Y+26, r25	; 0x1a
    392e:	ab 8f       	std	Y+27, r26	; 0x1b
    3930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	69 8d       	ldd	r22, Y+25	; 0x19
    3934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393a:	26 e6       	ldi	r18, 0x66	; 102
    393c:	36 e6       	ldi	r19, 0x66	; 102
    393e:	46 e6       	ldi	r20, 0x66	; 102
    3940:	55 e4       	ldi	r21, 0x45	; 69
    3942:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	8d 8b       	std	Y+21, r24	; 0x15
    394c:	9e 8b       	std	Y+22, r25	; 0x16
    394e:	af 8b       	std	Y+23, r26	; 0x17
    3950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3952:	6d 89       	ldd	r22, Y+21	; 0x15
    3954:	7e 89       	ldd	r23, Y+22	; 0x16
    3956:	8f 89       	ldd	r24, Y+23	; 0x17
    3958:	98 8d       	ldd	r25, Y+24	; 0x18
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	2c f4       	brge	.+10     	; 0x3974 <automaticSeedSowing+0x272>
		__ticks = 1;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9c 8b       	std	Y+20, r25	; 0x14
    3970:	8b 8b       	std	Y+19, r24	; 0x13
    3972:	3f c0       	rjmp	.+126    	; 0x39f2 <automaticSeedSowing+0x2f0>
	else if (__tmp > 65535)
    3974:	6d 89       	ldd	r22, Y+21	; 0x15
    3976:	7e 89       	ldd	r23, Y+22	; 0x16
    3978:	8f 89       	ldd	r24, Y+23	; 0x17
    397a:	98 8d       	ldd	r25, Y+24	; 0x18
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	3f ef       	ldi	r19, 0xFF	; 255
    3980:	4f e7       	ldi	r20, 0x7F	; 127
    3982:	57 e4       	ldi	r21, 0x47	; 71
    3984:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3988:	18 16       	cp	r1, r24
    398a:	4c f5       	brge	.+82     	; 0x39de <automaticSeedSowing+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398c:	69 8d       	ldd	r22, Y+25	; 0x19
    398e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	40 e2       	ldi	r20, 0x20	; 32
    399a:	51 e4       	ldi	r21, 0x41	; 65
    399c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	9c 8b       	std	Y+20, r25	; 0x14
    39b2:	8b 8b       	std	Y+19, r24	; 0x13
    39b4:	0f c0       	rjmp	.+30     	; 0x39d4 <automaticSeedSowing+0x2d2>
    39b6:	80 e7       	ldi	r24, 0x70	; 112
    39b8:	91 e0       	ldi	r25, 0x01	; 1
    39ba:	9a 8b       	std	Y+18, r25	; 0x12
    39bc:	89 8b       	std	Y+17, r24	; 0x11
    39be:	89 89       	ldd	r24, Y+17	; 0x11
    39c0:	9a 89       	ldd	r25, Y+18	; 0x12
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <automaticSeedSowing+0x2c0>
    39c6:	9a 8b       	std	Y+18, r25	; 0x12
    39c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ca:	8b 89       	ldd	r24, Y+19	; 0x13
    39cc:	9c 89       	ldd	r25, Y+20	; 0x14
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	9c 8b       	std	Y+20, r25	; 0x14
    39d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	69 f7       	brne	.-38     	; 0x39b6 <automaticSeedSowing+0x2b4>
    39dc:	14 c0       	rjmp	.+40     	; 0x3a06 <automaticSeedSowing+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39de:	6d 89       	ldd	r22, Y+21	; 0x15
    39e0:	7e 89       	ldd	r23, Y+22	; 0x16
    39e2:	8f 89       	ldd	r24, Y+23	; 0x17
    39e4:	98 8d       	ldd	r25, Y+24	; 0x18
    39e6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
    39f2:	8b 89       	ldd	r24, Y+19	; 0x13
    39f4:	9c 89       	ldd	r25, Y+20	; 0x14
    39f6:	98 8b       	std	Y+16, r25	; 0x10
    39f8:	8f 87       	std	Y+15, r24	; 0x0f
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	98 89       	ldd	r25, Y+16	; 0x10
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <automaticSeedSowing+0x2fc>
    3a02:	98 8b       	std	Y+16, r25	; 0x10
    3a04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(60);

    /* Init LCD */
	lcd_set_4bit();
    3a06:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    3a0a:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>

    /* Display the trough ID received on LCD */
	lcd_cursor(1, 1);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	61 e0       	ldi	r22, 0x01	; 1
    3a12:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	my_lcd_string("Trough ID");
    3a16:	83 eb       	ldi	r24, 0xB3	; 179
    3a18:	92 e0       	ldi	r25, 0x02	; 2
    3a1a:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
	my_lcd_print(2,1, trough_ID, 2);
    3a1e:	fe 01       	movw	r30, r28
    3a20:	eb 5b       	subi	r30, 0xBB	; 187
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	20 81       	ld	r18, Z
    3a26:	31 81       	ldd	r19, Z+1	; 0x01
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	a9 01       	movw	r20, r18
    3a2e:	22 e0       	ldi	r18, 0x02	; 2
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	aa ef       	ldi	r26, 0xFA	; 250
    3a3c:	b3 e4       	ldi	r27, 0x43	; 67
    3a3e:	8b 87       	std	Y+11, r24	; 0x0b
    3a40:	9c 87       	std	Y+12, r25	; 0x0c
    3a42:	ad 87       	std	Y+13, r26	; 0x0d
    3a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4e:	26 e6       	ldi	r18, 0x66	; 102
    3a50:	36 e6       	ldi	r19, 0x66	; 102
    3a52:	46 e6       	ldi	r20, 0x66	; 102
    3a54:	55 e4       	ldi	r21, 0x45	; 69
    3a56:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8f 83       	std	Y+7, r24	; 0x07
    3a60:	98 87       	std	Y+8, r25	; 0x08
    3a62:	a9 87       	std	Y+9, r26	; 0x09
    3a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a66:	6f 81       	ldd	r22, Y+7	; 0x07
    3a68:	78 85       	ldd	r23, Y+8	; 0x08
    3a6a:	89 85       	ldd	r24, Y+9	; 0x09
    3a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e8       	ldi	r20, 0x80	; 128
    3a74:	5f e3       	ldi	r21, 0x3F	; 63
    3a76:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3a7a:	88 23       	and	r24, r24
    3a7c:	2c f4       	brge	.+10     	; 0x3a88 <automaticSeedSowing+0x386>
		__ticks = 1;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	3f c0       	rjmp	.+126    	; 0x3b06 <automaticSeedSowing+0x404>
	else if (__tmp > 65535)
    3a88:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8a:	78 85       	ldd	r23, Y+8	; 0x08
    3a8c:	89 85       	ldd	r24, Y+9	; 0x09
    3a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	3f ef       	ldi	r19, 0xFF	; 255
    3a94:	4f e7       	ldi	r20, 0x7F	; 127
    3a96:	57 e4       	ldi	r21, 0x47	; 71
    3a98:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3a9c:	18 16       	cp	r1, r24
    3a9e:	4c f5       	brge	.+82     	; 0x3af2 <automaticSeedSowing+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	51 e4       	ldi	r21, 0x41	; 65
    3ab0:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	bc 01       	movw	r22, r24
    3aba:	cd 01       	movw	r24, r26
    3abc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	0f c0       	rjmp	.+30     	; 0x3ae8 <automaticSeedSowing+0x3e6>
    3aca:	80 e7       	ldi	r24, 0x70	; 112
    3acc:	91 e0       	ldi	r25, 0x01	; 1
    3ace:	9c 83       	std	Y+4, r25	; 0x04
    3ad0:	8b 83       	std	Y+3, r24	; 0x03
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <automaticSeedSowing+0x3d4>
    3ada:	9c 83       	std	Y+4, r25	; 0x04
    3adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	9e 83       	std	Y+6, r25	; 0x06
    3ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aea:	9e 81       	ldd	r25, Y+6	; 0x06
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	69 f7       	brne	.-38     	; 0x3aca <automaticSeedSowing+0x3c8>
    3af0:	14 c0       	rjmp	.+40     	; 0x3b1a <automaticSeedSowing+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	8d 81       	ldd	r24, Y+5	; 0x05
    3b08:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	9a 81       	ldd	r25, Y+2	; 0x02
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <automaticSeedSowing+0x410>
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY);

    /* Init the structure strVacantSpace for given trough ID */
	initVacantSpaceStruct(&strVacantSpace, trough_ID);
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	c9 96       	adiw	r24, 0x39	; 57
    3b1e:	fe 01       	movw	r30, r28
    3b20:	eb 5b       	subi	r30, 0xBB	; 187
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	20 81       	ld	r18, Z
    3b26:	31 81       	ldd	r19, Z+1	; 0x01
    3b28:	b9 01       	movw	r22, r18
    3b2a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <initVacantSpaceStruct>

	clear_lcd();
    3b2e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
    /* The alignement function takes care of the navigation of the bot in the aisle.
     * Bot uses the values of both sharp sensors to align itself so as to move straight
     * in the aisle. Moving straight is important so as to keep track of how much distance
     * the bot has moved as the bot has plant seeds at definite inter-seeding distance.
     */
	alignment(trough_ID, &strVacantSpace);
    3b32:	fe 01       	movw	r30, r28
    3b34:	eb 5b       	subi	r30, 0xBB	; 187
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	80 81       	ld	r24, Z
    3b3a:	91 81       	ldd	r25, Z+1	; 0x01
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	27 5c       	subi	r18, 0xC7	; 199
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	b9 01       	movw	r22, r18
    3b44:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <alignment>

    return 0;
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
}
    3b4c:	ca 5b       	subi	r28, 0xBA	; 186
    3b4e:	df 4f       	sbci	r29, 0xFF	; 255
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <alignment>:

int alignment(unsigned int trough_ID, vacantSpace *pstrVacantSpace)
{
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	cb 5f       	subi	r28, 0xFB	; 251
    3b6e:	d0 40       	sbci	r29, 0x00	; 0
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e8 50       	subi	r30, 0x08	; 8
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	91 83       	std	Z+1, r25	; 0x01
    3b82:	80 83       	st	Z, r24
    3b84:	fe 01       	movw	r30, r28
    3b86:	e6 50       	subi	r30, 0x06	; 6
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	71 83       	std	Z+1, r23	; 0x01
    3b8c:	60 83       	st	Z, r22
	unsigned char buff, Left_Temp_Sharp_Sensor;
	unsigned int  count = 0;
    3b8e:	fe 01       	movw	r30, r28
    3b90:	ec 50       	subi	r30, 0x0C	; 12
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	11 82       	std	Z+1, r1	; 0x01
    3b96:	10 82       	st	Z, r1
    unsigned char bCanSowSeed = 0;  	/* Determines if the bot can sow seed or not.
    3b98:	fe 01       	movw	r30, r28
    3b9a:	ed 50       	subi	r30, 0x0D	; 13
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	10 82       	st	Z, r1
                                         * Is made 1 when bot reaches the trough where
                                         * it has to sow seeds.
                                         */

	unsigned int  move_flag = 0, retVal = 0;
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	ef 50       	subi	r30, 0x0F	; 15
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	11 82       	std	Z+1, r1	; 0x01
    3ba8:	10 82       	st	Z, r1
    3baa:	fe 01       	movw	r30, r28
    3bac:	e1 51       	subi	r30, 0x11	; 17
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	11 82       	std	Z+1, r1	; 0x01
    3bb2:	10 82       	st	Z, r1

	/* If the bot has to sow seed in the 0th trough in the aisle
     * Trough count starts with 0 and goes till 3 for each aisle
     * in clock-wise direction.
     */
	if (pstrVacantSpace->vacantSpace_SeedSow == 1)
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e6 50       	subi	r30, 0x06	; 6
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	01 90       	ld	r0, Z+
    3bbc:	f0 81       	ld	r31, Z
    3bbe:	e0 2d       	mov	r30, r0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	81 30       	cpi	r24, 0x01	; 1
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	29 f4       	brne	.+10     	; 0x3bd4 <alignment+0x74>
	{
		bCanSowSeed = 1;
    3bca:	fe 01       	movw	r30, r28
    3bcc:	ed 50       	subi	r30, 0x0D	; 13
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	80 83       	st	Z, r24
	}

    while(1)
	{
		/* choosing the velocity of movement of motors */
        velocity(250, 250);
    3bd4:	8a ef       	ldi	r24, 0xFA	; 250
    3bd6:	6a ef       	ldi	r22, 0xFA	; 250
    3bd8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <velocity>

    	/* Drop seed now */
        if ((count == 5) && (1 == bCanSowSeed))
    3bdc:	fe 01       	movw	r30, r28
    3bde:	ec 50       	subi	r30, 0x0C	; 12
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	85 30       	cpi	r24, 0x05	; 5
    3be8:	91 05       	cpc	r25, r1
    3bea:	09 f0       	breq	.+2      	; 0x3bee <alignment+0x8e>
    3bec:	f4 c2       	rjmp	.+1512   	; 0x41d6 <alignment+0x676>
    3bee:	fe 01       	movw	r30, r28
    3bf0:	ed 50       	subi	r30, 0x0D	; 13
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	81 30       	cpi	r24, 0x01	; 1
    3bf8:	09 f0       	breq	.+2      	; 0x3bfc <alignment+0x9c>
    3bfa:	ed c2       	rjmp	.+1498   	; 0x41d6 <alignment+0x676>
    	{
            lcd_cursor(1,1);
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
			my_lcd_string("SOWING!!!");
    3c04:	8d eb       	ldi	r24, 0xBD	; 189
    3c06:	92 e0       	ldi	r25, 0x02	; 2
    3c08:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
			count = 0;
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	ec 50       	subi	r30, 0x0C	; 12
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	11 82       	std	Z+1, r1	; 0x01
    3c14:	10 82       	st	Z, r1
            stop();
    3c16:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 51       	subi	r30, 0x15	; 21
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	aa ef       	ldi	r26, 0xFA	; 250
    3c26:	b4 e4       	ldi	r27, 0x44	; 68
    3c28:	80 83       	st	Z, r24
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	a2 83       	std	Z+2, r26	; 0x02
    3c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c30:	8e 01       	movw	r16, r28
    3c32:	09 51       	subi	r16, 0x19	; 25
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	e5 51       	subi	r30, 0x15	; 21
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	26 e6       	ldi	r18, 0x66	; 102
    3c46:	36 e6       	ldi	r19, 0x66	; 102
    3c48:	46 e6       	ldi	r20, 0x66	; 102
    3c4a:	55 e4       	ldi	r21, 0x45	; 69
    3c4c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	a2 83       	std	Z+2, r26	; 0x02
    3c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e9 51       	subi	r30, 0x19	; 25
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	44 f4       	brge	.+16     	; 0x3c8c <alignment+0x12c>
		__ticks = 1;
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	eb 51       	subi	r30, 0x1B	; 27
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
    3c8a:	64 c0       	rjmp	.+200    	; 0x3d54 <alignment+0x1f4>
	else if (__tmp > 65535)
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e9 51       	subi	r30, 0x19	; 25
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	3f ef       	ldi	r19, 0xFF	; 255
    3c9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ca0:	57 e4       	ldi	r21, 0x47	; 71
    3ca2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3ca6:	18 16       	cp	r1, r24
    3ca8:	0c f0       	brlt	.+2      	; 0x3cac <alignment+0x14c>
    3caa:	43 c0       	rjmp	.+134    	; 0x3d32 <alignment+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cac:	fe 01       	movw	r30, r28
    3cae:	e5 51       	subi	r30, 0x15	; 21
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e2       	ldi	r20, 0x20	; 32
    3cc0:	51 e4       	ldi	r21, 0x41	; 65
    3cc2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	8e 01       	movw	r16, r28
    3ccc:	0b 51       	subi	r16, 0x1B	; 27
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	f8 01       	movw	r30, r16
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	80 83       	st	Z, r24
    3ce2:	1f c0       	rjmp	.+62     	; 0x3d22 <alignment+0x1c2>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ed 51       	subi	r30, 0x1D	; 29
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	80 e7       	ldi	r24, 0x70	; 112
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ed 51       	subi	r30, 0x1D	; 29
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <alignment+0x19c>
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 51       	subi	r30, 0x1D	; 29
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	91 83       	std	Z+1, r25	; 0x01
    3d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0a:	de 01       	movw	r26, r28
    3d0c:	ab 51       	subi	r26, 0x1B	; 27
    3d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	eb 51       	subi	r30, 0x1B	; 27
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	9c 93       	st	X, r25
    3d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	fe 01       	movw	r30, r28
    3d24:	eb 51       	subi	r30, 0x1B	; 27
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	d1 f6       	brne	.-76     	; 0x3ce4 <alignment+0x184>
    3d30:	27 c0       	rjmp	.+78     	; 0x3d80 <alignment+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	8e 01       	movw	r16, r28
    3d34:	0b 51       	subi	r16, 0x1B	; 27
    3d36:	1f 4f       	sbci	r17, 0xFF	; 255
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e9 51       	subi	r30, 0x19	; 25
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	f8 01       	movw	r30, r16
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
    3d54:	de 01       	movw	r26, r28
    3d56:	af 51       	subi	r26, 0x1F	; 31
    3d58:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	eb 51       	subi	r30, 0x1B	; 27
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	8d 93       	st	X+, r24
    3d66:	9c 93       	st	X, r25
    3d68:	fe 01       	movw	r30, r28
    3d6a:	ef 51       	subi	r30, 0x1F	; 31
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <alignment+0x212>
    3d76:	fe 01       	movw	r30, r28
    3d78:	ef 51       	subi	r30, 0x1F	; 31
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
            _delay_ms(2000);
        	servo_1(1.86 * 4);
    3d80:	6b e7       	ldi	r22, 0x7B	; 123
    3d82:	74 e1       	ldi	r23, 0x14	; 20
    3d84:	8e ee       	ldi	r24, 0xEE	; 238
    3d86:	90 e4       	ldi	r25, 0x40	; 64
    3d88:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e3 52       	subi	r30, 0x23	; 35
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	a0 e7       	ldi	r26, 0x70	; 112
    3d98:	b2 e4       	ldi	r27, 0x42	; 66
    3d9a:	80 83       	st	Z, r24
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	a2 83       	std	Z+2, r26	; 0x02
    3da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da2:	8e 01       	movw	r16, r28
    3da4:	07 52       	subi	r16, 0x27	; 39
    3da6:	1f 4f       	sbci	r17, 0xFF	; 255
    3da8:	fe 01       	movw	r30, r28
    3daa:	e3 52       	subi	r30, 0x23	; 35
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	60 81       	ld	r22, Z
    3db0:	71 81       	ldd	r23, Z+1	; 0x01
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
    3db4:	93 81       	ldd	r25, Z+3	; 0x03
    3db6:	26 e6       	ldi	r18, 0x66	; 102
    3db8:	36 e6       	ldi	r19, 0x66	; 102
    3dba:	46 e6       	ldi	r20, 0x66	; 102
    3dbc:	55 e4       	ldi	r21, 0x45	; 69
    3dbe:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	80 83       	st	Z, r24
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	a2 83       	std	Z+2, r26	; 0x02
    3dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e7 52       	subi	r30, 0x27	; 39
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e8       	ldi	r20, 0x80	; 128
    3de4:	5f e3       	ldi	r21, 0x3F	; 63
    3de6:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3dea:	88 23       	and	r24, r24
    3dec:	44 f4       	brge	.+16     	; 0x3dfe <alignment+0x29e>
		__ticks = 1;
    3dee:	fe 01       	movw	r30, r28
    3df0:	e9 52       	subi	r30, 0x29	; 41
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
    3dfc:	64 c0       	rjmp	.+200    	; 0x3ec6 <alignment+0x366>
	else if (__tmp > 65535)
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e7 52       	subi	r30, 0x27	; 39
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	3f ef       	ldi	r19, 0xFF	; 255
    3e10:	4f e7       	ldi	r20, 0x7F	; 127
    3e12:	57 e4       	ldi	r21, 0x47	; 71
    3e14:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3e18:	18 16       	cp	r1, r24
    3e1a:	0c f0       	brlt	.+2      	; 0x3e1e <alignment+0x2be>
    3e1c:	43 c0       	rjmp	.+134    	; 0x3ea4 <alignment+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e3 52       	subi	r30, 0x23	; 35
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	93 81       	ldd	r25, Z+3	; 0x03
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e2       	ldi	r20, 0x20	; 32
    3e32:	51 e4       	ldi	r21, 0x41	; 65
    3e34:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	8e 01       	movw	r16, r28
    3e3e:	09 52       	subi	r16, 0x29	; 41
    3e40:	1f 4f       	sbci	r17, 0xFF	; 255
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	f8 01       	movw	r30, r16
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	1f c0       	rjmp	.+62     	; 0x3e94 <alignment+0x334>
    3e56:	fe 01       	movw	r30, r28
    3e58:	eb 52       	subi	r30, 0x2B	; 43
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	80 e7       	ldi	r24, 0x70	; 112
    3e5e:	91 e0       	ldi	r25, 0x01	; 1
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	80 83       	st	Z, r24
    3e64:	fe 01       	movw	r30, r28
    3e66:	eb 52       	subi	r30, 0x2B	; 43
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <alignment+0x30e>
    3e72:	fe 01       	movw	r30, r28
    3e74:	eb 52       	subi	r30, 0x2B	; 43
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e7c:	de 01       	movw	r26, r28
    3e7e:	a9 52       	subi	r26, 0x29	; 41
    3e80:	bf 4f       	sbci	r27, 0xFF	; 255
    3e82:	fe 01       	movw	r30, r28
    3e84:	e9 52       	subi	r30, 0x29	; 41
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 81       	ld	r24, Z
    3e8a:	91 81       	ldd	r25, Z+1	; 0x01
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	11 96       	adiw	r26, 0x01	; 1
    3e90:	9c 93       	st	X, r25
    3e92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e94:	fe 01       	movw	r30, r28
    3e96:	e9 52       	subi	r30, 0x29	; 41
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	80 81       	ld	r24, Z
    3e9c:	91 81       	ldd	r25, Z+1	; 0x01
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	d1 f6       	brne	.-76     	; 0x3e56 <alignment+0x2f6>
    3ea2:	27 c0       	rjmp	.+78     	; 0x3ef2 <alignment+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea4:	8e 01       	movw	r16, r28
    3ea6:	09 52       	subi	r16, 0x29	; 41
    3ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e7 52       	subi	r30, 0x27	; 39
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	f8 01       	movw	r30, r16
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	80 83       	st	Z, r24
    3ec6:	de 01       	movw	r26, r28
    3ec8:	ad 52       	subi	r26, 0x2D	; 45
    3eca:	bf 4f       	sbci	r27, 0xFF	; 255
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e9 52       	subi	r30, 0x29	; 41
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	80 81       	ld	r24, Z
    3ed4:	91 81       	ldd	r25, Z+1	; 0x01
    3ed6:	8d 93       	st	X+, r24
    3ed8:	9c 93       	st	X, r25
    3eda:	fe 01       	movw	r30, r28
    3edc:	ed 52       	subi	r30, 0x2D	; 45
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <alignment+0x384>
    3ee8:	fe 01       	movw	r30, r28
    3eea:	ed 52       	subi	r30, 0x2D	; 45
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	80 83       	st	Z, r24
        	_delay_ms(60);
        	servo_1(1.86 * 0);
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    3efe:	fe 01       	movw	r30, r28
    3f00:	e1 53       	subi	r30, 0x31	; 49
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	a0 e7       	ldi	r26, 0x70	; 112
    3f0a:	b2 e4       	ldi	r27, 0x42	; 66
    3f0c:	80 83       	st	Z, r24
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	a2 83       	std	Z+2, r26	; 0x02
    3f12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f14:	8e 01       	movw	r16, r28
    3f16:	05 53       	subi	r16, 0x35	; 53
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e1 53       	subi	r30, 0x31	; 49
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	26 e6       	ldi	r18, 0x66	; 102
    3f2a:	36 e6       	ldi	r19, 0x66	; 102
    3f2c:	46 e6       	ldi	r20, 0x66	; 102
    3f2e:	55 e4       	ldi	r21, 0x45	; 69
    3f30:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	f8 01       	movw	r30, r16
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f42:	fe 01       	movw	r30, r28
    3f44:	e5 53       	subi	r30, 0x35	; 53
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e8       	ldi	r20, 0x80	; 128
    3f56:	5f e3       	ldi	r21, 0x3F	; 63
    3f58:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    3f5c:	88 23       	and	r24, r24
    3f5e:	44 f4       	brge	.+16     	; 0x3f70 <alignment+0x410>
		__ticks = 1;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e7 53       	subi	r30, 0x37	; 55
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
    3f6e:	64 c0       	rjmp	.+200    	; 0x4038 <alignment+0x4d8>
	else if (__tmp > 65535)
    3f70:	fe 01       	movw	r30, r28
    3f72:	e5 53       	subi	r30, 0x35	; 53
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	3f ef       	ldi	r19, 0xFF	; 255
    3f82:	4f e7       	ldi	r20, 0x7F	; 127
    3f84:	57 e4       	ldi	r21, 0x47	; 71
    3f86:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    3f8a:	18 16       	cp	r1, r24
    3f8c:	0c f0       	brlt	.+2      	; 0x3f90 <alignment+0x430>
    3f8e:	43 c0       	rjmp	.+134    	; 0x4016 <alignment+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f90:	fe 01       	movw	r30, r28
    3f92:	e1 53       	subi	r30, 0x31	; 49
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	60 81       	ld	r22, Z
    3f98:	71 81       	ldd	r23, Z+1	; 0x01
    3f9a:	82 81       	ldd	r24, Z+2	; 0x02
    3f9c:	93 81       	ldd	r25, Z+3	; 0x03
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	40 e2       	ldi	r20, 0x20	; 32
    3fa4:	51 e4       	ldi	r21, 0x41	; 65
    3fa6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	8e 01       	movw	r16, r28
    3fb0:	07 53       	subi	r16, 0x37	; 55
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	bc 01       	movw	r22, r24
    3fb6:	cd 01       	movw	r24, r26
    3fb8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
    3fc6:	1f c0       	rjmp	.+62     	; 0x4006 <alignment+0x4a6>
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e9 53       	subi	r30, 0x39	; 57
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 e7       	ldi	r24, 0x70	; 112
    3fd0:	91 e0       	ldi	r25, 0x01	; 1
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	80 83       	st	Z, r24
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e9 53       	subi	r30, 0x39	; 57
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 81       	ld	r24, Z
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <alignment+0x480>
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e9 53       	subi	r30, 0x39	; 57
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fee:	de 01       	movw	r26, r28
    3ff0:	a7 53       	subi	r26, 0x37	; 55
    3ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e7 53       	subi	r30, 0x37	; 55
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	91 81       	ldd	r25, Z+1	; 0x01
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	11 96       	adiw	r26, 0x01	; 1
    4002:	9c 93       	st	X, r25
    4004:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4006:	fe 01       	movw	r30, r28
    4008:	e7 53       	subi	r30, 0x37	; 55
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	d1 f6       	brne	.-76     	; 0x3fc8 <alignment+0x468>
    4014:	27 c0       	rjmp	.+78     	; 0x4064 <alignment+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	8e 01       	movw	r16, r28
    4018:	07 53       	subi	r16, 0x37	; 55
    401a:	1f 4f       	sbci	r17, 0xFF	; 255
    401c:	fe 01       	movw	r30, r28
    401e:	e5 53       	subi	r30, 0x35	; 53
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	60 81       	ld	r22, Z
    4024:	71 81       	ldd	r23, Z+1	; 0x01
    4026:	82 81       	ldd	r24, Z+2	; 0x02
    4028:	93 81       	ldd	r25, Z+3	; 0x03
    402a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	f8 01       	movw	r30, r16
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
    4038:	de 01       	movw	r26, r28
    403a:	ab 53       	subi	r26, 0x3B	; 59
    403c:	bf 4f       	sbci	r27, 0xFF	; 255
    403e:	fe 01       	movw	r30, r28
    4040:	e7 53       	subi	r30, 0x37	; 55
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	80 81       	ld	r24, Z
    4046:	91 81       	ldd	r25, Z+1	; 0x01
    4048:	8d 93       	st	X+, r24
    404a:	9c 93       	st	X, r25
    404c:	fe 01       	movw	r30, r28
    404e:	eb 53       	subi	r30, 0x3B	; 59
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	91 81       	ldd	r25, Z+1	; 0x01
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <alignment+0x4f6>
    405a:	fe 01       	movw	r30, r28
    405c:	eb 53       	subi	r30, 0x3B	; 59
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	91 83       	std	Z+1, r25	; 0x01
    4062:	80 83       	st	Z, r24
        	_delay_ms(60);
        	servo_1(1.86 * 4);
    4064:	6b e7       	ldi	r22, 0x7B	; 123
    4066:	74 e1       	ldi	r23, 0x14	; 20
    4068:	8e ee       	ldi	r24, 0xEE	; 238
    406a:	90 e4       	ldi	r25, 0x40	; 64
    406c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <servo_1>
    4070:	fe 01       	movw	r30, r28
    4072:	ef 53       	subi	r30, 0x3F	; 63
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	aa ef       	ldi	r26, 0xFA	; 250
    407c:	b4 e4       	ldi	r27, 0x44	; 68
    407e:	80 83       	st	Z, r24
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	a2 83       	std	Z+2, r26	; 0x02
    4084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4086:	8e 01       	movw	r16, r28
    4088:	03 54       	subi	r16, 0x43	; 67
    408a:	1f 4f       	sbci	r17, 0xFF	; 255
    408c:	fe 01       	movw	r30, r28
    408e:	ef 53       	subi	r30, 0x3F	; 63
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	60 81       	ld	r22, Z
    4094:	71 81       	ldd	r23, Z+1	; 0x01
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	93 81       	ldd	r25, Z+3	; 0x03
    409a:	26 e6       	ldi	r18, 0x66	; 102
    409c:	36 e6       	ldi	r19, 0x66	; 102
    409e:	46 e6       	ldi	r20, 0x66	; 102
    40a0:	55 e4       	ldi	r21, 0x45	; 69
    40a2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	f8 01       	movw	r30, r16
    40ac:	80 83       	st	Z, r24
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	a2 83       	std	Z+2, r26	; 0x02
    40b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40b4:	fe 01       	movw	r30, r28
    40b6:	e3 54       	subi	r30, 0x43	; 67
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	60 81       	ld	r22, Z
    40bc:	71 81       	ldd	r23, Z+1	; 0x01
    40be:	82 81       	ldd	r24, Z+2	; 0x02
    40c0:	93 81       	ldd	r25, Z+3	; 0x03
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e8       	ldi	r20, 0x80	; 128
    40c8:	5f e3       	ldi	r21, 0x3F	; 63
    40ca:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    40ce:	88 23       	and	r24, r24
    40d0:	44 f4       	brge	.+16     	; 0x40e2 <alignment+0x582>
		__ticks = 1;
    40d2:	fe 01       	movw	r30, r28
    40d4:	e5 54       	subi	r30, 0x45	; 69
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	91 83       	std	Z+1, r25	; 0x01
    40de:	80 83       	st	Z, r24
    40e0:	64 c0       	rjmp	.+200    	; 0x41aa <alignment+0x64a>
	else if (__tmp > 65535)
    40e2:	fe 01       	movw	r30, r28
    40e4:	e3 54       	subi	r30, 0x43	; 67
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	60 81       	ld	r22, Z
    40ea:	71 81       	ldd	r23, Z+1	; 0x01
    40ec:	82 81       	ldd	r24, Z+2	; 0x02
    40ee:	93 81       	ldd	r25, Z+3	; 0x03
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	3f ef       	ldi	r19, 0xFF	; 255
    40f4:	4f e7       	ldi	r20, 0x7F	; 127
    40f6:	57 e4       	ldi	r21, 0x47	; 71
    40f8:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    40fc:	18 16       	cp	r1, r24
    40fe:	0c f0       	brlt	.+2      	; 0x4102 <alignment+0x5a2>
    4100:	43 c0       	rjmp	.+134    	; 0x4188 <alignment+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	fe 01       	movw	r30, r28
    4104:	ef 53       	subi	r30, 0x3F	; 63
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	60 81       	ld	r22, Z
    410a:	71 81       	ldd	r23, Z+1	; 0x01
    410c:	82 81       	ldd	r24, Z+2	; 0x02
    410e:	93 81       	ldd	r25, Z+3	; 0x03
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 e2       	ldi	r20, 0x20	; 32
    4116:	51 e4       	ldi	r21, 0x41	; 65
    4118:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	8e 01       	movw	r16, r28
    4122:	05 54       	subi	r16, 0x45	; 69
    4124:	1f 4f       	sbci	r17, 0xFF	; 255
    4126:	bc 01       	movw	r22, r24
    4128:	cd 01       	movw	r24, r26
    412a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	f8 01       	movw	r30, r16
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
    4138:	1f c0       	rjmp	.+62     	; 0x4178 <alignment+0x618>
    413a:	fe 01       	movw	r30, r28
    413c:	e7 54       	subi	r30, 0x47	; 71
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	80 e7       	ldi	r24, 0x70	; 112
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
    4148:	fe 01       	movw	r30, r28
    414a:	e7 54       	subi	r30, 0x47	; 71
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	80 81       	ld	r24, Z
    4150:	91 81       	ldd	r25, Z+1	; 0x01
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	f1 f7       	brne	.-4      	; 0x4152 <alignment+0x5f2>
    4156:	fe 01       	movw	r30, r28
    4158:	e7 54       	subi	r30, 0x47	; 71
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4160:	de 01       	movw	r26, r28
    4162:	a5 54       	subi	r26, 0x45	; 69
    4164:	bf 4f       	sbci	r27, 0xFF	; 255
    4166:	fe 01       	movw	r30, r28
    4168:	e5 54       	subi	r30, 0x45	; 69
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	11 96       	adiw	r26, 0x01	; 1
    4174:	9c 93       	st	X, r25
    4176:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4178:	fe 01       	movw	r30, r28
    417a:	e5 54       	subi	r30, 0x45	; 69
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	80 81       	ld	r24, Z
    4180:	91 81       	ldd	r25, Z+1	; 0x01
    4182:	00 97       	sbiw	r24, 0x00	; 0
    4184:	d1 f6       	brne	.-76     	; 0x413a <alignment+0x5da>
    4186:	27 c0       	rjmp	.+78     	; 0x41d6 <alignment+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4188:	8e 01       	movw	r16, r28
    418a:	05 54       	subi	r16, 0x45	; 69
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	fe 01       	movw	r30, r28
    4190:	e3 54       	subi	r30, 0x43	; 67
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	60 81       	ld	r22, Z
    4196:	71 81       	ldd	r23, Z+1	; 0x01
    4198:	82 81       	ldd	r24, Z+2	; 0x02
    419a:	93 81       	ldd	r25, Z+3	; 0x03
    419c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	f8 01       	movw	r30, r16
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	80 83       	st	Z, r24
    41aa:	de 01       	movw	r26, r28
    41ac:	a9 54       	subi	r26, 0x49	; 73
    41ae:	bf 4f       	sbci	r27, 0xFF	; 255
    41b0:	fe 01       	movw	r30, r28
    41b2:	e5 54       	subi	r30, 0x45	; 69
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	8d 93       	st	X+, r24
    41bc:	9c 93       	st	X, r25
    41be:	fe 01       	movw	r30, r28
    41c0:	e9 54       	subi	r30, 0x49	; 73
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <alignment+0x668>
    41cc:	fe 01       	movw	r30, r28
    41ce:	e9 54       	subi	r30, 0x49	; 73
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	91 83       	std	Z+1, r25	; 0x01
    41d4:	80 83       	st	Z, r24
	    }

    	//say the ideal distance is 80mm
    	//distance of 80mm corresponds to an ADC value of 160
    	/* Get value from left sharp sensor */
        Left_Sharp_Sensor = ADC_Conversion(9);
    41d6:	89 e0       	ldi	r24, 0x09	; 9
    41d8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    41dc:	80 93 7e 04 	sts	0x047E, r24
    	lcd_cursor(2,1);
    41e0:	82 e0       	ldi	r24, 0x02	; 2
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		print_sensor(2,4,9);	//Prints Value of Left Sharp Sensor
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	64 e0       	ldi	r22, 0x04	; 4
    41ec:	49 e0       	ldi	r20, 0x09	; 9
    41ee:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <print_sensor>

    	/* Get value from right sharp sensor */
    	Right_Sharp_Sensor = ADC_Conversion(13);
    41f2:	8d e0       	ldi	r24, 0x0D	; 13
    41f4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    41f8:	80 93 7f 04 	sts	0x047F, r24
    	lcd_cursor(2,1);
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	61 e0       	ldi	r22, 0x01	; 1
    4200:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		print_sensor(2,8,13);	//Prints Value of Right Sharp Sensor
    4204:	82 e0       	ldi	r24, 0x02	; 2
    4206:	68 e0       	ldi	r22, 0x08	; 8
    4208:	4d e0       	ldi	r20, 0x0D	; 13
    420a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <print_sensor>

        /* When bot is properly aligned with both the trough. In that
         * case bot has to just move straight by 10mm.
         */
		if ((Left_Sharp_Sensor  >= LEFT_THRESHOLD_min)
    420e:	80 91 7e 04 	lds	r24, 0x047E
    4212:	8b 36       	cpi	r24, 0x6B	; 107
    4214:	08 f4       	brcc	.+2      	; 0x4218 <alignment+0x6b8>
    4216:	dd c0       	rjmp	.+442    	; 0x43d2 <alignment+0x872>
    4218:	80 91 7e 04 	lds	r24, 0x047E
    421c:	86 37       	cpi	r24, 0x76	; 118
    421e:	08 f0       	brcs	.+2      	; 0x4222 <alignment+0x6c2>
    4220:	d8 c0       	rjmp	.+432    	; 0x43d2 <alignment+0x872>
    4222:	80 91 7f 04 	lds	r24, 0x047F
    4226:	81 34       	cpi	r24, 0x41	; 65
    4228:	08 f4       	brcc	.+2      	; 0x422c <alignment+0x6cc>
    422a:	d3 c0       	rjmp	.+422    	; 0x43d2 <alignment+0x872>
    422c:	80 91 7f 04 	lds	r24, 0x047F
    4230:	8c 34       	cpi	r24, 0x4C	; 76
    4232:	08 f0       	brcs	.+2      	; 0x4236 <alignment+0x6d6>
    4234:	ce c0       	rjmp	.+412    	; 0x43d2 <alignment+0x872>
    	&&  (Left_Sharp_Sensor  <= LEFT_THRESHOLD_max)
    	&&  (Right_Sharp_Sensor >= RIGHT_THRESHOLD_min)
    	&&  (Right_Sharp_Sensor <= RIGHT_THRESHOLD_max))
    	{
    		lcd_cursor(1,1);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	61 e0       	ldi	r22, 0x01	; 1
    423a:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
            lcd_string("forward");
    423e:	87 ec       	ldi	r24, 0xC7	; 199
    4240:	92 e0       	ldi	r25, 0x02	; 2
    4242:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
            forward_mm(10);
    4246:	8a e0       	ldi	r24, 0x0A	; 10
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <forward_mm>
    		stop();
    424e:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4252:	fe 01       	movw	r30, r28
    4254:	ed 54       	subi	r30, 0x4D	; 77
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	aa ef       	ldi	r26, 0xFA	; 250
    425e:	b3 e4       	ldi	r27, 0x43	; 67
    4260:	80 83       	st	Z, r24
    4262:	91 83       	std	Z+1, r25	; 0x01
    4264:	a2 83       	std	Z+2, r26	; 0x02
    4266:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4268:	8e 01       	movw	r16, r28
    426a:	01 55       	subi	r16, 0x51	; 81
    426c:	1f 4f       	sbci	r17, 0xFF	; 255
    426e:	fe 01       	movw	r30, r28
    4270:	ed 54       	subi	r30, 0x4D	; 77
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	60 81       	ld	r22, Z
    4276:	71 81       	ldd	r23, Z+1	; 0x01
    4278:	82 81       	ldd	r24, Z+2	; 0x02
    427a:	93 81       	ldd	r25, Z+3	; 0x03
    427c:	26 e6       	ldi	r18, 0x66	; 102
    427e:	36 e6       	ldi	r19, 0x66	; 102
    4280:	46 e6       	ldi	r20, 0x66	; 102
    4282:	55 e4       	ldi	r21, 0x45	; 69
    4284:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	f8 01       	movw	r30, r16
    428e:	80 83       	st	Z, r24
    4290:	91 83       	std	Z+1, r25	; 0x01
    4292:	a2 83       	std	Z+2, r26	; 0x02
    4294:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4296:	fe 01       	movw	r30, r28
    4298:	e1 55       	subi	r30, 0x51	; 81
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	60 81       	ld	r22, Z
    429e:	71 81       	ldd	r23, Z+1	; 0x01
    42a0:	82 81       	ldd	r24, Z+2	; 0x02
    42a2:	93 81       	ldd	r25, Z+3	; 0x03
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e8       	ldi	r20, 0x80	; 128
    42aa:	5f e3       	ldi	r21, 0x3F	; 63
    42ac:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    42b0:	88 23       	and	r24, r24
    42b2:	44 f4       	brge	.+16     	; 0x42c4 <alignment+0x764>
		__ticks = 1;
    42b4:	fe 01       	movw	r30, r28
    42b6:	e3 55       	subi	r30, 0x53	; 83
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
    42c2:	64 c0       	rjmp	.+200    	; 0x438c <alignment+0x82c>
	else if (__tmp > 65535)
    42c4:	fe 01       	movw	r30, r28
    42c6:	e1 55       	subi	r30, 0x51	; 81
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	60 81       	ld	r22, Z
    42cc:	71 81       	ldd	r23, Z+1	; 0x01
    42ce:	82 81       	ldd	r24, Z+2	; 0x02
    42d0:	93 81       	ldd	r25, Z+3	; 0x03
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	3f ef       	ldi	r19, 0xFF	; 255
    42d6:	4f e7       	ldi	r20, 0x7F	; 127
    42d8:	57 e4       	ldi	r21, 0x47	; 71
    42da:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    42de:	18 16       	cp	r1, r24
    42e0:	0c f0       	brlt	.+2      	; 0x42e4 <alignment+0x784>
    42e2:	43 c0       	rjmp	.+134    	; 0x436a <alignment+0x80a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e4:	fe 01       	movw	r30, r28
    42e6:	ed 54       	subi	r30, 0x4D	; 77
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	60 81       	ld	r22, Z
    42ec:	71 81       	ldd	r23, Z+1	; 0x01
    42ee:	82 81       	ldd	r24, Z+2	; 0x02
    42f0:	93 81       	ldd	r25, Z+3	; 0x03
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e2       	ldi	r20, 0x20	; 32
    42f8:	51 e4       	ldi	r21, 0x41	; 65
    42fa:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	8e 01       	movw	r16, r28
    4304:	03 55       	subi	r16, 0x53	; 83
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	bc 01       	movw	r22, r24
    430a:	cd 01       	movw	r24, r26
    430c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	f8 01       	movw	r30, r16
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
    431a:	1f c0       	rjmp	.+62     	; 0x435a <alignment+0x7fa>
    431c:	fe 01       	movw	r30, r28
    431e:	e5 55       	subi	r30, 0x55	; 85
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 e7       	ldi	r24, 0x70	; 112
    4324:	91 e0       	ldi	r25, 0x01	; 1
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	80 83       	st	Z, r24
    432a:	fe 01       	movw	r30, r28
    432c:	e5 55       	subi	r30, 0x55	; 85
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	01 97       	sbiw	r24, 0x01	; 1
    4336:	f1 f7       	brne	.-4      	; 0x4334 <alignment+0x7d4>
    4338:	fe 01       	movw	r30, r28
    433a:	e5 55       	subi	r30, 0x55	; 85
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4342:	de 01       	movw	r26, r28
    4344:	a3 55       	subi	r26, 0x53	; 83
    4346:	bf 4f       	sbci	r27, 0xFF	; 255
    4348:	fe 01       	movw	r30, r28
    434a:	e3 55       	subi	r30, 0x53	; 83
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	11 96       	adiw	r26, 0x01	; 1
    4356:	9c 93       	st	X, r25
    4358:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    435a:	fe 01       	movw	r30, r28
    435c:	e3 55       	subi	r30, 0x53	; 83
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	80 81       	ld	r24, Z
    4362:	91 81       	ldd	r25, Z+1	; 0x01
    4364:	00 97       	sbiw	r24, 0x00	; 0
    4366:	d1 f6       	brne	.-76     	; 0x431c <alignment+0x7bc>
    4368:	27 c0       	rjmp	.+78     	; 0x43b8 <alignment+0x858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    436a:	8e 01       	movw	r16, r28
    436c:	03 55       	subi	r16, 0x53	; 83
    436e:	1f 4f       	sbci	r17, 0xFF	; 255
    4370:	fe 01       	movw	r30, r28
    4372:	e1 55       	subi	r30, 0x51	; 81
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	60 81       	ld	r22, Z
    4378:	71 81       	ldd	r23, Z+1	; 0x01
    437a:	82 81       	ldd	r24, Z+2	; 0x02
    437c:	93 81       	ldd	r25, Z+3	; 0x03
    437e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	f8 01       	movw	r30, r16
    4388:	91 83       	std	Z+1, r25	; 0x01
    438a:	80 83       	st	Z, r24
    438c:	de 01       	movw	r26, r28
    438e:	a7 55       	subi	r26, 0x57	; 87
    4390:	bf 4f       	sbci	r27, 0xFF	; 255
    4392:	fe 01       	movw	r30, r28
    4394:	e3 55       	subi	r30, 0x53	; 83
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	80 81       	ld	r24, Z
    439a:	91 81       	ldd	r25, Z+1	; 0x01
    439c:	8d 93       	st	X+, r24
    439e:	9c 93       	st	X, r25
    43a0:	fe 01       	movw	r30, r28
    43a2:	e7 55       	subi	r30, 0x57	; 87
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <alignment+0x84a>
    43ae:	fe 01       	movw	r30, r28
    43b0:	e7 55       	subi	r30, 0x57	; 87
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	91 83       	std	Z+1, r25	; 0x01
    43b6:	80 83       	st	Z, r24

    		_delay_ms(DELAY);

    		count++;
    43b8:	de 01       	movw	r26, r28
    43ba:	ac 50       	subi	r26, 0x0C	; 12
    43bc:	bf 4f       	sbci	r27, 0xFF	; 255
    43be:	fe 01       	movw	r30, r28
    43c0:	ec 50       	subi	r30, 0x0C	; 12
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 81       	ld	r24, Z
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	01 96       	adiw	r24, 0x01	; 1
    43ca:	11 96       	adiw	r26, 0x01	; 1
    43cc:	9c 93       	st	X, r25
    43ce:	8e 93       	st	-X, r24
    43d0:	01 cc       	rjmp	.-2046   	; 0x3bd4 <alignment+0x74>
    	}

    	/* Bot is misalinged and has turned right a bit */
        else if ((Left_Sharp_Sensor  < LEFT_THRESHOLD_min)
    43d2:	80 91 7e 04 	lds	r24, 0x047E
    43d6:	8b 36       	cpi	r24, 0x6B	; 107
    43d8:	08 f0       	brcs	.+2      	; 0x43dc <alignment+0x87c>
    43da:	1b c3       	rjmp	.+1590   	; 0x4a12 <alignment+0xeb2>
    43dc:	80 91 7e 04 	lds	r24, 0x047E
    43e0:	83 33       	cpi	r24, 0x33	; 51
    43e2:	08 f4       	brcc	.+2      	; 0x43e6 <alignment+0x886>
    43e4:	16 c3       	rjmp	.+1580   	; 0x4a12 <alignment+0xeb2>
    43e6:	80 91 7f 04 	lds	r24, 0x047F
    43ea:	83 33       	cpi	r24, 0x33	; 51
    43ec:	08 f4       	brcc	.+2      	; 0x43f0 <alignment+0x890>
    43ee:	11 c3       	rjmp	.+1570   	; 0x4a12 <alignment+0xeb2>
    43f0:	80 91 7f 04 	lds	r24, 0x047F
    43f4:	81 34       	cpi	r24, 0x41	; 65
    43f6:	08 f0       	brcs	.+2      	; 0x43fa <alignment+0x89a>
    43f8:	0c c3       	rjmp	.+1560   	; 0x4a12 <alignment+0xeb2>
             &&  (Left_Sharp_Sensor  > NO_TROUGH_THRESHOLD)
             &&  (Right_Sharp_Sensor > NO_TROUGH_THRESHOLD)
    	  	 &&  (Right_Sharp_Sensor < RIGHT_THRESHOLD_min))
    	{
        	lcd_cursor(1,1);
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
            lcd_string("Both wrong");
    4402:	8f ec       	ldi	r24, 0xCF	; 207
    4404:	92 e0       	ldi	r25, 0x02	; 2
    4406:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
    440a:	fe 01       	movw	r30, r28
    440c:	eb 55       	subi	r30, 0x5B	; 91
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	aa ef       	ldi	r26, 0xFA	; 250
    4416:	b3 e4       	ldi	r27, 0x43	; 67
    4418:	80 83       	st	Z, r24
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	a2 83       	std	Z+2, r26	; 0x02
    441e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4420:	8e 01       	movw	r16, r28
    4422:	0f 55       	subi	r16, 0x5F	; 95
    4424:	1f 4f       	sbci	r17, 0xFF	; 255
    4426:	fe 01       	movw	r30, r28
    4428:	eb 55       	subi	r30, 0x5B	; 91
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	60 81       	ld	r22, Z
    442e:	71 81       	ldd	r23, Z+1	; 0x01
    4430:	82 81       	ldd	r24, Z+2	; 0x02
    4432:	93 81       	ldd	r25, Z+3	; 0x03
    4434:	26 e6       	ldi	r18, 0x66	; 102
    4436:	36 e6       	ldi	r19, 0x66	; 102
    4438:	46 e6       	ldi	r20, 0x66	; 102
    443a:	55 e4       	ldi	r21, 0x45	; 69
    443c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	f8 01       	movw	r30, r16
    4446:	80 83       	st	Z, r24
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	a2 83       	std	Z+2, r26	; 0x02
    444c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    444e:	fe 01       	movw	r30, r28
    4450:	ef 55       	subi	r30, 0x5F	; 95
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e8       	ldi	r20, 0x80	; 128
    4462:	5f e3       	ldi	r21, 0x3F	; 63
    4464:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4468:	88 23       	and	r24, r24
    446a:	44 f4       	brge	.+16     	; 0x447c <alignment+0x91c>
		__ticks = 1;
    446c:	fe 01       	movw	r30, r28
    446e:	e1 56       	subi	r30, 0x61	; 97
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	91 83       	std	Z+1, r25	; 0x01
    4478:	80 83       	st	Z, r24
    447a:	64 c0       	rjmp	.+200    	; 0x4544 <alignment+0x9e4>
	else if (__tmp > 65535)
    447c:	fe 01       	movw	r30, r28
    447e:	ef 55       	subi	r30, 0x5F	; 95
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	60 81       	ld	r22, Z
    4484:	71 81       	ldd	r23, Z+1	; 0x01
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	3f ef       	ldi	r19, 0xFF	; 255
    448e:	4f e7       	ldi	r20, 0x7F	; 127
    4490:	57 e4       	ldi	r21, 0x47	; 71
    4492:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4496:	18 16       	cp	r1, r24
    4498:	0c f0       	brlt	.+2      	; 0x449c <alignment+0x93c>
    449a:	43 c0       	rjmp	.+134    	; 0x4522 <alignment+0x9c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449c:	fe 01       	movw	r30, r28
    449e:	eb 55       	subi	r30, 0x5B	; 91
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	82 81       	ldd	r24, Z+2	; 0x02
    44a8:	93 81       	ldd	r25, Z+3	; 0x03
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	40 e2       	ldi	r20, 0x20	; 32
    44b0:	51 e4       	ldi	r21, 0x41	; 65
    44b2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	8e 01       	movw	r16, r28
    44bc:	01 56       	subi	r16, 0x61	; 97
    44be:	1f 4f       	sbci	r17, 0xFF	; 255
    44c0:	bc 01       	movw	r22, r24
    44c2:	cd 01       	movw	r24, r26
    44c4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    44c8:	dc 01       	movw	r26, r24
    44ca:	cb 01       	movw	r24, r22
    44cc:	f8 01       	movw	r30, r16
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	80 83       	st	Z, r24
    44d2:	1f c0       	rjmp	.+62     	; 0x4512 <alignment+0x9b2>
    44d4:	fe 01       	movw	r30, r28
    44d6:	e3 56       	subi	r30, 0x63	; 99
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	80 e7       	ldi	r24, 0x70	; 112
    44dc:	91 e0       	ldi	r25, 0x01	; 1
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	fe 01       	movw	r30, r28
    44e4:	e3 56       	subi	r30, 0x63	; 99
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	80 81       	ld	r24, Z
    44ea:	91 81       	ldd	r25, Z+1	; 0x01
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <alignment+0x98c>
    44f0:	fe 01       	movw	r30, r28
    44f2:	e3 56       	subi	r30, 0x63	; 99
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fa:	de 01       	movw	r26, r28
    44fc:	a1 56       	subi	r26, 0x61	; 97
    44fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4500:	fe 01       	movw	r30, r28
    4502:	e1 56       	subi	r30, 0x61	; 97
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	80 81       	ld	r24, Z
    4508:	91 81       	ldd	r25, Z+1	; 0x01
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	11 96       	adiw	r26, 0x01	; 1
    450e:	9c 93       	st	X, r25
    4510:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4512:	fe 01       	movw	r30, r28
    4514:	e1 56       	subi	r30, 0x61	; 97
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	d1 f6       	brne	.-76     	; 0x44d4 <alignment+0x974>
    4520:	27 c0       	rjmp	.+78     	; 0x4570 <alignment+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4522:	8e 01       	movw	r16, r28
    4524:	01 56       	subi	r16, 0x61	; 97
    4526:	1f 4f       	sbci	r17, 0xFF	; 255
    4528:	fe 01       	movw	r30, r28
    452a:	ef 55       	subi	r30, 0x5F	; 95
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	f8 01       	movw	r30, r16
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	80 83       	st	Z, r24
    4544:	de 01       	movw	r26, r28
    4546:	a5 56       	subi	r26, 0x65	; 101
    4548:	bf 4f       	sbci	r27, 0xFF	; 255
    454a:	fe 01       	movw	r30, r28
    454c:	e1 56       	subi	r30, 0x61	; 97
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	80 81       	ld	r24, Z
    4552:	91 81       	ldd	r25, Z+1	; 0x01
    4554:	8d 93       	st	X+, r24
    4556:	9c 93       	st	X, r25
    4558:	fe 01       	movw	r30, r28
    455a:	e5 56       	subi	r30, 0x65	; 101
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 81       	ld	r24, Z
    4560:	91 81       	ldd	r25, Z+1	; 0x01
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	f1 f7       	brne	.-4      	; 0x4562 <alignment+0xa02>
    4566:	fe 01       	movw	r30, r28
    4568:	e5 56       	subi	r30, 0x65	; 101
    456a:	ff 4f       	sbci	r31, 0xFF	; 255
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
            _delay_ms(500);
            lcd_cursor(1,1);
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	61 e0       	ldi	r22, 0x01	; 1
    4574:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
            lcd_string("left rotate");
    4578:	8a ed       	ldi	r24, 0xDA	; 218
    457a:	92 e0       	ldi	r25, 0x02	; 2
    457c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
            left_degrees(ROTATE); //Rotate robot left by 90 degrees
    4580:	85 e0       	ldi	r24, 0x05	; 5
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <left_degrees>
        	stop();
    4588:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    458c:	fe 01       	movw	r30, r28
    458e:	e9 56       	subi	r30, 0x69	; 105
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	aa ef       	ldi	r26, 0xFA	; 250
    4598:	b3 e4       	ldi	r27, 0x43	; 67
    459a:	80 83       	st	Z, r24
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	a2 83       	std	Z+2, r26	; 0x02
    45a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a2:	8e 01       	movw	r16, r28
    45a4:	0d 56       	subi	r16, 0x6D	; 109
    45a6:	1f 4f       	sbci	r17, 0xFF	; 255
    45a8:	fe 01       	movw	r30, r28
    45aa:	e9 56       	subi	r30, 0x69	; 105
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	60 81       	ld	r22, Z
    45b0:	71 81       	ldd	r23, Z+1	; 0x01
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	26 e6       	ldi	r18, 0x66	; 102
    45b8:	36 e6       	ldi	r19, 0x66	; 102
    45ba:	46 e6       	ldi	r20, 0x66	; 102
    45bc:	55 e4       	ldi	r21, 0x45	; 69
    45be:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	f8 01       	movw	r30, r16
    45c8:	80 83       	st	Z, r24
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	a2 83       	std	Z+2, r26	; 0x02
    45ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45d0:	fe 01       	movw	r30, r28
    45d2:	ed 56       	subi	r30, 0x6D	; 109
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	40 e8       	ldi	r20, 0x80	; 128
    45e4:	5f e3       	ldi	r21, 0x3F	; 63
    45e6:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    45ea:	88 23       	and	r24, r24
    45ec:	44 f4       	brge	.+16     	; 0x45fe <alignment+0xa9e>
		__ticks = 1;
    45ee:	fe 01       	movw	r30, r28
    45f0:	ef 56       	subi	r30, 0x6F	; 111
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	80 83       	st	Z, r24
    45fc:	64 c0       	rjmp	.+200    	; 0x46c6 <alignment+0xb66>
	else if (__tmp > 65535)
    45fe:	fe 01       	movw	r30, r28
    4600:	ed 56       	subi	r30, 0x6D	; 109
    4602:	ff 4f       	sbci	r31, 0xFF	; 255
    4604:	60 81       	ld	r22, Z
    4606:	71 81       	ldd	r23, Z+1	; 0x01
    4608:	82 81       	ldd	r24, Z+2	; 0x02
    460a:	93 81       	ldd	r25, Z+3	; 0x03
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	3f ef       	ldi	r19, 0xFF	; 255
    4610:	4f e7       	ldi	r20, 0x7F	; 127
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4618:	18 16       	cp	r1, r24
    461a:	0c f0       	brlt	.+2      	; 0x461e <alignment+0xabe>
    461c:	43 c0       	rjmp	.+134    	; 0x46a4 <alignment+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461e:	fe 01       	movw	r30, r28
    4620:	e9 56       	subi	r30, 0x69	; 105
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	60 81       	ld	r22, Z
    4626:	71 81       	ldd	r23, Z+1	; 0x01
    4628:	82 81       	ldd	r24, Z+2	; 0x02
    462a:	93 81       	ldd	r25, Z+3	; 0x03
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	40 e2       	ldi	r20, 0x20	; 32
    4632:	51 e4       	ldi	r21, 0x41	; 65
    4634:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	8e 01       	movw	r16, r28
    463e:	0f 56       	subi	r16, 0x6F	; 111
    4640:	1f 4f       	sbci	r17, 0xFF	; 255
    4642:	bc 01       	movw	r22, r24
    4644:	cd 01       	movw	r24, r26
    4646:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	f8 01       	movw	r30, r16
    4650:	91 83       	std	Z+1, r25	; 0x01
    4652:	80 83       	st	Z, r24
    4654:	1f c0       	rjmp	.+62     	; 0x4694 <alignment+0xb34>
    4656:	fe 01       	movw	r30, r28
    4658:	e1 57       	subi	r30, 0x71	; 113
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	80 e7       	ldi	r24, 0x70	; 112
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	91 83       	std	Z+1, r25	; 0x01
    4662:	80 83       	st	Z, r24
    4664:	fe 01       	movw	r30, r28
    4666:	e1 57       	subi	r30, 0x71	; 113
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	01 97       	sbiw	r24, 0x01	; 1
    4670:	f1 f7       	brne	.-4      	; 0x466e <alignment+0xb0e>
    4672:	fe 01       	movw	r30, r28
    4674:	e1 57       	subi	r30, 0x71	; 113
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    467c:	de 01       	movw	r26, r28
    467e:	af 56       	subi	r26, 0x6F	; 111
    4680:	bf 4f       	sbci	r27, 0xFF	; 255
    4682:	fe 01       	movw	r30, r28
    4684:	ef 56       	subi	r30, 0x6F	; 111
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	80 81       	ld	r24, Z
    468a:	91 81       	ldd	r25, Z+1	; 0x01
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	11 96       	adiw	r26, 0x01	; 1
    4690:	9c 93       	st	X, r25
    4692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4694:	fe 01       	movw	r30, r28
    4696:	ef 56       	subi	r30, 0x6F	; 111
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	00 97       	sbiw	r24, 0x00	; 0
    46a0:	d1 f6       	brne	.-76     	; 0x4656 <alignment+0xaf6>
    46a2:	27 c0       	rjmp	.+78     	; 0x46f2 <alignment+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a4:	8e 01       	movw	r16, r28
    46a6:	0f 56       	subi	r16, 0x6F	; 111
    46a8:	1f 4f       	sbci	r17, 0xFF	; 255
    46aa:	fe 01       	movw	r30, r28
    46ac:	ed 56       	subi	r30, 0x6D	; 109
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	60 81       	ld	r22, Z
    46b2:	71 81       	ldd	r23, Z+1	; 0x01
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	93 81       	ldd	r25, Z+3	; 0x03
    46b8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	f8 01       	movw	r30, r16
    46c2:	91 83       	std	Z+1, r25	; 0x01
    46c4:	80 83       	st	Z, r24
    46c6:	de 01       	movw	r26, r28
    46c8:	a3 57       	subi	r26, 0x73	; 115
    46ca:	bf 4f       	sbci	r27, 0xFF	; 255
    46cc:	fe 01       	movw	r30, r28
    46ce:	ef 56       	subi	r30, 0x6F	; 111
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	8d 93       	st	X+, r24
    46d8:	9c 93       	st	X, r25
    46da:	fe 01       	movw	r30, r28
    46dc:	e3 57       	subi	r30, 0x73	; 115
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	80 81       	ld	r24, Z
    46e2:	91 81       	ldd	r25, Z+1	; 0x01
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	f1 f7       	brne	.-4      	; 0x46e4 <alignment+0xb84>
    46e8:	fe 01       	movw	r30, r28
    46ea:	e3 57       	subi	r30, 0x73	; 115
    46ec:	ff 4f       	sbci	r31, 0xFF	; 255
    46ee:	91 83       	std	Z+1, r25	; 0x01
    46f0:	80 83       	st	Z, r24
        	_delay_ms(500);
        	buff = Left_Sharp_Sensor;
    46f2:	fe 01       	movw	r30, r28
    46f4:	e9 50       	subi	r30, 0x09	; 9
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	80 91 7e 04 	lds	r24, 0x047E
    46fc:	80 83       	st	Z, r24

        	Left_Temp_Sharp_Sensor = ADC_Conversion(9);
    46fe:	89 e0       	ldi	r24, 0x09	; 9
    4700:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    4704:	fe 01       	movw	r30, r28
    4706:	ea 50       	subi	r30, 0x0A	; 10
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	80 83       	st	Z, r24
        	if (Left_Temp_Sharp_Sensor > buff)
    470c:	fe 01       	movw	r30, r28
    470e:	ea 50       	subi	r30, 0x0A	; 10
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	de 01       	movw	r26, r28
    4714:	a9 50       	subi	r26, 0x09	; 9
    4716:	bf 4f       	sbci	r27, 0xFF	; 255
    4718:	90 81       	ld	r25, Z
    471a:	8c 91       	ld	r24, X
    471c:	89 17       	cp	r24, r25
    471e:	08 f0       	brcs	.+2      	; 0x4722 <alignment+0xbc2>
    4720:	c1 c0       	rjmp	.+386    	; 0x48a4 <alignment+0xd44>
            {
        	    lcd_cursor(1,1);
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	61 e0       	ldi	r22, 0x01	; 1
    4726:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
                lcd_string("right rotate");
    472a:	86 ee       	ldi	r24, 0xE6	; 230
    472c:	92 e0       	ldi	r25, 0x02	; 2
    472e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
                right_degrees(ROTATE_MORE);
    4732:	8a e0       	ldi	r24, 0x0A	; 10
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <right_degrees>
                stop();
    473a:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    473e:	fe 01       	movw	r30, r28
    4740:	e7 57       	subi	r30, 0x77	; 119
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	aa ef       	ldi	r26, 0xFA	; 250
    474a:	b3 e4       	ldi	r27, 0x43	; 67
    474c:	80 83       	st	Z, r24
    474e:	91 83       	std	Z+1, r25	; 0x01
    4750:	a2 83       	std	Z+2, r26	; 0x02
    4752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4754:	8e 01       	movw	r16, r28
    4756:	0b 57       	subi	r16, 0x7B	; 123
    4758:	1f 4f       	sbci	r17, 0xFF	; 255
    475a:	fe 01       	movw	r30, r28
    475c:	e7 57       	subi	r30, 0x77	; 119
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	26 e6       	ldi	r18, 0x66	; 102
    476a:	36 e6       	ldi	r19, 0x66	; 102
    476c:	46 e6       	ldi	r20, 0x66	; 102
    476e:	55 e4       	ldi	r21, 0x45	; 69
    4770:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	f8 01       	movw	r30, r16
    477a:	80 83       	st	Z, r24
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	a2 83       	std	Z+2, r26	; 0x02
    4780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4782:	fe 01       	movw	r30, r28
    4784:	eb 57       	subi	r30, 0x7B	; 123
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	60 81       	ld	r22, Z
    478a:	71 81       	ldd	r23, Z+1	; 0x01
    478c:	82 81       	ldd	r24, Z+2	; 0x02
    478e:	93 81       	ldd	r25, Z+3	; 0x03
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	40 e8       	ldi	r20, 0x80	; 128
    4796:	5f e3       	ldi	r21, 0x3F	; 63
    4798:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    479c:	88 23       	and	r24, r24
    479e:	44 f4       	brge	.+16     	; 0x47b0 <alignment+0xc50>
		__ticks = 1;
    47a0:	fe 01       	movw	r30, r28
    47a2:	ed 57       	subi	r30, 0x7D	; 125
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	80 83       	st	Z, r24
    47ae:	64 c0       	rjmp	.+200    	; 0x4878 <alignment+0xd18>
	else if (__tmp > 65535)
    47b0:	fe 01       	movw	r30, r28
    47b2:	eb 57       	subi	r30, 0x7B	; 123
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	3f ef       	ldi	r19, 0xFF	; 255
    47c2:	4f e7       	ldi	r20, 0x7F	; 127
    47c4:	57 e4       	ldi	r21, 0x47	; 71
    47c6:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    47ca:	18 16       	cp	r1, r24
    47cc:	0c f0       	brlt	.+2      	; 0x47d0 <alignment+0xc70>
    47ce:	43 c0       	rjmp	.+134    	; 0x4856 <alignment+0xcf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d0:	fe 01       	movw	r30, r28
    47d2:	e7 57       	subi	r30, 0x77	; 119
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	60 81       	ld	r22, Z
    47d8:	71 81       	ldd	r23, Z+1	; 0x01
    47da:	82 81       	ldd	r24, Z+2	; 0x02
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 e2       	ldi	r20, 0x20	; 32
    47e4:	51 e4       	ldi	r21, 0x41	; 65
    47e6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	8e 01       	movw	r16, r28
    47f0:	0d 57       	subi	r16, 0x7D	; 125
    47f2:	1f 4f       	sbci	r17, 0xFF	; 255
    47f4:	bc 01       	movw	r22, r24
    47f6:	cd 01       	movw	r24, r26
    47f8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	f8 01       	movw	r30, r16
    4802:	91 83       	std	Z+1, r25	; 0x01
    4804:	80 83       	st	Z, r24
    4806:	1f c0       	rjmp	.+62     	; 0x4846 <alignment+0xce6>
    4808:	fe 01       	movw	r30, r28
    480a:	ef 57       	subi	r30, 0x7F	; 127
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	80 e7       	ldi	r24, 0x70	; 112
    4810:	91 e0       	ldi	r25, 0x01	; 1
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	80 83       	st	Z, r24
    4816:	fe 01       	movw	r30, r28
    4818:	ef 57       	subi	r30, 0x7F	; 127
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 81       	ld	r24, Z
    481e:	91 81       	ldd	r25, Z+1	; 0x01
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <alignment+0xcc0>
    4824:	fe 01       	movw	r30, r28
    4826:	ef 57       	subi	r30, 0x7F	; 127
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482e:	de 01       	movw	r26, r28
    4830:	ad 57       	subi	r26, 0x7D	; 125
    4832:	bf 4f       	sbci	r27, 0xFF	; 255
    4834:	fe 01       	movw	r30, r28
    4836:	ed 57       	subi	r30, 0x7D	; 125
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	11 96       	adiw	r26, 0x01	; 1
    4842:	9c 93       	st	X, r25
    4844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4846:	fe 01       	movw	r30, r28
    4848:	ed 57       	subi	r30, 0x7D	; 125
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	d1 f6       	brne	.-76     	; 0x4808 <alignment+0xca8>
    4854:	27 c0       	rjmp	.+78     	; 0x48a4 <alignment+0xd44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4856:	8e 01       	movw	r16, r28
    4858:	0d 57       	subi	r16, 0x7D	; 125
    485a:	1f 4f       	sbci	r17, 0xFF	; 255
    485c:	fe 01       	movw	r30, r28
    485e:	eb 57       	subi	r30, 0x7B	; 123
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	60 81       	ld	r22, Z
    4864:	71 81       	ldd	r23, Z+1	; 0x01
    4866:	82 81       	ldd	r24, Z+2	; 0x02
    4868:	93 81       	ldd	r25, Z+3	; 0x03
    486a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	f8 01       	movw	r30, r16
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
    4878:	de 01       	movw	r26, r28
    487a:	a1 58       	subi	r26, 0x81	; 129
    487c:	bf 4f       	sbci	r27, 0xFF	; 255
    487e:	fe 01       	movw	r30, r28
    4880:	ed 57       	subi	r30, 0x7D	; 125
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	80 81       	ld	r24, Z
    4886:	91 81       	ldd	r25, Z+1	; 0x01
    4888:	8d 93       	st	X+, r24
    488a:	9c 93       	st	X, r25
    488c:	fe 01       	movw	r30, r28
    488e:	e1 58       	subi	r30, 0x81	; 129
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	f1 f7       	brne	.-4      	; 0x4896 <alignment+0xd36>
    489a:	fe 01       	movw	r30, r28
    489c:	e1 58       	subi	r30, 0x81	; 129
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	91 83       	std	Z+1, r25	; 0x01
    48a2:	80 83       	st	Z, r24
				_delay_ms(DELAY);
            }

        	stop();
    48a4:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    48a8:	fe 01       	movw	r30, r28
    48aa:	e5 58       	subi	r30, 0x85	; 133
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	aa ef       	ldi	r26, 0xFA	; 250
    48b4:	b3 e4       	ldi	r27, 0x43	; 67
    48b6:	80 83       	st	Z, r24
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	a2 83       	std	Z+2, r26	; 0x02
    48bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48be:	8e 01       	movw	r16, r28
    48c0:	09 58       	subi	r16, 0x89	; 137
    48c2:	1f 4f       	sbci	r17, 0xFF	; 255
    48c4:	fe 01       	movw	r30, r28
    48c6:	e5 58       	subi	r30, 0x85	; 133
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	60 81       	ld	r22, Z
    48cc:	71 81       	ldd	r23, Z+1	; 0x01
    48ce:	82 81       	ldd	r24, Z+2	; 0x02
    48d0:	93 81       	ldd	r25, Z+3	; 0x03
    48d2:	26 e6       	ldi	r18, 0x66	; 102
    48d4:	36 e6       	ldi	r19, 0x66	; 102
    48d6:	46 e6       	ldi	r20, 0x66	; 102
    48d8:	55 e4       	ldi	r21, 0x45	; 69
    48da:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	f8 01       	movw	r30, r16
    48e4:	80 83       	st	Z, r24
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	a2 83       	std	Z+2, r26	; 0x02
    48ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ec:	fe 01       	movw	r30, r28
    48ee:	e9 58       	subi	r30, 0x89	; 137
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	60 81       	ld	r22, Z
    48f4:	71 81       	ldd	r23, Z+1	; 0x01
    48f6:	82 81       	ldd	r24, Z+2	; 0x02
    48f8:	93 81       	ldd	r25, Z+3	; 0x03
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e8       	ldi	r20, 0x80	; 128
    4900:	5f e3       	ldi	r21, 0x3F	; 63
    4902:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4906:	88 23       	and	r24, r24
    4908:	44 f4       	brge	.+16     	; 0x491a <alignment+0xdba>
		__ticks = 1;
    490a:	fe 01       	movw	r30, r28
    490c:	eb 58       	subi	r30, 0x8B	; 139
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	80 83       	st	Z, r24
    4918:	64 c0       	rjmp	.+200    	; 0x49e2 <alignment+0xe82>
	else if (__tmp > 65535)
    491a:	fe 01       	movw	r30, r28
    491c:	e9 58       	subi	r30, 0x89	; 137
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	60 81       	ld	r22, Z
    4922:	71 81       	ldd	r23, Z+1	; 0x01
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	93 81       	ldd	r25, Z+3	; 0x03
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	3f ef       	ldi	r19, 0xFF	; 255
    492c:	4f e7       	ldi	r20, 0x7F	; 127
    492e:	57 e4       	ldi	r21, 0x47	; 71
    4930:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4934:	18 16       	cp	r1, r24
    4936:	0c f0       	brlt	.+2      	; 0x493a <alignment+0xdda>
    4938:	43 c0       	rjmp	.+134    	; 0x49c0 <alignment+0xe60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493a:	fe 01       	movw	r30, r28
    493c:	e5 58       	subi	r30, 0x85	; 133
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	60 81       	ld	r22, Z
    4942:	71 81       	ldd	r23, Z+1	; 0x01
    4944:	82 81       	ldd	r24, Z+2	; 0x02
    4946:	93 81       	ldd	r25, Z+3	; 0x03
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e2       	ldi	r20, 0x20	; 32
    494e:	51 e4       	ldi	r21, 0x41	; 65
    4950:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	8e 01       	movw	r16, r28
    495a:	0b 58       	subi	r16, 0x8B	; 139
    495c:	1f 4f       	sbci	r17, 0xFF	; 255
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	1f c0       	rjmp	.+62     	; 0x49b0 <alignment+0xe50>
    4972:	fe 01       	movw	r30, r28
    4974:	ed 58       	subi	r30, 0x8D	; 141
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	80 e7       	ldi	r24, 0x70	; 112
    497a:	91 e0       	ldi	r25, 0x01	; 1
    497c:	91 83       	std	Z+1, r25	; 0x01
    497e:	80 83       	st	Z, r24
    4980:	fe 01       	movw	r30, r28
    4982:	ed 58       	subi	r30, 0x8D	; 141
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	80 81       	ld	r24, Z
    4988:	91 81       	ldd	r25, Z+1	; 0x01
    498a:	01 97       	sbiw	r24, 0x01	; 1
    498c:	f1 f7       	brne	.-4      	; 0x498a <alignment+0xe2a>
    498e:	fe 01       	movw	r30, r28
    4990:	ed 58       	subi	r30, 0x8D	; 141
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4998:	de 01       	movw	r26, r28
    499a:	ab 58       	subi	r26, 0x8B	; 139
    499c:	bf 4f       	sbci	r27, 0xFF	; 255
    499e:	fe 01       	movw	r30, r28
    49a0:	eb 58       	subi	r30, 0x8B	; 139
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	80 81       	ld	r24, Z
    49a6:	91 81       	ldd	r25, Z+1	; 0x01
    49a8:	01 97       	sbiw	r24, 0x01	; 1
    49aa:	11 96       	adiw	r26, 0x01	; 1
    49ac:	9c 93       	st	X, r25
    49ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b0:	fe 01       	movw	r30, r28
    49b2:	eb 58       	subi	r30, 0x8B	; 139
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	80 81       	ld	r24, Z
    49b8:	91 81       	ldd	r25, Z+1	; 0x01
    49ba:	00 97       	sbiw	r24, 0x00	; 0
    49bc:	d1 f6       	brne	.-76     	; 0x4972 <alignment+0xe12>
    49be:	0a c9       	rjmp	.-3564   	; 0x3bd4 <alignment+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c0:	8e 01       	movw	r16, r28
    49c2:	0b 58       	subi	r16, 0x8B	; 139
    49c4:	1f 4f       	sbci	r17, 0xFF	; 255
    49c6:	fe 01       	movw	r30, r28
    49c8:	e9 58       	subi	r30, 0x89	; 137
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	60 81       	ld	r22, Z
    49ce:	71 81       	ldd	r23, Z+1	; 0x01
    49d0:	82 81       	ldd	r24, Z+2	; 0x02
    49d2:	93 81       	ldd	r25, Z+3	; 0x03
    49d4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	f8 01       	movw	r30, r16
    49de:	91 83       	std	Z+1, r25	; 0x01
    49e0:	80 83       	st	Z, r24
    49e2:	de 01       	movw	r26, r28
    49e4:	af 58       	subi	r26, 0x8F	; 143
    49e6:	bf 4f       	sbci	r27, 0xFF	; 255
    49e8:	fe 01       	movw	r30, r28
    49ea:	eb 58       	subi	r30, 0x8B	; 139
    49ec:	ff 4f       	sbci	r31, 0xFF	; 255
    49ee:	80 81       	ld	r24, Z
    49f0:	91 81       	ldd	r25, Z+1	; 0x01
    49f2:	11 96       	adiw	r26, 0x01	; 1
    49f4:	9c 93       	st	X, r25
    49f6:	8e 93       	st	-X, r24
    49f8:	fe 01       	movw	r30, r28
    49fa:	ef 58       	subi	r30, 0x8F	; 143
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	91 81       	ldd	r25, Z+1	; 0x01
    4a02:	01 97       	sbiw	r24, 0x01	; 1
    4a04:	f1 f7       	brne	.-4      	; 0x4a02 <alignment+0xea2>
    4a06:	fe 01       	movw	r30, r28
    4a08:	ef 58       	subi	r30, 0x8F	; 143
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	91 83       	std	Z+1, r25	; 0x01
    4a0e:	80 83       	st	Z, r24
    4a10:	e1 c8       	rjmp	.-3646   	; 0x3bd4 <alignment+0x74>
        	_delay_ms(DELAY);
        }
    	/* Bot is misalinged and has turned right a bit */
		else if ((Left_Sharp_Sensor < LEFT_THRESHOLD_min)
    4a12:	80 91 7e 04 	lds	r24, 0x047E
    4a16:	8b 36       	cpi	r24, 0x6B	; 107
    4a18:	08 f0       	brcs	.+2      	; 0x4a1c <alignment+0xebc>
    4a1a:	6a c3       	rjmp	.+1748   	; 0x50f0 <alignment+0x1590>
    4a1c:	80 91 7e 04 	lds	r24, 0x047E
    4a20:	83 33       	cpi	r24, 0x33	; 51
    4a22:	08 f4       	brcc	.+2      	; 0x4a26 <alignment+0xec6>
    4a24:	65 c3       	rjmp	.+1738   	; 0x50f0 <alignment+0x1590>
			 &&  (Left_Sharp_Sensor > NO_TROUGH_THRESHOLD))
    	{
        	lcd_cursor(1,1);
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	61 e0       	ldi	r22, 0x01	; 1
    4a2a:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
            soft_right_degrees(ROTATE);
    4a2e:	85 e0       	ldi	r24, 0x05	; 5
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <soft_right_degrees>
        	stop();
    4a36:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	e3 59       	subi	r30, 0x93	; 147
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	aa ef       	ldi	r26, 0xFA	; 250
    4a46:	b3 e4       	ldi	r27, 0x43	; 67
    4a48:	80 83       	st	Z, r24
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	a2 83       	std	Z+2, r26	; 0x02
    4a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a50:	8e 01       	movw	r16, r28
    4a52:	07 59       	subi	r16, 0x97	; 151
    4a54:	1f 4f       	sbci	r17, 0xFF	; 255
    4a56:	fe 01       	movw	r30, r28
    4a58:	e3 59       	subi	r30, 0x93	; 147
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	60 81       	ld	r22, Z
    4a5e:	71 81       	ldd	r23, Z+1	; 0x01
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	26 e6       	ldi	r18, 0x66	; 102
    4a66:	36 e6       	ldi	r19, 0x66	; 102
    4a68:	46 e6       	ldi	r20, 0x66	; 102
    4a6a:	55 e4       	ldi	r21, 0x45	; 69
    4a6c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	f8 01       	movw	r30, r16
    4a76:	80 83       	st	Z, r24
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	a2 83       	std	Z+2, r26	; 0x02
    4a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a7e:	fe 01       	movw	r30, r28
    4a80:	e7 59       	subi	r30, 0x97	; 151
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	60 81       	ld	r22, Z
    4a86:	71 81       	ldd	r23, Z+1	; 0x01
    4a88:	82 81       	ldd	r24, Z+2	; 0x02
    4a8a:	93 81       	ldd	r25, Z+3	; 0x03
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	40 e8       	ldi	r20, 0x80	; 128
    4a92:	5f e3       	ldi	r21, 0x3F	; 63
    4a94:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4a98:	88 23       	and	r24, r24
    4a9a:	44 f4       	brge	.+16     	; 0x4aac <alignment+0xf4c>
		__ticks = 1;
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e9 59       	subi	r30, 0x99	; 153
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	91 83       	std	Z+1, r25	; 0x01
    4aa8:	80 83       	st	Z, r24
    4aaa:	64 c0       	rjmp	.+200    	; 0x4b74 <alignment+0x1014>
	else if (__tmp > 65535)
    4aac:	fe 01       	movw	r30, r28
    4aae:	e7 59       	subi	r30, 0x97	; 151
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	60 81       	ld	r22, Z
    4ab4:	71 81       	ldd	r23, Z+1	; 0x01
    4ab6:	82 81       	ldd	r24, Z+2	; 0x02
    4ab8:	93 81       	ldd	r25, Z+3	; 0x03
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	3f ef       	ldi	r19, 0xFF	; 255
    4abe:	4f e7       	ldi	r20, 0x7F	; 127
    4ac0:	57 e4       	ldi	r21, 0x47	; 71
    4ac2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4ac6:	18 16       	cp	r1, r24
    4ac8:	0c f0       	brlt	.+2      	; 0x4acc <alignment+0xf6c>
    4aca:	43 c0       	rjmp	.+134    	; 0x4b52 <alignment+0xff2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4acc:	fe 01       	movw	r30, r28
    4ace:	e3 59       	subi	r30, 0x93	; 147
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	60 81       	ld	r22, Z
    4ad4:	71 81       	ldd	r23, Z+1	; 0x01
    4ad6:	82 81       	ldd	r24, Z+2	; 0x02
    4ad8:	93 81       	ldd	r25, Z+3	; 0x03
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e2       	ldi	r20, 0x20	; 32
    4ae0:	51 e4       	ldi	r21, 0x41	; 65
    4ae2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	8e 01       	movw	r16, r28
    4aec:	09 59       	subi	r16, 0x99	; 153
    4aee:	1f 4f       	sbci	r17, 0xFF	; 255
    4af0:	bc 01       	movw	r22, r24
    4af2:	cd 01       	movw	r24, r26
    4af4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	f8 01       	movw	r30, r16
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
    4b02:	1f c0       	rjmp	.+62     	; 0x4b42 <alignment+0xfe2>
    4b04:	fe 01       	movw	r30, r28
    4b06:	eb 59       	subi	r30, 0x9B	; 155
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	80 e7       	ldi	r24, 0x70	; 112
    4b0c:	91 e0       	ldi	r25, 0x01	; 1
    4b0e:	91 83       	std	Z+1, r25	; 0x01
    4b10:	80 83       	st	Z, r24
    4b12:	fe 01       	movw	r30, r28
    4b14:	eb 59       	subi	r30, 0x9B	; 155
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	80 81       	ld	r24, Z
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	f1 f7       	brne	.-4      	; 0x4b1c <alignment+0xfbc>
    4b20:	fe 01       	movw	r30, r28
    4b22:	eb 59       	subi	r30, 0x9B	; 155
    4b24:	ff 4f       	sbci	r31, 0xFF	; 255
    4b26:	91 83       	std	Z+1, r25	; 0x01
    4b28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b2a:	de 01       	movw	r26, r28
    4b2c:	a9 59       	subi	r26, 0x99	; 153
    4b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b30:	fe 01       	movw	r30, r28
    4b32:	e9 59       	subi	r30, 0x99	; 153
    4b34:	ff 4f       	sbci	r31, 0xFF	; 255
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	01 97       	sbiw	r24, 0x01	; 1
    4b3c:	11 96       	adiw	r26, 0x01	; 1
    4b3e:	9c 93       	st	X, r25
    4b40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b42:	fe 01       	movw	r30, r28
    4b44:	e9 59       	subi	r30, 0x99	; 153
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	80 81       	ld	r24, Z
    4b4a:	91 81       	ldd	r25, Z+1	; 0x01
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	d1 f6       	brne	.-76     	; 0x4b04 <alignment+0xfa4>
    4b50:	27 c0       	rjmp	.+78     	; 0x4ba0 <alignment+0x1040>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b52:	8e 01       	movw	r16, r28
    4b54:	09 59       	subi	r16, 0x99	; 153
    4b56:	1f 4f       	sbci	r17, 0xFF	; 255
    4b58:	fe 01       	movw	r30, r28
    4b5a:	e7 59       	subi	r30, 0x97	; 151
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	60 81       	ld	r22, Z
    4b60:	71 81       	ldd	r23, Z+1	; 0x01
    4b62:	82 81       	ldd	r24, Z+2	; 0x02
    4b64:	93 81       	ldd	r25, Z+3	; 0x03
    4b66:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	f8 01       	movw	r30, r16
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	80 83       	st	Z, r24
    4b74:	de 01       	movw	r26, r28
    4b76:	ad 59       	subi	r26, 0x9D	; 157
    4b78:	bf 4f       	sbci	r27, 0xFF	; 255
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e9 59       	subi	r30, 0x99	; 153
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	8d 93       	st	X+, r24
    4b86:	9c 93       	st	X, r25
    4b88:	fe 01       	movw	r30, r28
    4b8a:	ed 59       	subi	r30, 0x9D	; 157
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	91 81       	ldd	r25, Z+1	; 0x01
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <alignment+0x1032>
    4b96:	fe 01       	movw	r30, r28
    4b98:	ed 59       	subi	r30, 0x9D	; 157
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	91 83       	std	Z+1, r25	; 0x01
    4b9e:	80 83       	st	Z, r24
        	_delay_ms(DELAY);
            buff = Left_Sharp_Sensor;
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e9 50       	subi	r30, 0x09	; 9
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	80 91 7e 04 	lds	r24, 0x047E
    4baa:	80 83       	st	Z, r24

        	Left_Temp_Sharp_Sensor = ADC_Conversion(9);
    4bac:	89 e0       	ldi	r24, 0x09	; 9
    4bae:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	ea 50       	subi	r30, 0x0A	; 10
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 83       	st	Z, r24

            if (Left_Temp_Sharp_Sensor < buff)
    4bba:	fe 01       	movw	r30, r28
    4bbc:	ea 50       	subi	r30, 0x0A	; 10
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	de 01       	movw	r26, r28
    4bc2:	a9 50       	subi	r26, 0x09	; 9
    4bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc6:	90 81       	ld	r25, Z
    4bc8:	8c 91       	ld	r24, X
    4bca:	98 17       	cp	r25, r24
    4bcc:	08 f0       	brcs	.+2      	; 0x4bd0 <alignment+0x1070>
    4bce:	82 c1       	rjmp	.+772    	; 0x4ed4 <alignment+0x1374>
            {
        	    lcd_cursor(1,1);
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	61 e0       	ldi	r22, 0x01	; 1
    4bd4:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
                lcd_string("Reverse left rotate");
    4bd8:	83 ef       	ldi	r24, 0xF3	; 243
    4bda:	92 e0       	ldi	r25, 0x02	; 2
    4bdc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
                soft_left_2_degrees(ROTATE_MORE);
    4be0:	8a e0       	ldi	r24, 0x0A	; 10
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <soft_left_2_degrees>
                stop();
    4be8:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4bec:	fe 01       	movw	r30, r28
    4bee:	e1 5a       	subi	r30, 0xA1	; 161
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	aa ef       	ldi	r26, 0xFA	; 250
    4bf8:	b3 e4       	ldi	r27, 0x43	; 67
    4bfa:	80 83       	st	Z, r24
    4bfc:	91 83       	std	Z+1, r25	; 0x01
    4bfe:	a2 83       	std	Z+2, r26	; 0x02
    4c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c02:	8e 01       	movw	r16, r28
    4c04:	05 5a       	subi	r16, 0xA5	; 165
    4c06:	1f 4f       	sbci	r17, 0xFF	; 255
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e1 5a       	subi	r30, 0xA1	; 161
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	60 81       	ld	r22, Z
    4c10:	71 81       	ldd	r23, Z+1	; 0x01
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	93 81       	ldd	r25, Z+3	; 0x03
    4c16:	26 e6       	ldi	r18, 0x66	; 102
    4c18:	36 e6       	ldi	r19, 0x66	; 102
    4c1a:	46 e6       	ldi	r20, 0x66	; 102
    4c1c:	55 e4       	ldi	r21, 0x45	; 69
    4c1e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	f8 01       	movw	r30, r16
    4c28:	80 83       	st	Z, r24
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	a2 83       	std	Z+2, r26	; 0x02
    4c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c30:	fe 01       	movw	r30, r28
    4c32:	e5 5a       	subi	r30, 0xA5	; 165
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	60 81       	ld	r22, Z
    4c38:	71 81       	ldd	r23, Z+1	; 0x01
    4c3a:	82 81       	ldd	r24, Z+2	; 0x02
    4c3c:	93 81       	ldd	r25, Z+3	; 0x03
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	40 e8       	ldi	r20, 0x80	; 128
    4c44:	5f e3       	ldi	r21, 0x3F	; 63
    4c46:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4c4a:	88 23       	and	r24, r24
    4c4c:	44 f4       	brge	.+16     	; 0x4c5e <alignment+0x10fe>
		__ticks = 1;
    4c4e:	fe 01       	movw	r30, r28
    4c50:	e7 5a       	subi	r30, 0xA7	; 167
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	91 83       	std	Z+1, r25	; 0x01
    4c5a:	80 83       	st	Z, r24
    4c5c:	64 c0       	rjmp	.+200    	; 0x4d26 <alignment+0x11c6>
	else if (__tmp > 65535)
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e5 5a       	subi	r30, 0xA5	; 165
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	60 81       	ld	r22, Z
    4c66:	71 81       	ldd	r23, Z+1	; 0x01
    4c68:	82 81       	ldd	r24, Z+2	; 0x02
    4c6a:	93 81       	ldd	r25, Z+3	; 0x03
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	3f ef       	ldi	r19, 0xFF	; 255
    4c70:	4f e7       	ldi	r20, 0x7F	; 127
    4c72:	57 e4       	ldi	r21, 0x47	; 71
    4c74:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4c78:	18 16       	cp	r1, r24
    4c7a:	0c f0       	brlt	.+2      	; 0x4c7e <alignment+0x111e>
    4c7c:	43 c0       	rjmp	.+134    	; 0x4d04 <alignment+0x11a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e1 5a       	subi	r30, 0xA1	; 161
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e2       	ldi	r20, 0x20	; 32
    4c92:	51 e4       	ldi	r21, 0x41	; 65
    4c94:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	8e 01       	movw	r16, r28
    4c9e:	07 5a       	subi	r16, 0xA7	; 167
    4ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca2:	bc 01       	movw	r22, r24
    4ca4:	cd 01       	movw	r24, r26
    4ca6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	f8 01       	movw	r30, r16
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	1f c0       	rjmp	.+62     	; 0x4cf4 <alignment+0x1194>
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e9 5a       	subi	r30, 0xA9	; 169
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	80 e7       	ldi	r24, 0x70	; 112
    4cbe:	91 e0       	ldi	r25, 0x01	; 1
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	80 83       	st	Z, r24
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e9 5a       	subi	r30, 0xA9	; 169
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	80 81       	ld	r24, Z
    4ccc:	91 81       	ldd	r25, Z+1	; 0x01
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	f1 f7       	brne	.-4      	; 0x4cce <alignment+0x116e>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e9 5a       	subi	r30, 0xA9	; 169
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	91 83       	std	Z+1, r25	; 0x01
    4cda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cdc:	de 01       	movw	r26, r28
    4cde:	a7 5a       	subi	r26, 0xA7	; 167
    4ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e7 5a       	subi	r30, 0xA7	; 167
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	80 81       	ld	r24, Z
    4cea:	91 81       	ldd	r25, Z+1	; 0x01
    4cec:	01 97       	sbiw	r24, 0x01	; 1
    4cee:	11 96       	adiw	r26, 0x01	; 1
    4cf0:	9c 93       	st	X, r25
    4cf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf4:	fe 01       	movw	r30, r28
    4cf6:	e7 5a       	subi	r30, 0xA7	; 167
    4cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfa:	80 81       	ld	r24, Z
    4cfc:	91 81       	ldd	r25, Z+1	; 0x01
    4cfe:	00 97       	sbiw	r24, 0x00	; 0
    4d00:	d1 f6       	brne	.-76     	; 0x4cb6 <alignment+0x1156>
    4d02:	27 c0       	rjmp	.+78     	; 0x4d52 <alignment+0x11f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d04:	8e 01       	movw	r16, r28
    4d06:	07 5a       	subi	r16, 0xA7	; 167
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e5 5a       	subi	r30, 0xA5	; 165
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	60 81       	ld	r22, Z
    4d12:	71 81       	ldd	r23, Z+1	; 0x01
    4d14:	82 81       	ldd	r24, Z+2	; 0x02
    4d16:	93 81       	ldd	r25, Z+3	; 0x03
    4d18:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	f8 01       	movw	r30, r16
    4d22:	91 83       	std	Z+1, r25	; 0x01
    4d24:	80 83       	st	Z, r24
    4d26:	de 01       	movw	r26, r28
    4d28:	ab 5a       	subi	r26, 0xAB	; 171
    4d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	e7 5a       	subi	r30, 0xA7	; 167
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	8d 93       	st	X+, r24
    4d38:	9c 93       	st	X, r25
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	eb 5a       	subi	r30, 0xAB	; 171
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	f1 f7       	brne	.-4      	; 0x4d44 <alignment+0x11e4>
    4d48:	fe 01       	movw	r30, r28
    4d4a:	eb 5a       	subi	r30, 0xAB	; 171
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	80 83       	st	Z, r24
            	_delay_ms(DELAY);
                forward_mm(10);
    4d52:	8a e0       	ldi	r24, 0x0A	; 10
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <forward_mm>
                stop();
    4d5a:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4d5e:	fe 01       	movw	r30, r28
    4d60:	ef 5a       	subi	r30, 0xAF	; 175
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	aa ef       	ldi	r26, 0xFA	; 250
    4d6a:	b3 e4       	ldi	r27, 0x43	; 67
    4d6c:	80 83       	st	Z, r24
    4d6e:	91 83       	std	Z+1, r25	; 0x01
    4d70:	a2 83       	std	Z+2, r26	; 0x02
    4d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d74:	8e 01       	movw	r16, r28
    4d76:	03 5b       	subi	r16, 0xB3	; 179
    4d78:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	ef 5a       	subi	r30, 0xAF	; 175
    4d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d80:	60 81       	ld	r22, Z
    4d82:	71 81       	ldd	r23, Z+1	; 0x01
    4d84:	82 81       	ldd	r24, Z+2	; 0x02
    4d86:	93 81       	ldd	r25, Z+3	; 0x03
    4d88:	26 e6       	ldi	r18, 0x66	; 102
    4d8a:	36 e6       	ldi	r19, 0x66	; 102
    4d8c:	46 e6       	ldi	r20, 0x66	; 102
    4d8e:	55 e4       	ldi	r21, 0x45	; 69
    4d90:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4d94:	dc 01       	movw	r26, r24
    4d96:	cb 01       	movw	r24, r22
    4d98:	f8 01       	movw	r30, r16
    4d9a:	80 83       	st	Z, r24
    4d9c:	91 83       	std	Z+1, r25	; 0x01
    4d9e:	a2 83       	std	Z+2, r26	; 0x02
    4da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4da2:	fe 01       	movw	r30, r28
    4da4:	e3 5b       	subi	r30, 0xB3	; 179
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	60 81       	ld	r22, Z
    4daa:	71 81       	ldd	r23, Z+1	; 0x01
    4dac:	82 81       	ldd	r24, Z+2	; 0x02
    4dae:	93 81       	ldd	r25, Z+3	; 0x03
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	40 e8       	ldi	r20, 0x80	; 128
    4db6:	5f e3       	ldi	r21, 0x3F	; 63
    4db8:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4dbc:	88 23       	and	r24, r24
    4dbe:	44 f4       	brge	.+16     	; 0x4dd0 <alignment+0x1270>
		__ticks = 1;
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e5 5b       	subi	r30, 0xB5	; 181
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	91 83       	std	Z+1, r25	; 0x01
    4dcc:	80 83       	st	Z, r24
    4dce:	64 c0       	rjmp	.+200    	; 0x4e98 <alignment+0x1338>
	else if (__tmp > 65535)
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	e3 5b       	subi	r30, 0xB3	; 179
    4dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd6:	60 81       	ld	r22, Z
    4dd8:	71 81       	ldd	r23, Z+1	; 0x01
    4dda:	82 81       	ldd	r24, Z+2	; 0x02
    4ddc:	93 81       	ldd	r25, Z+3	; 0x03
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	3f ef       	ldi	r19, 0xFF	; 255
    4de2:	4f e7       	ldi	r20, 0x7F	; 127
    4de4:	57 e4       	ldi	r21, 0x47	; 71
    4de6:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4dea:	18 16       	cp	r1, r24
    4dec:	0c f0       	brlt	.+2      	; 0x4df0 <alignment+0x1290>
    4dee:	43 c0       	rjmp	.+134    	; 0x4e76 <alignment+0x1316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4df0:	fe 01       	movw	r30, r28
    4df2:	ef 5a       	subi	r30, 0xAF	; 175
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	60 81       	ld	r22, Z
    4df8:	71 81       	ldd	r23, Z+1	; 0x01
    4dfa:	82 81       	ldd	r24, Z+2	; 0x02
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	40 e2       	ldi	r20, 0x20	; 32
    4e04:	51 e4       	ldi	r21, 0x41	; 65
    4e06:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	8e 01       	movw	r16, r28
    4e10:	05 5b       	subi	r16, 0xB5	; 181
    4e12:	1f 4f       	sbci	r17, 0xFF	; 255
    4e14:	bc 01       	movw	r22, r24
    4e16:	cd 01       	movw	r24, r26
    4e18:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	cb 01       	movw	r24, r22
    4e20:	f8 01       	movw	r30, r16
    4e22:	91 83       	std	Z+1, r25	; 0x01
    4e24:	80 83       	st	Z, r24
    4e26:	1f c0       	rjmp	.+62     	; 0x4e66 <alignment+0x1306>
    4e28:	fe 01       	movw	r30, r28
    4e2a:	e7 5b       	subi	r30, 0xB7	; 183
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	80 e7       	ldi	r24, 0x70	; 112
    4e30:	91 e0       	ldi	r25, 0x01	; 1
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	80 83       	st	Z, r24
    4e36:	fe 01       	movw	r30, r28
    4e38:	e7 5b       	subi	r30, 0xB7	; 183
    4e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3c:	80 81       	ld	r24, Z
    4e3e:	91 81       	ldd	r25, Z+1	; 0x01
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	f1 f7       	brne	.-4      	; 0x4e40 <alignment+0x12e0>
    4e44:	fe 01       	movw	r30, r28
    4e46:	e7 5b       	subi	r30, 0xB7	; 183
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	91 83       	std	Z+1, r25	; 0x01
    4e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e4e:	de 01       	movw	r26, r28
    4e50:	a5 5b       	subi	r26, 0xB5	; 181
    4e52:	bf 4f       	sbci	r27, 0xFF	; 255
    4e54:	fe 01       	movw	r30, r28
    4e56:	e5 5b       	subi	r30, 0xB5	; 181
    4e58:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5a:	80 81       	ld	r24, Z
    4e5c:	91 81       	ldd	r25, Z+1	; 0x01
    4e5e:	01 97       	sbiw	r24, 0x01	; 1
    4e60:	11 96       	adiw	r26, 0x01	; 1
    4e62:	9c 93       	st	X, r25
    4e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e66:	fe 01       	movw	r30, r28
    4e68:	e5 5b       	subi	r30, 0xB5	; 181
    4e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6c:	80 81       	ld	r24, Z
    4e6e:	91 81       	ldd	r25, Z+1	; 0x01
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	d1 f6       	brne	.-76     	; 0x4e28 <alignment+0x12c8>
    4e74:	28 c0       	rjmp	.+80     	; 0x4ec6 <alignment+0x1366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e76:	8e 01       	movw	r16, r28
    4e78:	05 5b       	subi	r16, 0xB5	; 181
    4e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e3 5b       	subi	r30, 0xB3	; 179
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	f8 01       	movw	r30, r16
    4e94:	91 83       	std	Z+1, r25	; 0x01
    4e96:	80 83       	st	Z, r24
    4e98:	de 01       	movw	r26, r28
    4e9a:	a9 5b       	subi	r26, 0xB9	; 185
    4e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	e5 5b       	subi	r30, 0xB5	; 181
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	80 81       	ld	r24, Z
    4ea6:	91 81       	ldd	r25, Z+1	; 0x01
    4ea8:	11 96       	adiw	r26, 0x01	; 1
    4eaa:	9c 93       	st	X, r25
    4eac:	8e 93       	st	-X, r24
    4eae:	fe 01       	movw	r30, r28
    4eb0:	e9 5b       	subi	r30, 0xB9	; 185
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	80 81       	ld	r24, Z
    4eb6:	91 81       	ldd	r25, Z+1	; 0x01
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <alignment+0x1358>
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e9 5b       	subi	r30, 0xB9	; 185
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	91 83       	std	Z+1, r25	; 0x01
    4ec4:	80 83       	st	Z, r24
                _delay_ms(DELAY);
                move_flag = 1;
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	ef 50       	subi	r30, 0x0F	; 15
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	91 83       	std	Z+1, r25	; 0x01
    4ed2:	80 83       	st	Z, r24
            }

            if (move_flag == 0)
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	ef 50       	subi	r30, 0x0F	; 15
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	80 81       	ld	r24, Z
    4edc:	91 81       	ldd	r25, Z+1	; 0x01
    4ede:	00 97       	sbiw	r24, 0x00	; 0
    4ee0:	09 f0       	breq	.+2      	; 0x4ee4 <alignment+0x1384>
    4ee2:	8b c0       	rjmp	.+278    	; 0x4ffa <alignment+0x149a>
            {
				back_mm(10);
    4ee4:	8a e0       	ldi	r24, 0x0A	; 10
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <back_mm>
				stop();
    4eec:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4ef0:	fe 01       	movw	r30, r28
    4ef2:	ed 5b       	subi	r30, 0xBD	; 189
    4ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	aa ef       	ldi	r26, 0xFA	; 250
    4efc:	b3 e4       	ldi	r27, 0x43	; 67
    4efe:	80 83       	st	Z, r24
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	a2 83       	std	Z+2, r26	; 0x02
    4f04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f06:	8e 01       	movw	r16, r28
    4f08:	01 5c       	subi	r16, 0xC1	; 193
    4f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	ed 5b       	subi	r30, 0xBD	; 189
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	26 e6       	ldi	r18, 0x66	; 102
    4f1c:	36 e6       	ldi	r19, 0x66	; 102
    4f1e:	46 e6       	ldi	r20, 0x66	; 102
    4f20:	55 e4       	ldi	r21, 0x45	; 69
    4f22:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4f26:	dc 01       	movw	r26, r24
    4f28:	cb 01       	movw	r24, r22
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	80 83       	st	Z, r24
    4f2e:	91 83       	std	Z+1, r25	; 0x01
    4f30:	a2 83       	std	Z+2, r26	; 0x02
    4f32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f34:	fe 01       	movw	r30, r28
    4f36:	ff 96       	adiw	r30, 0x3f	; 63
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e8       	ldi	r20, 0x80	; 128
    4f46:	5f e3       	ldi	r21, 0x3F	; 63
    4f48:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    4f4c:	88 23       	and	r24, r24
    4f4e:	2c f4       	brge	.+10     	; 0x4f5a <alignment+0x13fa>
		__ticks = 1;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	9e af       	std	Y+62, r25	; 0x3e
    4f56:	8d af       	std	Y+61, r24	; 0x3d
    4f58:	46 c0       	rjmp	.+140    	; 0x4fe6 <alignment+0x1486>
	else if (__tmp > 65535)
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ff 96       	adiw	r30, 0x3f	; 63
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	3f ef       	ldi	r19, 0xFF	; 255
    4f6a:	4f e7       	ldi	r20, 0x7F	; 127
    4f6c:	57 e4       	ldi	r21, 0x47	; 71
    4f6e:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    4f72:	18 16       	cp	r1, r24
    4f74:	64 f5       	brge	.+88     	; 0x4fce <alignment+0x146e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f76:	fe 01       	movw	r30, r28
    4f78:	ed 5b       	subi	r30, 0xBD	; 189
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	60 81       	ld	r22, Z
    4f7e:	71 81       	ldd	r23, Z+1	; 0x01
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 e2       	ldi	r20, 0x20	; 32
    4f8a:	51 e4       	ldi	r21, 0x41	; 65
    4f8c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	bc 01       	movw	r22, r24
    4f96:	cd 01       	movw	r24, r26
    4f98:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	9e af       	std	Y+62, r25	; 0x3e
    4fa2:	8d af       	std	Y+61, r24	; 0x3d
    4fa4:	0f c0       	rjmp	.+30     	; 0x4fc4 <alignment+0x1464>
    4fa6:	80 e7       	ldi	r24, 0x70	; 112
    4fa8:	91 e0       	ldi	r25, 0x01	; 1
    4faa:	9c af       	std	Y+60, r25	; 0x3c
    4fac:	8b af       	std	Y+59, r24	; 0x3b
    4fae:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fb2:	01 97       	sbiw	r24, 0x01	; 1
    4fb4:	f1 f7       	brne	.-4      	; 0x4fb2 <alignment+0x1452>
    4fb6:	9c af       	std	Y+60, r25	; 0x3c
    4fb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fba:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fbe:	01 97       	sbiw	r24, 0x01	; 1
    4fc0:	9e af       	std	Y+62, r25	; 0x3e
    4fc2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	69 f7       	brne	.-38     	; 0x4fa6 <alignment+0x1446>
    4fcc:	16 c0       	rjmp	.+44     	; 0x4ffa <alignment+0x149a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fce:	fe 01       	movw	r30, r28
    4fd0:	ff 96       	adiw	r30, 0x3f	; 63
    4fd2:	60 81       	ld	r22, Z
    4fd4:	71 81       	ldd	r23, Z+1	; 0x01
    4fd6:	82 81       	ldd	r24, Z+2	; 0x02
    4fd8:	93 81       	ldd	r25, Z+3	; 0x03
    4fda:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	9e af       	std	Y+62, r25	; 0x3e
    4fe4:	8d af       	std	Y+61, r24	; 0x3d
    4fe6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fe8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fea:	9a af       	std	Y+58, r25	; 0x3a
    4fec:	89 af       	std	Y+57, r24	; 0x39
    4fee:	89 ad       	ldd	r24, Y+57	; 0x39
    4ff0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	f1 f7       	brne	.-4      	; 0x4ff2 <alignment+0x1492>
    4ff6:	9a af       	std	Y+58, r25	; 0x3a
    4ff8:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(DELAY);
            }

        	stop();
    4ffa:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	aa ef       	ldi	r26, 0xFA	; 250
    5004:	b3 e4       	ldi	r27, 0x43	; 67
    5006:	8d ab       	std	Y+53, r24	; 0x35
    5008:	9e ab       	std	Y+54, r25	; 0x36
    500a:	af ab       	std	Y+55, r26	; 0x37
    500c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500e:	6d a9       	ldd	r22, Y+53	; 0x35
    5010:	7e a9       	ldd	r23, Y+54	; 0x36
    5012:	8f a9       	ldd	r24, Y+55	; 0x37
    5014:	98 ad       	ldd	r25, Y+56	; 0x38
    5016:	26 e6       	ldi	r18, 0x66	; 102
    5018:	36 e6       	ldi	r19, 0x66	; 102
    501a:	46 e6       	ldi	r20, 0x66	; 102
    501c:	55 e4       	ldi	r21, 0x45	; 69
    501e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	89 ab       	std	Y+49, r24	; 0x31
    5028:	9a ab       	std	Y+50, r25	; 0x32
    502a:	ab ab       	std	Y+51, r26	; 0x33
    502c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    502e:	69 a9       	ldd	r22, Y+49	; 0x31
    5030:	7a a9       	ldd	r23, Y+50	; 0x32
    5032:	8b a9       	ldd	r24, Y+51	; 0x33
    5034:	9c a9       	ldd	r25, Y+52	; 0x34
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	40 e8       	ldi	r20, 0x80	; 128
    503c:	5f e3       	ldi	r21, 0x3F	; 63
    503e:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    5042:	88 23       	and	r24, r24
    5044:	2c f4       	brge	.+10     	; 0x5050 <alignment+0x14f0>
		__ticks = 1;
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	98 ab       	std	Y+48, r25	; 0x30
    504c:	8f a7       	std	Y+47, r24	; 0x2f
    504e:	3f c0       	rjmp	.+126    	; 0x50ce <alignment+0x156e>
	else if (__tmp > 65535)
    5050:	69 a9       	ldd	r22, Y+49	; 0x31
    5052:	7a a9       	ldd	r23, Y+50	; 0x32
    5054:	8b a9       	ldd	r24, Y+51	; 0x33
    5056:	9c a9       	ldd	r25, Y+52	; 0x34
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	3f ef       	ldi	r19, 0xFF	; 255
    505c:	4f e7       	ldi	r20, 0x7F	; 127
    505e:	57 e4       	ldi	r21, 0x47	; 71
    5060:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5064:	18 16       	cp	r1, r24
    5066:	4c f5       	brge	.+82     	; 0x50ba <alignment+0x155a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5068:	6d a9       	ldd	r22, Y+53	; 0x35
    506a:	7e a9       	ldd	r23, Y+54	; 0x36
    506c:	8f a9       	ldd	r24, Y+55	; 0x37
    506e:	98 ad       	ldd	r25, Y+56	; 0x38
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e2       	ldi	r20, 0x20	; 32
    5076:	51 e4       	ldi	r21, 0x41	; 65
    5078:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	98 ab       	std	Y+48, r25	; 0x30
    508e:	8f a7       	std	Y+47, r24	; 0x2f
    5090:	0f c0       	rjmp	.+30     	; 0x50b0 <alignment+0x1550>
    5092:	80 e7       	ldi	r24, 0x70	; 112
    5094:	91 e0       	ldi	r25, 0x01	; 1
    5096:	9e a7       	std	Y+46, r25	; 0x2e
    5098:	8d a7       	std	Y+45, r24	; 0x2d
    509a:	8d a5       	ldd	r24, Y+45	; 0x2d
    509c:	9e a5       	ldd	r25, Y+46	; 0x2e
    509e:	01 97       	sbiw	r24, 0x01	; 1
    50a0:	f1 f7       	brne	.-4      	; 0x509e <alignment+0x153e>
    50a2:	9e a7       	std	Y+46, r25	; 0x2e
    50a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    50a8:	98 a9       	ldd	r25, Y+48	; 0x30
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	98 ab       	std	Y+48, r25	; 0x30
    50ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    50b2:	98 a9       	ldd	r25, Y+48	; 0x30
    50b4:	00 97       	sbiw	r24, 0x00	; 0
    50b6:	69 f7       	brne	.-38     	; 0x5092 <alignment+0x1532>
    50b8:	14 c0       	rjmp	.+40     	; 0x50e2 <alignment+0x1582>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ba:	69 a9       	ldd	r22, Y+49	; 0x31
    50bc:	7a a9       	ldd	r23, Y+50	; 0x32
    50be:	8b a9       	ldd	r24, Y+51	; 0x33
    50c0:	9c a9       	ldd	r25, Y+52	; 0x34
    50c2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	98 ab       	std	Y+48, r25	; 0x30
    50cc:	8f a7       	std	Y+47, r24	; 0x2f
    50ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    50d0:	98 a9       	ldd	r25, Y+48	; 0x30
    50d2:	9c a7       	std	Y+44, r25	; 0x2c
    50d4:	8b a7       	std	Y+43, r24	; 0x2b
    50d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    50d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    50da:	01 97       	sbiw	r24, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <alignment+0x157a>
    50de:	9c a7       	std	Y+44, r25	; 0x2c
    50e0:	8b a7       	std	Y+43, r24	; 0x2b
        	_delay_ms(DELAY);
            move_flag = 0;
    50e2:	fe 01       	movw	r30, r28
    50e4:	ef 50       	subi	r30, 0x0F	; 15
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	11 82       	std	Z+1, r1	; 0x01
    50ea:	10 82       	st	Z, r1
    50ec:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>
    	}

    	/* Bot is misalinged and has turned left a bit */
        else if ((Left_Sharp_Sensor > LEFT_THRESHOLD_max)
    50f0:	80 91 7e 04 	lds	r24, 0x047E
    50f4:	86 37       	cpi	r24, 0x76	; 118
    50f6:	08 f4       	brcc	.+2      	; 0x50fa <alignment+0x159a>
    50f8:	88 c0       	rjmp	.+272    	; 0x520a <alignment+0x16aa>
    50fa:	80 91 7f 04 	lds	r24, 0x047F
    50fe:	83 33       	cpi	r24, 0x33	; 51
    5100:	08 f4       	brcc	.+2      	; 0x5104 <alignment+0x15a4>
    5102:	83 c0       	rjmp	.+262    	; 0x520a <alignment+0x16aa>
             &&  (Right_Sharp_Sensor > NO_TROUGH_THRESHOLD))
    	{
        	lcd_cursor(1,1);
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	61 e0       	ldi	r22, 0x01	; 1
    5108:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
            lcd_string("soft right rotate");
    510c:	87 e0       	ldi	r24, 0x07	; 7
    510e:	93 e0       	ldi	r25, 0x03	; 3
    5110:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
            soft_right_degrees(ROTATE);
    5114:	85 e0       	ldi	r24, 0x05	; 5
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <soft_right_degrees>
        	stop();
    511c:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	aa ef       	ldi	r26, 0xFA	; 250
    5126:	b3 e4       	ldi	r27, 0x43	; 67
    5128:	8f a3       	std	Y+39, r24	; 0x27
    512a:	98 a7       	std	Y+40, r25	; 0x28
    512c:	a9 a7       	std	Y+41, r26	; 0x29
    512e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5130:	6f a1       	ldd	r22, Y+39	; 0x27
    5132:	78 a5       	ldd	r23, Y+40	; 0x28
    5134:	89 a5       	ldd	r24, Y+41	; 0x29
    5136:	9a a5       	ldd	r25, Y+42	; 0x2a
    5138:	26 e6       	ldi	r18, 0x66	; 102
    513a:	36 e6       	ldi	r19, 0x66	; 102
    513c:	46 e6       	ldi	r20, 0x66	; 102
    513e:	55 e4       	ldi	r21, 0x45	; 69
    5140:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	8b a3       	std	Y+35, r24	; 0x23
    514a:	9c a3       	std	Y+36, r25	; 0x24
    514c:	ad a3       	std	Y+37, r26	; 0x25
    514e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5150:	6b a1       	ldd	r22, Y+35	; 0x23
    5152:	7c a1       	ldd	r23, Y+36	; 0x24
    5154:	8d a1       	ldd	r24, Y+37	; 0x25
    5156:	9e a1       	ldd	r25, Y+38	; 0x26
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e8       	ldi	r20, 0x80	; 128
    515e:	5f e3       	ldi	r21, 0x3F	; 63
    5160:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    5164:	88 23       	and	r24, r24
    5166:	2c f4       	brge	.+10     	; 0x5172 <alignment+0x1612>
		__ticks = 1;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	9a a3       	std	Y+34, r25	; 0x22
    516e:	89 a3       	std	Y+33, r24	; 0x21
    5170:	40 c0       	rjmp	.+128    	; 0x51f2 <alignment+0x1692>
	else if (__tmp > 65535)
    5172:	6b a1       	ldd	r22, Y+35	; 0x23
    5174:	7c a1       	ldd	r23, Y+36	; 0x24
    5176:	8d a1       	ldd	r24, Y+37	; 0x25
    5178:	9e a1       	ldd	r25, Y+38	; 0x26
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	3f ef       	ldi	r19, 0xFF	; 255
    517e:	4f e7       	ldi	r20, 0x7F	; 127
    5180:	57 e4       	ldi	r21, 0x47	; 71
    5182:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5186:	18 16       	cp	r1, r24
    5188:	54 f5       	brge	.+84     	; 0x51de <alignment+0x167e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518a:	6f a1       	ldd	r22, Y+39	; 0x27
    518c:	78 a5       	ldd	r23, Y+40	; 0x28
    518e:	89 a5       	ldd	r24, Y+41	; 0x29
    5190:	9a a5       	ldd	r25, Y+42	; 0x2a
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e2       	ldi	r20, 0x20	; 32
    5198:	51 e4       	ldi	r21, 0x41	; 65
    519a:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	bc 01       	movw	r22, r24
    51a4:	cd 01       	movw	r24, r26
    51a6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	9a a3       	std	Y+34, r25	; 0x22
    51b0:	89 a3       	std	Y+33, r24	; 0x21
    51b2:	0f c0       	rjmp	.+30     	; 0x51d2 <alignment+0x1672>
    51b4:	80 e7       	ldi	r24, 0x70	; 112
    51b6:	91 e0       	ldi	r25, 0x01	; 1
    51b8:	98 a3       	std	Y+32, r25	; 0x20
    51ba:	8f 8f       	std	Y+31, r24	; 0x1f
    51bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51be:	98 a1       	ldd	r25, Y+32	; 0x20
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <alignment+0x1660>
    51c4:	98 a3       	std	Y+32, r25	; 0x20
    51c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c8:	89 a1       	ldd	r24, Y+33	; 0x21
    51ca:	9a a1       	ldd	r25, Y+34	; 0x22
    51cc:	01 97       	sbiw	r24, 0x01	; 1
    51ce:	9a a3       	std	Y+34, r25	; 0x22
    51d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d2:	89 a1       	ldd	r24, Y+33	; 0x21
    51d4:	9a a1       	ldd	r25, Y+34	; 0x22
    51d6:	00 97       	sbiw	r24, 0x00	; 0
    51d8:	69 f7       	brne	.-38     	; 0x51b4 <alignment+0x1654>
    51da:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51de:	6b a1       	ldd	r22, Y+35	; 0x23
    51e0:	7c a1       	ldd	r23, Y+36	; 0x24
    51e2:	8d a1       	ldd	r24, Y+37	; 0x25
    51e4:	9e a1       	ldd	r25, Y+38	; 0x26
    51e6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	9a a3       	std	Y+34, r25	; 0x22
    51f0:	89 a3       	std	Y+33, r24	; 0x21
    51f2:	89 a1       	ldd	r24, Y+33	; 0x21
    51f4:	9a a1       	ldd	r25, Y+34	; 0x22
    51f6:	9e 8f       	std	Y+30, r25	; 0x1e
    51f8:	8d 8f       	std	Y+29, r24	; 0x1d
    51fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	f1 f7       	brne	.-4      	; 0x51fe <alignment+0x169e>
    5202:	9e 8f       	std	Y+30, r25	; 0x1e
    5204:	8d 8f       	std	Y+29, r24	; 0x1d
    5206:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>
        	_delay_ms(DELAY);
    	}
        /* Bot has to a vacant space. At vacant space the reading from both
         * the sharp sensors will be less than a threshold value
         */
        else if ((Right_Sharp_Sensor < NO_TROUGH_THRESHOLD)
    520a:	80 91 7f 04 	lds	r24, 0x047F
    520e:	82 33       	cpi	r24, 0x32	; 50
    5210:	30 f0       	brcs	.+12     	; 0x521e <alignment+0x16be>
    5212:	80 91 7e 04 	lds	r24, 0x047E
    5216:	82 33       	cpi	r24, 0x32	; 50
    5218:	10 f0       	brcs	.+4      	; 0x521e <alignment+0x16be>
    521a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>
             ||  (Left_Sharp_Sensor  < NO_TROUGH_THRESHOLD))
   	    {
			retVal = decideWhatToDoOnVacantSpace(pstrVacantSpace);
    521e:	fe 01       	movw	r30, r28
    5220:	e6 50       	subi	r30, 0x06	; 6
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <decideWhatToDoOnVacantSpace>
    522c:	fe 01       	movw	r30, r28
    522e:	e1 51       	subi	r30, 0x11	; 17
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	91 83       	std	Z+1, r25	; 0x01
    5234:	80 83       	st	Z, r24
			clear_lcd();
    5236:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
			my_lcd_string("retVal");
    523a:	8c ea       	ldi	r24, 0xAC	; 172
    523c:	92 e0       	ldi	r25, 0x02	; 2
    523e:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
			my_lcd_print(2,1, retVal, 1);
    5242:	fe 01       	movw	r30, r28
    5244:	e1 51       	subi	r30, 0x11	; 17
    5246:	ff 4f       	sbci	r31, 0xFF	; 255
    5248:	20 81       	ld	r18, Z
    524a:	31 81       	ldd	r19, Z+1	; 0x01
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	61 e0       	ldi	r22, 0x01	; 1
    5250:	a9 01       	movw	r20, r18
    5252:	21 e0       	ldi	r18, 0x01	; 1
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>

			if (1 == retVal)
    525a:	fe 01       	movw	r30, r28
    525c:	e1 51       	subi	r30, 0x11	; 17
    525e:	ff 4f       	sbci	r31, 0xFF	; 255
    5260:	80 81       	ld	r24, Z
    5262:	91 81       	ldd	r25, Z+1	; 0x01
    5264:	81 30       	cpi	r24, 0x01	; 1
    5266:	91 05       	cpc	r25, r1
    5268:	09 f0       	breq	.+2      	; 0x526c <alignment+0x170c>
    526a:	83 c0       	rjmp	.+262    	; 0x5372 <alignment+0x1812>
			{
				bCanSowSeed = 1;
    526c:	fe 01       	movw	r30, r28
    526e:	ed 50       	subi	r30, 0x0D	; 13
    5270:	ff 4f       	sbci	r31, 0xFF	; 255
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	80 83       	st	Z, r24
				clear_lcd();
    5276:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
				my_lcd_string("SOW SEEDS");
    527a:	89 e1       	ldi	r24, 0x19	; 25
    527c:	93 e0       	ldi	r25, 0x03	; 3
    527e:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	aa ef       	ldi	r26, 0xFA	; 250
    5288:	b3 e4       	ldi	r27, 0x43	; 67
    528a:	89 8f       	std	Y+25, r24	; 0x19
    528c:	9a 8f       	std	Y+26, r25	; 0x1a
    528e:	ab 8f       	std	Y+27, r26	; 0x1b
    5290:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5292:	69 8d       	ldd	r22, Y+25	; 0x19
    5294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    529a:	26 e6       	ldi	r18, 0x66	; 102
    529c:	36 e6       	ldi	r19, 0x66	; 102
    529e:	46 e6       	ldi	r20, 0x66	; 102
    52a0:	55 e4       	ldi	r21, 0x45	; 69
    52a2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	8d 8b       	std	Y+21, r24	; 0x15
    52ac:	9e 8b       	std	Y+22, r25	; 0x16
    52ae:	af 8b       	std	Y+23, r26	; 0x17
    52b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52b2:	6d 89       	ldd	r22, Y+21	; 0x15
    52b4:	7e 89       	ldd	r23, Y+22	; 0x16
    52b6:	8f 89       	ldd	r24, Y+23	; 0x17
    52b8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	40 e8       	ldi	r20, 0x80	; 128
    52c0:	5f e3       	ldi	r21, 0x3F	; 63
    52c2:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    52c6:	88 23       	and	r24, r24
    52c8:	2c f4       	brge	.+10     	; 0x52d4 <alignment+0x1774>
		__ticks = 1;
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	9c 8b       	std	Y+20, r25	; 0x14
    52d0:	8b 8b       	std	Y+19, r24	; 0x13
    52d2:	3f c0       	rjmp	.+126    	; 0x5352 <alignment+0x17f2>
	else if (__tmp > 65535)
    52d4:	6d 89       	ldd	r22, Y+21	; 0x15
    52d6:	7e 89       	ldd	r23, Y+22	; 0x16
    52d8:	8f 89       	ldd	r24, Y+23	; 0x17
    52da:	98 8d       	ldd	r25, Y+24	; 0x18
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	3f ef       	ldi	r19, 0xFF	; 255
    52e0:	4f e7       	ldi	r20, 0x7F	; 127
    52e2:	57 e4       	ldi	r21, 0x47	; 71
    52e4:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    52e8:	18 16       	cp	r1, r24
    52ea:	4c f5       	brge	.+82     	; 0x533e <alignment+0x17de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ec:	69 8d       	ldd	r22, Y+25	; 0x19
    52ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	30 e0       	ldi	r19, 0x00	; 0
    52f8:	40 e2       	ldi	r20, 0x20	; 32
    52fa:	51 e4       	ldi	r21, 0x41	; 65
    52fc:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	bc 01       	movw	r22, r24
    5306:	cd 01       	movw	r24, r26
    5308:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    530c:	dc 01       	movw	r26, r24
    530e:	cb 01       	movw	r24, r22
    5310:	9c 8b       	std	Y+20, r25	; 0x14
    5312:	8b 8b       	std	Y+19, r24	; 0x13
    5314:	0f c0       	rjmp	.+30     	; 0x5334 <alignment+0x17d4>
    5316:	80 e7       	ldi	r24, 0x70	; 112
    5318:	91 e0       	ldi	r25, 0x01	; 1
    531a:	9a 8b       	std	Y+18, r25	; 0x12
    531c:	89 8b       	std	Y+17, r24	; 0x11
    531e:	89 89       	ldd	r24, Y+17	; 0x11
    5320:	9a 89       	ldd	r25, Y+18	; 0x12
    5322:	01 97       	sbiw	r24, 0x01	; 1
    5324:	f1 f7       	brne	.-4      	; 0x5322 <alignment+0x17c2>
    5326:	9a 8b       	std	Y+18, r25	; 0x12
    5328:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532a:	8b 89       	ldd	r24, Y+19	; 0x13
    532c:	9c 89       	ldd	r25, Y+20	; 0x14
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	9c 8b       	std	Y+20, r25	; 0x14
    5332:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5334:	8b 89       	ldd	r24, Y+19	; 0x13
    5336:	9c 89       	ldd	r25, Y+20	; 0x14
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	69 f7       	brne	.-38     	; 0x5316 <alignment+0x17b6>
    533c:	14 c0       	rjmp	.+40     	; 0x5366 <alignment+0x1806>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533e:	6d 89       	ldd	r22, Y+21	; 0x15
    5340:	7e 89       	ldd	r23, Y+22	; 0x16
    5342:	8f 89       	ldd	r24, Y+23	; 0x17
    5344:	98 8d       	ldd	r25, Y+24	; 0x18
    5346:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    534a:	dc 01       	movw	r26, r24
    534c:	cb 01       	movw	r24, r22
    534e:	9c 8b       	std	Y+20, r25	; 0x14
    5350:	8b 8b       	std	Y+19, r24	; 0x13
    5352:	8b 89       	ldd	r24, Y+19	; 0x13
    5354:	9c 89       	ldd	r25, Y+20	; 0x14
    5356:	98 8b       	std	Y+16, r25	; 0x10
    5358:	8f 87       	std	Y+15, r24	; 0x0f
    535a:	8f 85       	ldd	r24, Y+15	; 0x0f
    535c:	98 89       	ldd	r25, Y+16	; 0x10
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	f1 f7       	brne	.-4      	; 0x535e <alignment+0x17fe>
    5362:	98 8b       	std	Y+16, r25	; 0x10
    5364:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DELAY);
				count = 0;
    5366:	fe 01       	movw	r30, r28
    5368:	ec 50       	subi	r30, 0x0C	; 12
    536a:	ff 4f       	sbci	r31, 0xFF	; 255
    536c:	11 82       	std	Z+1, r1	; 0x01
    536e:	10 82       	st	Z, r1
    5370:	7c c0       	rjmp	.+248    	; 0x546a <alignment+0x190a>
			}
			else
			{
				bCanSowSeed = 0;
    5372:	fe 01       	movw	r30, r28
    5374:	ed 50       	subi	r30, 0x0D	; 13
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	10 82       	st	Z, r1
				clear_lcd();
    537a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
				my_lcd_string("STOP SOW SEEDS");
    537e:	83 e2       	ldi	r24, 0x23	; 35
    5380:	93 e0       	ldi	r25, 0x03	; 3
    5382:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	aa ef       	ldi	r26, 0xFA	; 250
    538c:	b3 e4       	ldi	r27, 0x43	; 67
    538e:	8b 87       	std	Y+11, r24	; 0x0b
    5390:	9c 87       	std	Y+12, r25	; 0x0c
    5392:	ad 87       	std	Y+13, r26	; 0x0d
    5394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5396:	6b 85       	ldd	r22, Y+11	; 0x0b
    5398:	7c 85       	ldd	r23, Y+12	; 0x0c
    539a:	8d 85       	ldd	r24, Y+13	; 0x0d
    539c:	9e 85       	ldd	r25, Y+14	; 0x0e
    539e:	26 e6       	ldi	r18, 0x66	; 102
    53a0:	36 e6       	ldi	r19, 0x66	; 102
    53a2:	46 e6       	ldi	r20, 0x66	; 102
    53a4:	55 e4       	ldi	r21, 0x45	; 69
    53a6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    53aa:	dc 01       	movw	r26, r24
    53ac:	cb 01       	movw	r24, r22
    53ae:	8f 83       	std	Y+7, r24	; 0x07
    53b0:	98 87       	std	Y+8, r25	; 0x08
    53b2:	a9 87       	std	Y+9, r26	; 0x09
    53b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53b6:	6f 81       	ldd	r22, Y+7	; 0x07
    53b8:	78 85       	ldd	r23, Y+8	; 0x08
    53ba:	89 85       	ldd	r24, Y+9	; 0x09
    53bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	40 e8       	ldi	r20, 0x80	; 128
    53c4:	5f e3       	ldi	r21, 0x3F	; 63
    53c6:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    53ca:	88 23       	and	r24, r24
    53cc:	2c f4       	brge	.+10     	; 0x53d8 <alignment+0x1878>
		__ticks = 1;
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	9e 83       	std	Y+6, r25	; 0x06
    53d4:	8d 83       	std	Y+5, r24	; 0x05
    53d6:	3f c0       	rjmp	.+126    	; 0x5456 <alignment+0x18f6>
	else if (__tmp > 65535)
    53d8:	6f 81       	ldd	r22, Y+7	; 0x07
    53da:	78 85       	ldd	r23, Y+8	; 0x08
    53dc:	89 85       	ldd	r24, Y+9	; 0x09
    53de:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	3f ef       	ldi	r19, 0xFF	; 255
    53e4:	4f e7       	ldi	r20, 0x7F	; 127
    53e6:	57 e4       	ldi	r21, 0x47	; 71
    53e8:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    53ec:	18 16       	cp	r1, r24
    53ee:	4c f5       	brge	.+82     	; 0x5442 <alignment+0x18e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    53f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    53f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53f8:	20 e0       	ldi	r18, 0x00	; 0
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	40 e2       	ldi	r20, 0x20	; 32
    53fe:	51 e4       	ldi	r21, 0x41	; 65
    5400:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5404:	dc 01       	movw	r26, r24
    5406:	cb 01       	movw	r24, r22
    5408:	bc 01       	movw	r22, r24
    540a:	cd 01       	movw	r24, r26
    540c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5410:	dc 01       	movw	r26, r24
    5412:	cb 01       	movw	r24, r22
    5414:	9e 83       	std	Y+6, r25	; 0x06
    5416:	8d 83       	std	Y+5, r24	; 0x05
    5418:	0f c0       	rjmp	.+30     	; 0x5438 <alignment+0x18d8>
    541a:	80 e7       	ldi	r24, 0x70	; 112
    541c:	91 e0       	ldi	r25, 0x01	; 1
    541e:	9c 83       	std	Y+4, r25	; 0x04
    5420:	8b 83       	std	Y+3, r24	; 0x03
    5422:	8b 81       	ldd	r24, Y+3	; 0x03
    5424:	9c 81       	ldd	r25, Y+4	; 0x04
    5426:	01 97       	sbiw	r24, 0x01	; 1
    5428:	f1 f7       	brne	.-4      	; 0x5426 <alignment+0x18c6>
    542a:	9c 83       	std	Y+4, r25	; 0x04
    542c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542e:	8d 81       	ldd	r24, Y+5	; 0x05
    5430:	9e 81       	ldd	r25, Y+6	; 0x06
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	9e 83       	std	Y+6, r25	; 0x06
    5436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5438:	8d 81       	ldd	r24, Y+5	; 0x05
    543a:	9e 81       	ldd	r25, Y+6	; 0x06
    543c:	00 97       	sbiw	r24, 0x00	; 0
    543e:	69 f7       	brne	.-38     	; 0x541a <alignment+0x18ba>
    5440:	14 c0       	rjmp	.+40     	; 0x546a <alignment+0x190a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5442:	6f 81       	ldd	r22, Y+7	; 0x07
    5444:	78 85       	ldd	r23, Y+8	; 0x08
    5446:	89 85       	ldd	r24, Y+9	; 0x09
    5448:	9a 85       	ldd	r25, Y+10	; 0x0a
    544a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	9e 83       	std	Y+6, r25	; 0x06
    5454:	8d 83       	std	Y+5, r24	; 0x05
    5456:	8d 81       	ldd	r24, Y+5	; 0x05
    5458:	9e 81       	ldd	r25, Y+6	; 0x06
    545a:	9a 83       	std	Y+2, r25	; 0x02
    545c:	89 83       	std	Y+1, r24	; 0x01
    545e:	89 81       	ldd	r24, Y+1	; 0x01
    5460:	9a 81       	ldd	r25, Y+2	; 0x02
    5462:	01 97       	sbiw	r24, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <alignment+0x1902>
    5466:	9a 83       	std	Y+2, r25	; 0x02
    5468:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DELAY);
			}

			if (2 == retVal)
    546a:	fe 01       	movw	r30, r28
    546c:	e1 51       	subi	r30, 0x11	; 17
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	82 30       	cpi	r24, 0x02	; 2
    5476:	91 05       	cpc	r25, r1
    5478:	11 f0       	breq	.+4      	; 0x547e <alignment+0x191e>
    547a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>
			{
				clear_lcd();
    547e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <clear_lcd>
				my_lcd_string("RETURN");
    5482:	82 e3       	ldi	r24, 0x32	; 50
    5484:	93 e0       	ldi	r25, 0x03	; 3
    5486:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    548a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <alignment+0x74>

0000548e <moveToRequiredAisle>:
	}
}


void moveToRequiredAisle(unsigned int dst_aisle_count)
{
    548e:	0f 93       	push	r16
    5490:	1f 93       	push	r17
    5492:	df 93       	push	r29
    5494:	cf 93       	push	r28
    5496:	cd b7       	in	r28, 0x3d	; 61
    5498:	de b7       	in	r29, 0x3e	; 62
    549a:	ca 56       	subi	r28, 0x6A	; 106
    549c:	d0 40       	sbci	r29, 0x00	; 0
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	f8 94       	cli
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	cd bf       	out	0x3d, r28	; 61
    54a8:	fe 01       	movw	r30, r28
    54aa:	e7 59       	subi	r30, 0x97	; 151
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	91 83       	std	Z+1, r25	; 0x01
    54b0:	80 83       	st	Z, r24
	unsigned int tmp_aisle_count = 0;
    54b2:	fe 01       	movw	r30, r28
    54b4:	e9 59       	subi	r30, 0x99	; 153
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	11 82       	std	Z+1, r1	; 0x01
    54ba:	10 82       	st	Z, r1
	unsigned char Left_white_line = 0;
    54bc:	fe 01       	movw	r30, r28
    54be:	ea 59       	subi	r30, 0x9A	; 154
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	10 82       	st	Z, r1
	unsigned char Center_white_line = 0;
    54c4:	fe 01       	movw	r30, r28
    54c6:	eb 59       	subi	r30, 0x9B	; 155
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	10 82       	st	Z, r1
	unsigned char Right_white_line = 0;
    54cc:	fe 01       	movw	r30, r28
    54ce:	ec 59       	subi	r30, 0x9C	; 156
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	10 82       	st	Z, r1
    unsigned char flag = 0;
    54d4:	fe 01       	movw	r30, r28
    54d6:	ed 59       	subi	r30, 0x9D	; 157
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	10 82       	st	Z, r1

	//velocity(200, 200);

	while(1)
	{
		Left_white_line   = ADC_Conversion(3);	//Getting data of Left WL Sensor
    54dc:	83 e0       	ldi	r24, 0x03	; 3
    54de:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    54e2:	fe 01       	movw	r30, r28
    54e4:	ea 59       	subi	r30, 0x9A	; 154
    54e6:	ff 4f       	sbci	r31, 0xFF	; 255
    54e8:	80 83       	st	Z, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    54ea:	82 e0       	ldi	r24, 0x02	; 2
    54ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    54f0:	fe 01       	movw	r30, r28
    54f2:	eb 59       	subi	r30, 0x9B	; 155
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	80 83       	st	Z, r24
		Right_white_line  = ADC_Conversion(1);	//Getting data of Right WL Sensor
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <ADC_Conversion>
    54fe:	fe 01       	movw	r30, r28
    5500:	ec 59       	subi	r30, 0x9C	; 156
    5502:	ff 4f       	sbci	r31, 0xFF	; 255
    5504:	80 83       	st	Z, r24

		flag = 0;
    5506:	fe 01       	movw	r30, r28
    5508:	ed 59       	subi	r30, 0x9D	; 157
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	10 82       	st	Z, r1

		print_sensor(2,1,3);	//Prints value of White Line Sensor1
    550e:	82 e0       	ldi	r24, 0x02	; 2
    5510:	61 e0       	ldi	r22, 0x01	; 1
    5512:	43 e0       	ldi	r20, 0x03	; 3
    5514:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <print_sensor>
		print_sensor(2,5,2);	//Prints Value of White Line Sensor2
    5518:	82 e0       	ldi	r24, 0x02	; 2
    551a:	65 e0       	ldi	r22, 0x05	; 5
    551c:	42 e0       	ldi	r20, 0x02	; 2
    551e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <print_sensor>
		print_sensor(2,9,1);	//Prints Value of White Line Sensor3
    5522:	82 e0       	ldi	r24, 0x02	; 2
    5524:	69 e0       	ldi	r22, 0x09	; 9
    5526:	41 e0       	ldi	r20, 0x01	; 1
    5528:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <print_sensor>


        lcd_cursor(1,1);
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	61 e0       	ldi	r22, 0x01	; 1
    5530:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		my_lcd_string("Follow Line");
    5534:	89 e3       	ldi	r24, 0x39	; 57
    5536:	93 e0       	ldi	r25, 0x03	; 3
    5538:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    553c:	fe 01       	movw	r30, r28
    553e:	e1 5a       	subi	r30, 0xA1	; 161
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	aa ef       	ldi	r26, 0xFA	; 250
    5548:	b3 e4       	ldi	r27, 0x43	; 67
    554a:	80 83       	st	Z, r24
    554c:	91 83       	std	Z+1, r25	; 0x01
    554e:	a2 83       	std	Z+2, r26	; 0x02
    5550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5552:	8e 01       	movw	r16, r28
    5554:	05 5a       	subi	r16, 0xA5	; 165
    5556:	1f 4f       	sbci	r17, 0xFF	; 255
    5558:	fe 01       	movw	r30, r28
    555a:	e1 5a       	subi	r30, 0xA1	; 161
    555c:	ff 4f       	sbci	r31, 0xFF	; 255
    555e:	60 81       	ld	r22, Z
    5560:	71 81       	ldd	r23, Z+1	; 0x01
    5562:	82 81       	ldd	r24, Z+2	; 0x02
    5564:	93 81       	ldd	r25, Z+3	; 0x03
    5566:	26 e6       	ldi	r18, 0x66	; 102
    5568:	36 e6       	ldi	r19, 0x66	; 102
    556a:	46 e6       	ldi	r20, 0x66	; 102
    556c:	55 e4       	ldi	r21, 0x45	; 69
    556e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5572:	dc 01       	movw	r26, r24
    5574:	cb 01       	movw	r24, r22
    5576:	f8 01       	movw	r30, r16
    5578:	80 83       	st	Z, r24
    557a:	91 83       	std	Z+1, r25	; 0x01
    557c:	a2 83       	std	Z+2, r26	; 0x02
    557e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5580:	fe 01       	movw	r30, r28
    5582:	e5 5a       	subi	r30, 0xA5	; 165
    5584:	ff 4f       	sbci	r31, 0xFF	; 255
    5586:	60 81       	ld	r22, Z
    5588:	71 81       	ldd	r23, Z+1	; 0x01
    558a:	82 81       	ldd	r24, Z+2	; 0x02
    558c:	93 81       	ldd	r25, Z+3	; 0x03
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    559a:	88 23       	and	r24, r24
    559c:	44 f4       	brge	.+16     	; 0x55ae <moveToRequiredAisle+0x120>
		__ticks = 1;
    559e:	fe 01       	movw	r30, r28
    55a0:	e7 5a       	subi	r30, 0xA7	; 167
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	91 83       	std	Z+1, r25	; 0x01
    55aa:	80 83       	st	Z, r24
    55ac:	64 c0       	rjmp	.+200    	; 0x5676 <moveToRequiredAisle+0x1e8>
	else if (__tmp > 65535)
    55ae:	fe 01       	movw	r30, r28
    55b0:	e5 5a       	subi	r30, 0xA5	; 165
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	60 81       	ld	r22, Z
    55b6:	71 81       	ldd	r23, Z+1	; 0x01
    55b8:	82 81       	ldd	r24, Z+2	; 0x02
    55ba:	93 81       	ldd	r25, Z+3	; 0x03
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	3f ef       	ldi	r19, 0xFF	; 255
    55c0:	4f e7       	ldi	r20, 0x7F	; 127
    55c2:	57 e4       	ldi	r21, 0x47	; 71
    55c4:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    55c8:	18 16       	cp	r1, r24
    55ca:	0c f0       	brlt	.+2      	; 0x55ce <moveToRequiredAisle+0x140>
    55cc:	43 c0       	rjmp	.+134    	; 0x5654 <moveToRequiredAisle+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ce:	fe 01       	movw	r30, r28
    55d0:	e1 5a       	subi	r30, 0xA1	; 161
    55d2:	ff 4f       	sbci	r31, 0xFF	; 255
    55d4:	60 81       	ld	r22, Z
    55d6:	71 81       	ldd	r23, Z+1	; 0x01
    55d8:	82 81       	ldd	r24, Z+2	; 0x02
    55da:	93 81       	ldd	r25, Z+3	; 0x03
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e2       	ldi	r20, 0x20	; 32
    55e2:	51 e4       	ldi	r21, 0x41	; 65
    55e4:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	8e 01       	movw	r16, r28
    55ee:	07 5a       	subi	r16, 0xA7	; 167
    55f0:	1f 4f       	sbci	r17, 0xFF	; 255
    55f2:	bc 01       	movw	r22, r24
    55f4:	cd 01       	movw	r24, r26
    55f6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	f8 01       	movw	r30, r16
    5600:	91 83       	std	Z+1, r25	; 0x01
    5602:	80 83       	st	Z, r24
    5604:	1f c0       	rjmp	.+62     	; 0x5644 <moveToRequiredAisle+0x1b6>
    5606:	fe 01       	movw	r30, r28
    5608:	e9 5a       	subi	r30, 0xA9	; 169
    560a:	ff 4f       	sbci	r31, 0xFF	; 255
    560c:	80 e7       	ldi	r24, 0x70	; 112
    560e:	91 e0       	ldi	r25, 0x01	; 1
    5610:	91 83       	std	Z+1, r25	; 0x01
    5612:	80 83       	st	Z, r24
    5614:	fe 01       	movw	r30, r28
    5616:	e9 5a       	subi	r30, 0xA9	; 169
    5618:	ff 4f       	sbci	r31, 0xFF	; 255
    561a:	80 81       	ld	r24, Z
    561c:	91 81       	ldd	r25, Z+1	; 0x01
    561e:	01 97       	sbiw	r24, 0x01	; 1
    5620:	f1 f7       	brne	.-4      	; 0x561e <moveToRequiredAisle+0x190>
    5622:	fe 01       	movw	r30, r28
    5624:	e9 5a       	subi	r30, 0xA9	; 169
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	91 83       	std	Z+1, r25	; 0x01
    562a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    562c:	de 01       	movw	r26, r28
    562e:	a7 5a       	subi	r26, 0xA7	; 167
    5630:	bf 4f       	sbci	r27, 0xFF	; 255
    5632:	fe 01       	movw	r30, r28
    5634:	e7 5a       	subi	r30, 0xA7	; 167
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	80 81       	ld	r24, Z
    563a:	91 81       	ldd	r25, Z+1	; 0x01
    563c:	01 97       	sbiw	r24, 0x01	; 1
    563e:	11 96       	adiw	r26, 0x01	; 1
    5640:	9c 93       	st	X, r25
    5642:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5644:	fe 01       	movw	r30, r28
    5646:	e7 5a       	subi	r30, 0xA7	; 167
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	80 81       	ld	r24, Z
    564c:	91 81       	ldd	r25, Z+1	; 0x01
    564e:	00 97       	sbiw	r24, 0x00	; 0
    5650:	d1 f6       	brne	.-76     	; 0x5606 <moveToRequiredAisle+0x178>
    5652:	28 c0       	rjmp	.+80     	; 0x56a4 <moveToRequiredAisle+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5654:	8e 01       	movw	r16, r28
    5656:	07 5a       	subi	r16, 0xA7	; 167
    5658:	1f 4f       	sbci	r17, 0xFF	; 255
    565a:	fe 01       	movw	r30, r28
    565c:	e5 5a       	subi	r30, 0xA5	; 165
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	60 81       	ld	r22, Z
    5662:	71 81       	ldd	r23, Z+1	; 0x01
    5664:	82 81       	ldd	r24, Z+2	; 0x02
    5666:	93 81       	ldd	r25, Z+3	; 0x03
    5668:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	f8 01       	movw	r30, r16
    5672:	91 83       	std	Z+1, r25	; 0x01
    5674:	80 83       	st	Z, r24
    5676:	de 01       	movw	r26, r28
    5678:	ab 5a       	subi	r26, 0xAB	; 171
    567a:	bf 4f       	sbci	r27, 0xFF	; 255
    567c:	fe 01       	movw	r30, r28
    567e:	e7 5a       	subi	r30, 0xA7	; 167
    5680:	ff 4f       	sbci	r31, 0xFF	; 255
    5682:	80 81       	ld	r24, Z
    5684:	91 81       	ldd	r25, Z+1	; 0x01
    5686:	11 96       	adiw	r26, 0x01	; 1
    5688:	9c 93       	st	X, r25
    568a:	8e 93       	st	-X, r24
    568c:	fe 01       	movw	r30, r28
    568e:	eb 5a       	subi	r30, 0xAB	; 171
    5690:	ff 4f       	sbci	r31, 0xFF	; 255
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	01 97       	sbiw	r24, 0x01	; 1
    5698:	f1 f7       	brne	.-4      	; 0x5696 <moveToRequiredAisle+0x208>
    569a:	fe 01       	movw	r30, r28
    569c:	eb 5a       	subi	r30, 0xAB	; 171
    569e:	ff 4f       	sbci	r31, 0xFF	; 255
    56a0:	91 83       	std	Z+1, r25	; 0x01
    56a2:	80 83       	st	Z, r24
        _delay_ms(DELAY);

		if (Center_white_line < 0x28 && Left_white_line < 0x28 && Right_white_line < 0x28)
    56a4:	fe 01       	movw	r30, r28
    56a6:	eb 59       	subi	r30, 0x9B	; 155
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	80 81       	ld	r24, Z
    56ac:	88 32       	cpi	r24, 0x28	; 40
    56ae:	08 f0       	brcs	.+2      	; 0x56b2 <moveToRequiredAisle+0x224>
    56b0:	7a c2       	rjmp	.+1268   	; 0x5ba6 <moveToRequiredAisle+0x718>
    56b2:	fe 01       	movw	r30, r28
    56b4:	ea 59       	subi	r30, 0x9A	; 154
    56b6:	ff 4f       	sbci	r31, 0xFF	; 255
    56b8:	80 81       	ld	r24, Z
    56ba:	88 32       	cpi	r24, 0x28	; 40
    56bc:	08 f0       	brcs	.+2      	; 0x56c0 <moveToRequiredAisle+0x232>
    56be:	73 c2       	rjmp	.+1254   	; 0x5ba6 <moveToRequiredAisle+0x718>
    56c0:	fe 01       	movw	r30, r28
    56c2:	ec 59       	subi	r30, 0x9C	; 156
    56c4:	ff 4f       	sbci	r31, 0xFF	; 255
    56c6:	80 81       	ld	r24, Z
    56c8:	88 32       	cpi	r24, 0x28	; 40
    56ca:	08 f0       	brcs	.+2      	; 0x56ce <moveToRequiredAisle+0x240>
    56cc:	6c c2       	rjmp	.+1240   	; 0x5ba6 <moveToRequiredAisle+0x718>
		{
			flag = 1;
    56ce:	fe 01       	movw	r30, r28
    56d0:	ed 59       	subi	r30, 0x9D	; 157
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	80 83       	st	Z, r24

			stop();
    56d8:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    56dc:	fe 01       	movw	r30, r28
    56de:	ef 5a       	subi	r30, 0xAF	; 175
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	aa e7       	ldi	r26, 0x7A	; 122
    56e8:	b4 e4       	ldi	r27, 0x44	; 68
    56ea:	80 83       	st	Z, r24
    56ec:	91 83       	std	Z+1, r25	; 0x01
    56ee:	a2 83       	std	Z+2, r26	; 0x02
    56f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56f2:	8e 01       	movw	r16, r28
    56f4:	03 5b       	subi	r16, 0xB3	; 179
    56f6:	1f 4f       	sbci	r17, 0xFF	; 255
    56f8:	fe 01       	movw	r30, r28
    56fa:	ef 5a       	subi	r30, 0xAF	; 175
    56fc:	ff 4f       	sbci	r31, 0xFF	; 255
    56fe:	60 81       	ld	r22, Z
    5700:	71 81       	ldd	r23, Z+1	; 0x01
    5702:	82 81       	ldd	r24, Z+2	; 0x02
    5704:	93 81       	ldd	r25, Z+3	; 0x03
    5706:	26 e6       	ldi	r18, 0x66	; 102
    5708:	36 e6       	ldi	r19, 0x66	; 102
    570a:	46 e6       	ldi	r20, 0x66	; 102
    570c:	55 e4       	ldi	r21, 0x45	; 69
    570e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	f8 01       	movw	r30, r16
    5718:	80 83       	st	Z, r24
    571a:	91 83       	std	Z+1, r25	; 0x01
    571c:	a2 83       	std	Z+2, r26	; 0x02
    571e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5720:	fe 01       	movw	r30, r28
    5722:	e3 5b       	subi	r30, 0xB3	; 179
    5724:	ff 4f       	sbci	r31, 0xFF	; 255
    5726:	60 81       	ld	r22, Z
    5728:	71 81       	ldd	r23, Z+1	; 0x01
    572a:	82 81       	ldd	r24, Z+2	; 0x02
    572c:	93 81       	ldd	r25, Z+3	; 0x03
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	40 e8       	ldi	r20, 0x80	; 128
    5734:	5f e3       	ldi	r21, 0x3F	; 63
    5736:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    573a:	88 23       	and	r24, r24
    573c:	44 f4       	brge	.+16     	; 0x574e <moveToRequiredAisle+0x2c0>
		__ticks = 1;
    573e:	fe 01       	movw	r30, r28
    5740:	e5 5b       	subi	r30, 0xB5	; 181
    5742:	ff 4f       	sbci	r31, 0xFF	; 255
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	91 83       	std	Z+1, r25	; 0x01
    574a:	80 83       	st	Z, r24
    574c:	64 c0       	rjmp	.+200    	; 0x5816 <moveToRequiredAisle+0x388>
	else if (__tmp > 65535)
    574e:	fe 01       	movw	r30, r28
    5750:	e3 5b       	subi	r30, 0xB3	; 179
    5752:	ff 4f       	sbci	r31, 0xFF	; 255
    5754:	60 81       	ld	r22, Z
    5756:	71 81       	ldd	r23, Z+1	; 0x01
    5758:	82 81       	ldd	r24, Z+2	; 0x02
    575a:	93 81       	ldd	r25, Z+3	; 0x03
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	3f ef       	ldi	r19, 0xFF	; 255
    5760:	4f e7       	ldi	r20, 0x7F	; 127
    5762:	57 e4       	ldi	r21, 0x47	; 71
    5764:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5768:	18 16       	cp	r1, r24
    576a:	0c f0       	brlt	.+2      	; 0x576e <moveToRequiredAisle+0x2e0>
    576c:	43 c0       	rjmp	.+134    	; 0x57f4 <moveToRequiredAisle+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    576e:	fe 01       	movw	r30, r28
    5770:	ef 5a       	subi	r30, 0xAF	; 175
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	60 81       	ld	r22, Z
    5776:	71 81       	ldd	r23, Z+1	; 0x01
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	93 81       	ldd	r25, Z+3	; 0x03
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e2       	ldi	r20, 0x20	; 32
    5782:	51 e4       	ldi	r21, 0x41	; 65
    5784:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	8e 01       	movw	r16, r28
    578e:	05 5b       	subi	r16, 0xB5	; 181
    5790:	1f 4f       	sbci	r17, 0xFF	; 255
    5792:	bc 01       	movw	r22, r24
    5794:	cd 01       	movw	r24, r26
    5796:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    579a:	dc 01       	movw	r26, r24
    579c:	cb 01       	movw	r24, r22
    579e:	f8 01       	movw	r30, r16
    57a0:	91 83       	std	Z+1, r25	; 0x01
    57a2:	80 83       	st	Z, r24
    57a4:	1f c0       	rjmp	.+62     	; 0x57e4 <moveToRequiredAisle+0x356>
    57a6:	fe 01       	movw	r30, r28
    57a8:	e7 5b       	subi	r30, 0xB7	; 183
    57aa:	ff 4f       	sbci	r31, 0xFF	; 255
    57ac:	80 e7       	ldi	r24, 0x70	; 112
    57ae:	91 e0       	ldi	r25, 0x01	; 1
    57b0:	91 83       	std	Z+1, r25	; 0x01
    57b2:	80 83       	st	Z, r24
    57b4:	fe 01       	movw	r30, r28
    57b6:	e7 5b       	subi	r30, 0xB7	; 183
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	80 81       	ld	r24, Z
    57bc:	91 81       	ldd	r25, Z+1	; 0x01
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	f1 f7       	brne	.-4      	; 0x57be <moveToRequiredAisle+0x330>
    57c2:	fe 01       	movw	r30, r28
    57c4:	e7 5b       	subi	r30, 0xB7	; 183
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	91 83       	std	Z+1, r25	; 0x01
    57ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57cc:	de 01       	movw	r26, r28
    57ce:	a5 5b       	subi	r26, 0xB5	; 181
    57d0:	bf 4f       	sbci	r27, 0xFF	; 255
    57d2:	fe 01       	movw	r30, r28
    57d4:	e5 5b       	subi	r30, 0xB5	; 181
    57d6:	ff 4f       	sbci	r31, 0xFF	; 255
    57d8:	80 81       	ld	r24, Z
    57da:	91 81       	ldd	r25, Z+1	; 0x01
    57dc:	01 97       	sbiw	r24, 0x01	; 1
    57de:	11 96       	adiw	r26, 0x01	; 1
    57e0:	9c 93       	st	X, r25
    57e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57e4:	fe 01       	movw	r30, r28
    57e6:	e5 5b       	subi	r30, 0xB5	; 181
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	00 97       	sbiw	r24, 0x00	; 0
    57f0:	d1 f6       	brne	.-76     	; 0x57a6 <moveToRequiredAisle+0x318>
    57f2:	27 c0       	rjmp	.+78     	; 0x5842 <moveToRequiredAisle+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f4:	8e 01       	movw	r16, r28
    57f6:	05 5b       	subi	r16, 0xB5	; 181
    57f8:	1f 4f       	sbci	r17, 0xFF	; 255
    57fa:	fe 01       	movw	r30, r28
    57fc:	e3 5b       	subi	r30, 0xB3	; 179
    57fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5800:	60 81       	ld	r22, Z
    5802:	71 81       	ldd	r23, Z+1	; 0x01
    5804:	82 81       	ldd	r24, Z+2	; 0x02
    5806:	93 81       	ldd	r25, Z+3	; 0x03
    5808:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	f8 01       	movw	r30, r16
    5812:	91 83       	std	Z+1, r25	; 0x01
    5814:	80 83       	st	Z, r24
    5816:	de 01       	movw	r26, r28
    5818:	a9 5b       	subi	r26, 0xB9	; 185
    581a:	bf 4f       	sbci	r27, 0xFF	; 255
    581c:	fe 01       	movw	r30, r28
    581e:	e5 5b       	subi	r30, 0xB5	; 181
    5820:	ff 4f       	sbci	r31, 0xFF	; 255
    5822:	80 81       	ld	r24, Z
    5824:	91 81       	ldd	r25, Z+1	; 0x01
    5826:	8d 93       	st	X+, r24
    5828:	9c 93       	st	X, r25
    582a:	fe 01       	movw	r30, r28
    582c:	e9 5b       	subi	r30, 0xB9	; 185
    582e:	ff 4f       	sbci	r31, 0xFF	; 255
    5830:	80 81       	ld	r24, Z
    5832:	91 81       	ldd	r25, Z+1	; 0x01
    5834:	01 97       	sbiw	r24, 0x01	; 1
    5836:	f1 f7       	brne	.-4      	; 0x5834 <moveToRequiredAisle+0x3a6>
    5838:	fe 01       	movw	r30, r28
    583a:	e9 5b       	subi	r30, 0xB9	; 185
    583c:	ff 4f       	sbci	r31, 0xFF	; 255
    583e:	91 83       	std	Z+1, r25	; 0x01
    5840:	80 83       	st	Z, r24
			_delay_ms(1000);

			if (dst_aisle_count == tmp_aisle_count)
    5842:	fe 01       	movw	r30, r28
    5844:	e7 59       	subi	r30, 0x97	; 151
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	de 01       	movw	r26, r28
    584a:	a9 59       	subi	r26, 0x99	; 153
    584c:	bf 4f       	sbci	r27, 0xFF	; 255
    584e:	20 81       	ld	r18, Z
    5850:	31 81       	ldd	r19, Z+1	; 0x01
    5852:	8d 91       	ld	r24, X+
    5854:	9c 91       	ld	r25, X
    5856:	11 97       	sbiw	r26, 0x01	; 1
    5858:	28 17       	cp	r18, r24
    585a:	39 07       	cpc	r19, r25
    585c:	09 f0       	breq	.+2      	; 0x5860 <moveToRequiredAisle+0x3d2>
    585e:	94 c0       	rjmp	.+296    	; 0x5988 <moveToRequiredAisle+0x4fa>
			{
				lcd_cursor(1, 1);
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	61 e0       	ldi	r22, 0x01	; 1
    5864:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
				my_lcd_string("Rched Dst Aisle");
    5868:	85 e4       	ldi	r24, 0x45	; 69
    586a:	93 e0       	ldi	r25, 0x03	; 3
    586c:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
				stop();
    5870:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    5874:	fe 01       	movw	r30, r28
    5876:	ed 5b       	subi	r30, 0xBD	; 189
    5878:	ff 4f       	sbci	r31, 0xFF	; 255
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	aa e7       	ldi	r26, 0x7A	; 122
    5880:	b4 e4       	ldi	r27, 0x44	; 68
    5882:	80 83       	st	Z, r24
    5884:	91 83       	std	Z+1, r25	; 0x01
    5886:	a2 83       	std	Z+2, r26	; 0x02
    5888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    588a:	8e 01       	movw	r16, r28
    588c:	01 5c       	subi	r16, 0xC1	; 193
    588e:	1f 4f       	sbci	r17, 0xFF	; 255
    5890:	fe 01       	movw	r30, r28
    5892:	ed 5b       	subi	r30, 0xBD	; 189
    5894:	ff 4f       	sbci	r31, 0xFF	; 255
    5896:	60 81       	ld	r22, Z
    5898:	71 81       	ldd	r23, Z+1	; 0x01
    589a:	82 81       	ldd	r24, Z+2	; 0x02
    589c:	93 81       	ldd	r25, Z+3	; 0x03
    589e:	26 e6       	ldi	r18, 0x66	; 102
    58a0:	36 e6       	ldi	r19, 0x66	; 102
    58a2:	46 e6       	ldi	r20, 0x66	; 102
    58a4:	55 e4       	ldi	r21, 0x45	; 69
    58a6:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	f8 01       	movw	r30, r16
    58b0:	80 83       	st	Z, r24
    58b2:	91 83       	std	Z+1, r25	; 0x01
    58b4:	a2 83       	std	Z+2, r26	; 0x02
    58b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58b8:	fe 01       	movw	r30, r28
    58ba:	ff 96       	adiw	r30, 0x3f	; 63
    58bc:	60 81       	ld	r22, Z
    58be:	71 81       	ldd	r23, Z+1	; 0x01
    58c0:	82 81       	ldd	r24, Z+2	; 0x02
    58c2:	93 81       	ldd	r25, Z+3	; 0x03
    58c4:	20 e0       	ldi	r18, 0x00	; 0
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	40 e8       	ldi	r20, 0x80	; 128
    58ca:	5f e3       	ldi	r21, 0x3F	; 63
    58cc:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    58d0:	88 23       	and	r24, r24
    58d2:	2c f4       	brge	.+10     	; 0x58de <moveToRequiredAisle+0x450>
		__ticks = 1;
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	9e af       	std	Y+62, r25	; 0x3e
    58da:	8d af       	std	Y+61, r24	; 0x3d
    58dc:	46 c0       	rjmp	.+140    	; 0x596a <moveToRequiredAisle+0x4dc>
	else if (__tmp > 65535)
    58de:	fe 01       	movw	r30, r28
    58e0:	ff 96       	adiw	r30, 0x3f	; 63
    58e2:	60 81       	ld	r22, Z
    58e4:	71 81       	ldd	r23, Z+1	; 0x01
    58e6:	82 81       	ldd	r24, Z+2	; 0x02
    58e8:	93 81       	ldd	r25, Z+3	; 0x03
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	3f ef       	ldi	r19, 0xFF	; 255
    58ee:	4f e7       	ldi	r20, 0x7F	; 127
    58f0:	57 e4       	ldi	r21, 0x47	; 71
    58f2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    58f6:	18 16       	cp	r1, r24
    58f8:	64 f5       	brge	.+88     	; 0x5952 <moveToRequiredAisle+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58fa:	fe 01       	movw	r30, r28
    58fc:	ed 5b       	subi	r30, 0xBD	; 189
    58fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5900:	60 81       	ld	r22, Z
    5902:	71 81       	ldd	r23, Z+1	; 0x01
    5904:	82 81       	ldd	r24, Z+2	; 0x02
    5906:	93 81       	ldd	r25, Z+3	; 0x03
    5908:	20 e0       	ldi	r18, 0x00	; 0
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	40 e2       	ldi	r20, 0x20	; 32
    590e:	51 e4       	ldi	r21, 0x41	; 65
    5910:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	bc 01       	movw	r22, r24
    591a:	cd 01       	movw	r24, r26
    591c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9e af       	std	Y+62, r25	; 0x3e
    5926:	8d af       	std	Y+61, r24	; 0x3d
    5928:	0f c0       	rjmp	.+30     	; 0x5948 <moveToRequiredAisle+0x4ba>
    592a:	80 e7       	ldi	r24, 0x70	; 112
    592c:	91 e0       	ldi	r25, 0x01	; 1
    592e:	9c af       	std	Y+60, r25	; 0x3c
    5930:	8b af       	std	Y+59, r24	; 0x3b
    5932:	8b ad       	ldd	r24, Y+59	; 0x3b
    5934:	9c ad       	ldd	r25, Y+60	; 0x3c
    5936:	01 97       	sbiw	r24, 0x01	; 1
    5938:	f1 f7       	brne	.-4      	; 0x5936 <moveToRequiredAisle+0x4a8>
    593a:	9c af       	std	Y+60, r25	; 0x3c
    593c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    593e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5940:	9e ad       	ldd	r25, Y+62	; 0x3e
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	9e af       	std	Y+62, r25	; 0x3e
    5946:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5948:	8d ad       	ldd	r24, Y+61	; 0x3d
    594a:	9e ad       	ldd	r25, Y+62	; 0x3e
    594c:	00 97       	sbiw	r24, 0x00	; 0
    594e:	69 f7       	brne	.-38     	; 0x592a <moveToRequiredAisle+0x49c>
    5950:	16 c0       	rjmp	.+44     	; 0x597e <moveToRequiredAisle+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5952:	fe 01       	movw	r30, r28
    5954:	ff 96       	adiw	r30, 0x3f	; 63
    5956:	60 81       	ld	r22, Z
    5958:	71 81       	ldd	r23, Z+1	; 0x01
    595a:	82 81       	ldd	r24, Z+2	; 0x02
    595c:	93 81       	ldd	r25, Z+3	; 0x03
    595e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5962:	dc 01       	movw	r26, r24
    5964:	cb 01       	movw	r24, r22
    5966:	9e af       	std	Y+62, r25	; 0x3e
    5968:	8d af       	std	Y+61, r24	; 0x3d
    596a:	8d ad       	ldd	r24, Y+61	; 0x3d
    596c:	9e ad       	ldd	r25, Y+62	; 0x3e
    596e:	9a af       	std	Y+58, r25	; 0x3a
    5970:	89 af       	std	Y+57, r24	; 0x39
    5972:	89 ad       	ldd	r24, Y+57	; 0x39
    5974:	9a ad       	ldd	r25, Y+58	; 0x3a
    5976:	01 97       	sbiw	r24, 0x01	; 1
    5978:	f1 f7       	brne	.-4      	; 0x5976 <moveToRequiredAisle+0x4e8>
    597a:	9a af       	std	Y+58, r25	; 0x3a
    597c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);

				soft_right_degrees(90); // right by 90 degrees
    597e:	8a e5       	ldi	r24, 0x5A	; 90
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <soft_right_degrees>
    5986:	80 c0       	rjmp	.+256    	; 0x5a88 <moveToRequiredAisle+0x5fa>
			}
			else
			{
				lcd_cursor(1, 1);
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	61 e0       	ldi	r22, 0x01	; 1
    598c:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
				my_lcd_string("ELSE!!!");
    5990:	85 e5       	ldi	r24, 0x55	; 85
    5992:	93 e0       	ldi	r25, 0x03	; 3
    5994:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
				stop();
    5998:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    599c:	80 e0       	ldi	r24, 0x00	; 0
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	aa ef       	ldi	r26, 0xFA	; 250
    59a2:	b3 e4       	ldi	r27, 0x43	; 67
    59a4:	8d ab       	std	Y+53, r24	; 0x35
    59a6:	9e ab       	std	Y+54, r25	; 0x36
    59a8:	af ab       	std	Y+55, r26	; 0x37
    59aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ac:	6d a9       	ldd	r22, Y+53	; 0x35
    59ae:	7e a9       	ldd	r23, Y+54	; 0x36
    59b0:	8f a9       	ldd	r24, Y+55	; 0x37
    59b2:	98 ad       	ldd	r25, Y+56	; 0x38
    59b4:	26 e6       	ldi	r18, 0x66	; 102
    59b6:	36 e6       	ldi	r19, 0x66	; 102
    59b8:	46 e6       	ldi	r20, 0x66	; 102
    59ba:	55 e4       	ldi	r21, 0x45	; 69
    59bc:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    59c0:	dc 01       	movw	r26, r24
    59c2:	cb 01       	movw	r24, r22
    59c4:	89 ab       	std	Y+49, r24	; 0x31
    59c6:	9a ab       	std	Y+50, r25	; 0x32
    59c8:	ab ab       	std	Y+51, r26	; 0x33
    59ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    59cc:	69 a9       	ldd	r22, Y+49	; 0x31
    59ce:	7a a9       	ldd	r23, Y+50	; 0x32
    59d0:	8b a9       	ldd	r24, Y+51	; 0x33
    59d2:	9c a9       	ldd	r25, Y+52	; 0x34
    59d4:	20 e0       	ldi	r18, 0x00	; 0
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	40 e8       	ldi	r20, 0x80	; 128
    59da:	5f e3       	ldi	r21, 0x3F	; 63
    59dc:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    59e0:	88 23       	and	r24, r24
    59e2:	2c f4       	brge	.+10     	; 0x59ee <moveToRequiredAisle+0x560>
		__ticks = 1;
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	98 ab       	std	Y+48, r25	; 0x30
    59ea:	8f a7       	std	Y+47, r24	; 0x2f
    59ec:	3f c0       	rjmp	.+126    	; 0x5a6c <moveToRequiredAisle+0x5de>
	else if (__tmp > 65535)
    59ee:	69 a9       	ldd	r22, Y+49	; 0x31
    59f0:	7a a9       	ldd	r23, Y+50	; 0x32
    59f2:	8b a9       	ldd	r24, Y+51	; 0x33
    59f4:	9c a9       	ldd	r25, Y+52	; 0x34
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	3f ef       	ldi	r19, 0xFF	; 255
    59fa:	4f e7       	ldi	r20, 0x7F	; 127
    59fc:	57 e4       	ldi	r21, 0x47	; 71
    59fe:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5a02:	18 16       	cp	r1, r24
    5a04:	4c f5       	brge	.+82     	; 0x5a58 <moveToRequiredAisle+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a06:	6d a9       	ldd	r22, Y+53	; 0x35
    5a08:	7e a9       	ldd	r23, Y+54	; 0x36
    5a0a:	8f a9       	ldd	r24, Y+55	; 0x37
    5a0c:	98 ad       	ldd	r25, Y+56	; 0x38
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	40 e2       	ldi	r20, 0x20	; 32
    5a14:	51 e4       	ldi	r21, 0x41	; 65
    5a16:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	cb 01       	movw	r24, r22
    5a1e:	bc 01       	movw	r22, r24
    5a20:	cd 01       	movw	r24, r26
    5a22:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5a26:	dc 01       	movw	r26, r24
    5a28:	cb 01       	movw	r24, r22
    5a2a:	98 ab       	std	Y+48, r25	; 0x30
    5a2c:	8f a7       	std	Y+47, r24	; 0x2f
    5a2e:	0f c0       	rjmp	.+30     	; 0x5a4e <moveToRequiredAisle+0x5c0>
    5a30:	80 e7       	ldi	r24, 0x70	; 112
    5a32:	91 e0       	ldi	r25, 0x01	; 1
    5a34:	9e a7       	std	Y+46, r25	; 0x2e
    5a36:	8d a7       	std	Y+45, r24	; 0x2d
    5a38:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a3c:	01 97       	sbiw	r24, 0x01	; 1
    5a3e:	f1 f7       	brne	.-4      	; 0x5a3c <moveToRequiredAisle+0x5ae>
    5a40:	9e a7       	std	Y+46, r25	; 0x2e
    5a42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a46:	98 a9       	ldd	r25, Y+48	; 0x30
    5a48:	01 97       	sbiw	r24, 0x01	; 1
    5a4a:	98 ab       	std	Y+48, r25	; 0x30
    5a4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a50:	98 a9       	ldd	r25, Y+48	; 0x30
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	69 f7       	brne	.-38     	; 0x5a30 <moveToRequiredAisle+0x5a2>
    5a56:	14 c0       	rjmp	.+40     	; 0x5a80 <moveToRequiredAisle+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a58:	69 a9       	ldd	r22, Y+49	; 0x31
    5a5a:	7a a9       	ldd	r23, Y+50	; 0x32
    5a5c:	8b a9       	ldd	r24, Y+51	; 0x33
    5a5e:	9c a9       	ldd	r25, Y+52	; 0x34
    5a60:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	98 ab       	std	Y+48, r25	; 0x30
    5a6a:	8f a7       	std	Y+47, r24	; 0x2f
    5a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    5a70:	9c a7       	std	Y+44, r25	; 0x2c
    5a72:	8b a7       	std	Y+43, r24	; 0x2b
    5a74:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a76:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a78:	01 97       	sbiw	r24, 0x01	; 1
    5a7a:	f1 f7       	brne	.-4      	; 0x5a78 <moveToRequiredAisle+0x5ea>
    5a7c:	9c a7       	std	Y+44, r25	; 0x2c
    5a7e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(DELAY);
				forward_mm(50);
    5a80:	82 e3       	ldi	r24, 0x32	; 50
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <forward_mm>
			}

			tmp_aisle_count++;
    5a88:	de 01       	movw	r26, r28
    5a8a:	a9 59       	subi	r26, 0x99	; 153
    5a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    5a8e:	fe 01       	movw	r30, r28
    5a90:	e9 59       	subi	r30, 0x99	; 153
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
    5a98:	01 96       	adiw	r24, 0x01	; 1
    5a9a:	8d 93       	st	X+, r24
    5a9c:	9c 93       	st	X, r25
			lcd_cursor(1, 1);
    5a9e:	81 e0       	ldi	r24, 0x01	; 1
    5aa0:	61 e0       	ldi	r22, 0x01	; 1
    5aa2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
			my_lcd_print(1, 1, tmp_aisle_count, 2);
    5aa6:	fe 01       	movw	r30, r28
    5aa8:	e9 59       	subi	r30, 0x99	; 153
    5aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    5aac:	20 81       	ld	r18, Z
    5aae:	31 81       	ldd	r19, Z+1	; 0x01
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	61 e0       	ldi	r22, 0x01	; 1
    5ab4:	a9 01       	movw	r20, r18
    5ab6:	22 e0       	ldi	r18, 0x02	; 2
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	0e 94 21 0b 	call	0x1642	; 0x1642 <my_lcd_print>
			stop();
    5abe:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	aa ef       	ldi	r26, 0xFA	; 250
    5ac8:	b3 e4       	ldi	r27, 0x43	; 67
    5aca:	8f a3       	std	Y+39, r24	; 0x27
    5acc:	98 a7       	std	Y+40, r25	; 0x28
    5ace:	a9 a7       	std	Y+41, r26	; 0x29
    5ad0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad2:	6f a1       	ldd	r22, Y+39	; 0x27
    5ad4:	78 a5       	ldd	r23, Y+40	; 0x28
    5ad6:	89 a5       	ldd	r24, Y+41	; 0x29
    5ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ada:	26 e6       	ldi	r18, 0x66	; 102
    5adc:	36 e6       	ldi	r19, 0x66	; 102
    5ade:	46 e6       	ldi	r20, 0x66	; 102
    5ae0:	55 e4       	ldi	r21, 0x45	; 69
    5ae2:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	8b a3       	std	Y+35, r24	; 0x23
    5aec:	9c a3       	std	Y+36, r25	; 0x24
    5aee:	ad a3       	std	Y+37, r26	; 0x25
    5af0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5af2:	6b a1       	ldd	r22, Y+35	; 0x23
    5af4:	7c a1       	ldd	r23, Y+36	; 0x24
    5af6:	8d a1       	ldd	r24, Y+37	; 0x25
    5af8:	9e a1       	ldd	r25, Y+38	; 0x26
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	40 e8       	ldi	r20, 0x80	; 128
    5b00:	5f e3       	ldi	r21, 0x3F	; 63
    5b02:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    5b06:	88 23       	and	r24, r24
    5b08:	2c f4       	brge	.+10     	; 0x5b14 <moveToRequiredAisle+0x686>
		__ticks = 1;
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	9a a3       	std	Y+34, r25	; 0x22
    5b10:	89 a3       	std	Y+33, r24	; 0x21
    5b12:	3f c0       	rjmp	.+126    	; 0x5b92 <moveToRequiredAisle+0x704>
	else if (__tmp > 65535)
    5b14:	6b a1       	ldd	r22, Y+35	; 0x23
    5b16:	7c a1       	ldd	r23, Y+36	; 0x24
    5b18:	8d a1       	ldd	r24, Y+37	; 0x25
    5b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	3f ef       	ldi	r19, 0xFF	; 255
    5b20:	4f e7       	ldi	r20, 0x7F	; 127
    5b22:	57 e4       	ldi	r21, 0x47	; 71
    5b24:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5b28:	18 16       	cp	r1, r24
    5b2a:	4c f5       	brge	.+82     	; 0x5b7e <moveToRequiredAisle+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b2c:	6f a1       	ldd	r22, Y+39	; 0x27
    5b2e:	78 a5       	ldd	r23, Y+40	; 0x28
    5b30:	89 a5       	ldd	r24, Y+41	; 0x29
    5b32:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b34:	20 e0       	ldi	r18, 0x00	; 0
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	40 e2       	ldi	r20, 0x20	; 32
    5b3a:	51 e4       	ldi	r21, 0x41	; 65
    5b3c:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	bc 01       	movw	r22, r24
    5b46:	cd 01       	movw	r24, r26
    5b48:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	cb 01       	movw	r24, r22
    5b50:	9a a3       	std	Y+34, r25	; 0x22
    5b52:	89 a3       	std	Y+33, r24	; 0x21
    5b54:	0f c0       	rjmp	.+30     	; 0x5b74 <moveToRequiredAisle+0x6e6>
    5b56:	80 e7       	ldi	r24, 0x70	; 112
    5b58:	91 e0       	ldi	r25, 0x01	; 1
    5b5a:	98 a3       	std	Y+32, r25	; 0x20
    5b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    5b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b60:	98 a1       	ldd	r25, Y+32	; 0x20
    5b62:	01 97       	sbiw	r24, 0x01	; 1
    5b64:	f1 f7       	brne	.-4      	; 0x5b62 <moveToRequiredAisle+0x6d4>
    5b66:	98 a3       	std	Y+32, r25	; 0x20
    5b68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b6e:	01 97       	sbiw	r24, 0x01	; 1
    5b70:	9a a3       	std	Y+34, r25	; 0x22
    5b72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b74:	89 a1       	ldd	r24, Y+33	; 0x21
    5b76:	9a a1       	ldd	r25, Y+34	; 0x22
    5b78:	00 97       	sbiw	r24, 0x00	; 0
    5b7a:	69 f7       	brne	.-38     	; 0x5b56 <moveToRequiredAisle+0x6c8>
    5b7c:	14 c0       	rjmp	.+40     	; 0x5ba6 <moveToRequiredAisle+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    5b80:	7c a1       	ldd	r23, Y+36	; 0x24
    5b82:	8d a1       	ldd	r24, Y+37	; 0x25
    5b84:	9e a1       	ldd	r25, Y+38	; 0x26
    5b86:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	9a a3       	std	Y+34, r25	; 0x22
    5b90:	89 a3       	std	Y+33, r24	; 0x21
    5b92:	89 a1       	ldd	r24, Y+33	; 0x21
    5b94:	9a a1       	ldd	r25, Y+34	; 0x22
    5b96:	9e 8f       	std	Y+30, r25	; 0x1e
    5b98:	8d 8f       	std	Y+29, r24	; 0x1d
    5b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	f1 f7       	brne	.-4      	; 0x5b9e <moveToRequiredAisle+0x710>
    5ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    5ba4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DELAY);
		}

		if ((Center_white_line < 0x28) && (flag == 0))
    5ba6:	fe 01       	movw	r30, r28
    5ba8:	eb 59       	subi	r30, 0x9B	; 155
    5baa:	ff 4f       	sbci	r31, 0xFF	; 255
    5bac:	80 81       	ld	r24, Z
    5bae:	88 32       	cpi	r24, 0x28	; 40
    5bb0:	88 f4       	brcc	.+34     	; 0x5bd4 <moveToRequiredAisle+0x746>
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	ed 59       	subi	r30, 0x9D	; 157
    5bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb8:	80 81       	ld	r24, Z
    5bba:	88 23       	and	r24, r24
    5bbc:	59 f4       	brne	.+22     	; 0x5bd4 <moveToRequiredAisle+0x746>
		{
			flag = 1;
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	ed 59       	subi	r30, 0x9D	; 157
    5bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	80 83       	st	Z, r24
			forward();
    5bc8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <forward>
			velocity(150, 150);
    5bcc:	86 e9       	ldi	r24, 0x96	; 150
    5bce:	66 e9       	ldi	r22, 0x96	; 150
    5bd0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <velocity>
		}

		if ((Left_white_line > 0x28) && (flag == 0))
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	ea 59       	subi	r30, 0x9A	; 154
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	80 81       	ld	r24, Z
    5bdc:	89 32       	cpi	r24, 0x29	; 41
    5bde:	88 f0       	brcs	.+34     	; 0x5c02 <moveToRequiredAisle+0x774>
    5be0:	fe 01       	movw	r30, r28
    5be2:	ed 59       	subi	r30, 0x9D	; 157
    5be4:	ff 4f       	sbci	r31, 0xFF	; 255
    5be6:	80 81       	ld	r24, Z
    5be8:	88 23       	and	r24, r24
    5bea:	59 f4       	brne	.+22     	; 0x5c02 <moveToRequiredAisle+0x774>
		{
			flag = 1;
    5bec:	fe 01       	movw	r30, r28
    5bee:	ed 59       	subi	r30, 0x9D	; 157
    5bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	80 83       	st	Z, r24
			forward();
    5bf6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <forward>
			velocity(130,50);
    5bfa:	82 e8       	ldi	r24, 0x82	; 130
    5bfc:	62 e3       	ldi	r22, 0x32	; 50
    5bfe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <velocity>
		}

		if ((Right_white_line > 0x28) && (flag == 0))
    5c02:	fe 01       	movw	r30, r28
    5c04:	ec 59       	subi	r30, 0x9C	; 156
    5c06:	ff 4f       	sbci	r31, 0xFF	; 255
    5c08:	80 81       	ld	r24, Z
    5c0a:	89 32       	cpi	r24, 0x29	; 41
    5c0c:	88 f0       	brcs	.+34     	; 0x5c30 <moveToRequiredAisle+0x7a2>
    5c0e:	fe 01       	movw	r30, r28
    5c10:	ed 59       	subi	r30, 0x9D	; 157
    5c12:	ff 4f       	sbci	r31, 0xFF	; 255
    5c14:	80 81       	ld	r24, Z
    5c16:	88 23       	and	r24, r24
    5c18:	59 f4       	brne	.+22     	; 0x5c30 <moveToRequiredAisle+0x7a2>
		{
			flag = 1;
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	ed 59       	subi	r30, 0x9D	; 157
    5c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	80 83       	st	Z, r24
			forward();
    5c24:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <forward>
			velocity(50,130);
    5c28:	82 e3       	ldi	r24, 0x32	; 50
    5c2a:	62 e8       	ldi	r22, 0x82	; 130
    5c2c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <velocity>
		}

		if (Center_white_line > 0x28 && Left_white_line > 0x28 && Right_white_line > 0x28)
    5c30:	fe 01       	movw	r30, r28
    5c32:	eb 59       	subi	r30, 0x9B	; 155
    5c34:	ff 4f       	sbci	r31, 0xFF	; 255
    5c36:	80 81       	ld	r24, Z
    5c38:	89 32       	cpi	r24, 0x29	; 41
    5c3a:	08 f4       	brcc	.+2      	; 0x5c3e <moveToRequiredAisle+0x7b0>
    5c3c:	4f cc       	rjmp	.-1890   	; 0x54dc <moveToRequiredAisle+0x4e>
    5c3e:	fe 01       	movw	r30, r28
    5c40:	ea 59       	subi	r30, 0x9A	; 154
    5c42:	ff 4f       	sbci	r31, 0xFF	; 255
    5c44:	80 81       	ld	r24, Z
    5c46:	89 32       	cpi	r24, 0x29	; 41
    5c48:	08 f4       	brcc	.+2      	; 0x5c4c <moveToRequiredAisle+0x7be>
    5c4a:	48 cc       	rjmp	.-1904   	; 0x54dc <moveToRequiredAisle+0x4e>
    5c4c:	fe 01       	movw	r30, r28
    5c4e:	ec 59       	subi	r30, 0x9C	; 156
    5c50:	ff 4f       	sbci	r31, 0xFF	; 255
    5c52:	80 81       	ld	r24, Z
    5c54:	89 32       	cpi	r24, 0x29	; 41
    5c56:	08 f4       	brcc	.+2      	; 0x5c5a <moveToRequiredAisle+0x7cc>
    5c58:	41 cc       	rjmp	.-1918   	; 0x54dc <moveToRequiredAisle+0x4e>
		{
			lcd_cursor(1,1);
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	61 e0       	ldi	r22, 0x01	; 1
    5c5e:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
			my_lcd_string("Black!!");
    5c62:	8d e5       	ldi	r24, 0x5D	; 93
    5c64:	93 e0       	ldi	r25, 0x03	; 3
    5c66:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
			stop();
    5c6a:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	aa e7       	ldi	r26, 0x7A	; 122
    5c74:	b4 e4       	ldi	r27, 0x44	; 68
    5c76:	89 8f       	std	Y+25, r24	; 0x19
    5c78:	9a 8f       	std	Y+26, r25	; 0x1a
    5c7a:	ab 8f       	std	Y+27, r26	; 0x1b
    5c7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    5c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c86:	26 e6       	ldi	r18, 0x66	; 102
    5c88:	36 e6       	ldi	r19, 0x66	; 102
    5c8a:	46 e6       	ldi	r20, 0x66	; 102
    5c8c:	55 e4       	ldi	r21, 0x45	; 69
    5c8e:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	8d 8b       	std	Y+21, r24	; 0x15
    5c98:	9e 8b       	std	Y+22, r25	; 0x16
    5c9a:	af 8b       	std	Y+23, r26	; 0x17
    5c9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    5ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	40 e8       	ldi	r20, 0x80	; 128
    5cac:	5f e3       	ldi	r21, 0x3F	; 63
    5cae:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    5cb2:	88 23       	and	r24, r24
    5cb4:	2c f4       	brge	.+10     	; 0x5cc0 <moveToRequiredAisle+0x832>
		__ticks = 1;
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	9c 8b       	std	Y+20, r25	; 0x14
    5cbc:	8b 8b       	std	Y+19, r24	; 0x13
    5cbe:	3f c0       	rjmp	.+126    	; 0x5d3e <moveToRequiredAisle+0x8b0>
	else if (__tmp > 65535)
    5cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    5cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    5cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    5cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    5cc8:	20 e0       	ldi	r18, 0x00	; 0
    5cca:	3f ef       	ldi	r19, 0xFF	; 255
    5ccc:	4f e7       	ldi	r20, 0x7F	; 127
    5cce:	57 e4       	ldi	r21, 0x47	; 71
    5cd0:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5cd4:	18 16       	cp	r1, r24
    5cd6:	4c f5       	brge	.+82     	; 0x5d2a <moveToRequiredAisle+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cd8:	69 8d       	ldd	r22, Y+25	; 0x19
    5cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	40 e2       	ldi	r20, 0x20	; 32
    5ce6:	51 e4       	ldi	r21, 0x41	; 65
    5ce8:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5cec:	dc 01       	movw	r26, r24
    5cee:	cb 01       	movw	r24, r22
    5cf0:	bc 01       	movw	r22, r24
    5cf2:	cd 01       	movw	r24, r26
    5cf4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	cb 01       	movw	r24, r22
    5cfc:	9c 8b       	std	Y+20, r25	; 0x14
    5cfe:	8b 8b       	std	Y+19, r24	; 0x13
    5d00:	0f c0       	rjmp	.+30     	; 0x5d20 <moveToRequiredAisle+0x892>
    5d02:	80 e7       	ldi	r24, 0x70	; 112
    5d04:	91 e0       	ldi	r25, 0x01	; 1
    5d06:	9a 8b       	std	Y+18, r25	; 0x12
    5d08:	89 8b       	std	Y+17, r24	; 0x11
    5d0a:	89 89       	ldd	r24, Y+17	; 0x11
    5d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    5d0e:	01 97       	sbiw	r24, 0x01	; 1
    5d10:	f1 f7       	brne	.-4      	; 0x5d0e <moveToRequiredAisle+0x880>
    5d12:	9a 8b       	std	Y+18, r25	; 0x12
    5d14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d16:	8b 89       	ldd	r24, Y+19	; 0x13
    5d18:	9c 89       	ldd	r25, Y+20	; 0x14
    5d1a:	01 97       	sbiw	r24, 0x01	; 1
    5d1c:	9c 8b       	std	Y+20, r25	; 0x14
    5d1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d20:	8b 89       	ldd	r24, Y+19	; 0x13
    5d22:	9c 89       	ldd	r25, Y+20	; 0x14
    5d24:	00 97       	sbiw	r24, 0x00	; 0
    5d26:	69 f7       	brne	.-38     	; 0x5d02 <moveToRequiredAisle+0x874>
    5d28:	14 c0       	rjmp	.+40     	; 0x5d52 <moveToRequiredAisle+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    5d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    5d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    5d30:	98 8d       	ldd	r25, Y+24	; 0x18
    5d32:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	9c 8b       	std	Y+20, r25	; 0x14
    5d3c:	8b 8b       	std	Y+19, r24	; 0x13
    5d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d40:	9c 89       	ldd	r25, Y+20	; 0x14
    5d42:	98 8b       	std	Y+16, r25	; 0x10
    5d44:	8f 87       	std	Y+15, r24	; 0x0f
    5d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d48:	98 89       	ldd	r25, Y+16	; 0x10
    5d4a:	01 97       	sbiw	r24, 0x01	; 1
    5d4c:	f1 f7       	brne	.-4      	; 0x5d4a <moveToRequiredAisle+0x8bc>
    5d4e:	98 8b       	std	Y+16, r25	; 0x10
    5d50:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			break;
		}
	}

	lcd_cursor(1,1);
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	61 e0       	ldi	r22, 0x01	; 1
    5d56:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
    my_lcd_string("Returned!!");
    5d5a:	85 e6       	ldi	r24, 0x65	; 101
    5d5c:	93 e0       	ldi	r25, 0x03	; 3
    5d5e:	0e 94 44 0b 	call	0x1688	; 0x1688 <my_lcd_string>
    stop();
    5d62:	0e 94 ae 0c 	call	0x195c	; 0x195c <stop>
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	aa ef       	ldi	r26, 0xFA	; 250
    5d6c:	b3 e4       	ldi	r27, 0x43	; 67
    5d6e:	8b 87       	std	Y+11, r24	; 0x0b
    5d70:	9c 87       	std	Y+12, r25	; 0x0c
    5d72:	ad 87       	std	Y+13, r26	; 0x0d
    5d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d7e:	26 e6       	ldi	r18, 0x66	; 102
    5d80:	36 e6       	ldi	r19, 0x66	; 102
    5d82:	46 e6       	ldi	r20, 0x66	; 102
    5d84:	55 e4       	ldi	r21, 0x45	; 69
    5d86:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	8f 83       	std	Y+7, r24	; 0x07
    5d90:	98 87       	std	Y+8, r25	; 0x08
    5d92:	a9 87       	std	Y+9, r26	; 0x09
    5d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d96:	6f 81       	ldd	r22, Y+7	; 0x07
    5d98:	78 85       	ldd	r23, Y+8	; 0x08
    5d9a:	89 85       	ldd	r24, Y+9	; 0x09
    5d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e8       	ldi	r20, 0x80	; 128
    5da4:	5f e3       	ldi	r21, 0x3F	; 63
    5da6:	0e 94 1c 33 	call	0x6638	; 0x6638 <__ltsf2>
    5daa:	88 23       	and	r24, r24
    5dac:	2c f4       	brge	.+10     	; 0x5db8 <moveToRequiredAisle+0x92a>
		__ticks = 1;
    5dae:	81 e0       	ldi	r24, 0x01	; 1
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	9e 83       	std	Y+6, r25	; 0x06
    5db4:	8d 83       	std	Y+5, r24	; 0x05
    5db6:	3f c0       	rjmp	.+126    	; 0x5e36 <moveToRequiredAisle+0x9a8>
	else if (__tmp > 65535)
    5db8:	6f 81       	ldd	r22, Y+7	; 0x07
    5dba:	78 85       	ldd	r23, Y+8	; 0x08
    5dbc:	89 85       	ldd	r24, Y+9	; 0x09
    5dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dc0:	20 e0       	ldi	r18, 0x00	; 0
    5dc2:	3f ef       	ldi	r19, 0xFF	; 255
    5dc4:	4f e7       	ldi	r20, 0x7F	; 127
    5dc6:	57 e4       	ldi	r21, 0x47	; 71
    5dc8:	0e 94 bc 32 	call	0x6578	; 0x6578 <__gtsf2>
    5dcc:	18 16       	cp	r1, r24
    5dce:	4c f5       	brge	.+82     	; 0x5e22 <moveToRequiredAisle+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	40 e2       	ldi	r20, 0x20	; 32
    5dde:	51 e4       	ldi	r21, 0x41	; 65
    5de0:	0e 94 16 31 	call	0x622c	; 0x622c <__mulsf3>
    5de4:	dc 01       	movw	r26, r24
    5de6:	cb 01       	movw	r24, r22
    5de8:	bc 01       	movw	r22, r24
    5dea:	cd 01       	movw	r24, r26
    5dec:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5df0:	dc 01       	movw	r26, r24
    5df2:	cb 01       	movw	r24, r22
    5df4:	9e 83       	std	Y+6, r25	; 0x06
    5df6:	8d 83       	std	Y+5, r24	; 0x05
    5df8:	0f c0       	rjmp	.+30     	; 0x5e18 <moveToRequiredAisle+0x98a>
    5dfa:	80 e7       	ldi	r24, 0x70	; 112
    5dfc:	91 e0       	ldi	r25, 0x01	; 1
    5dfe:	9c 83       	std	Y+4, r25	; 0x04
    5e00:	8b 83       	std	Y+3, r24	; 0x03
    5e02:	8b 81       	ldd	r24, Y+3	; 0x03
    5e04:	9c 81       	ldd	r25, Y+4	; 0x04
    5e06:	01 97       	sbiw	r24, 0x01	; 1
    5e08:	f1 f7       	brne	.-4      	; 0x5e06 <moveToRequiredAisle+0x978>
    5e0a:	9c 83       	std	Y+4, r25	; 0x04
    5e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e10:	9e 81       	ldd	r25, Y+6	; 0x06
    5e12:	01 97       	sbiw	r24, 0x01	; 1
    5e14:	9e 83       	std	Y+6, r25	; 0x06
    5e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e18:	8d 81       	ldd	r24, Y+5	; 0x05
    5e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e1c:	00 97       	sbiw	r24, 0x00	; 0
    5e1e:	69 f7       	brne	.-38     	; 0x5dfa <moveToRequiredAisle+0x96c>
    5e20:	14 c0       	rjmp	.+40     	; 0x5e4a <moveToRequiredAisle+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e22:	6f 81       	ldd	r22, Y+7	; 0x07
    5e24:	78 85       	ldd	r23, Y+8	; 0x08
    5e26:	89 85       	ldd	r24, Y+9	; 0x09
    5e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e2a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__fixunssfsi>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	9e 83       	std	Y+6, r25	; 0x06
    5e34:	8d 83       	std	Y+5, r24	; 0x05
    5e36:	8d 81       	ldd	r24, Y+5	; 0x05
    5e38:	9e 81       	ldd	r25, Y+6	; 0x06
    5e3a:	9a 83       	std	Y+2, r25	; 0x02
    5e3c:	89 83       	std	Y+1, r24	; 0x01
    5e3e:	89 81       	ldd	r24, Y+1	; 0x01
    5e40:	9a 81       	ldd	r25, Y+2	; 0x02
    5e42:	01 97       	sbiw	r24, 0x01	; 1
    5e44:	f1 f7       	brne	.-4      	; 0x5e42 <moveToRequiredAisle+0x9b4>
    5e46:	9a 83       	std	Y+2, r25	; 0x02
    5e48:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(DELAY);
    return;
}
    5e4a:	c6 59       	subi	r28, 0x96	; 150
    5e4c:	df 4f       	sbci	r29, 0xFF	; 255
    5e4e:	0f b6       	in	r0, 0x3f	; 63
    5e50:	f8 94       	cli
    5e52:	de bf       	out	0x3e, r29	; 62
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	cd bf       	out	0x3d, r28	; 61
    5e58:	cf 91       	pop	r28
    5e5a:	df 91       	pop	r29
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	08 95       	ret

00005e62 <main>:


//Main Function
int main(void)
{
    5e62:	df 93       	push	r29
    5e64:	cf 93       	push	r28
    5e66:	cd b7       	in	r28, 0x3d	; 61
    5e68:	de b7       	in	r29, 0x3e	; 62
	botId = 2; //BOTID set which is identified by the remote interface
    5e6a:	82 e0       	ldi	r24, 0x02	; 2
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	90 93 92 04 	sts	0x0492, r25
    5e72:	80 93 91 04 	sts	0x0491, r24
	cli(); //Clears the global interrupts
    5e76:	f8 94       	cli
	uart0_init(); //Initailize UART1 for serial communiaction
    5e78:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart0_init>
	sei();   // Enables the global interrupt
    5e7c:	78 94       	sei
    5e7e:	ff cf       	rjmp	.-2      	; 0x5e7e <main+0x1c>

00005e80 <__fixunssfsi>:
    5e80:	ef 92       	push	r14
    5e82:	ff 92       	push	r15
    5e84:	0f 93       	push	r16
    5e86:	1f 93       	push	r17
    5e88:	7b 01       	movw	r14, r22
    5e8a:	8c 01       	movw	r16, r24
    5e8c:	20 e0       	ldi	r18, 0x00	; 0
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	40 e0       	ldi	r20, 0x00	; 0
    5e92:	5f e4       	ldi	r21, 0x4F	; 79
    5e94:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <__gesf2>
    5e98:	88 23       	and	r24, r24
    5e9a:	8c f0       	brlt	.+34     	; 0x5ebe <__fixunssfsi+0x3e>
    5e9c:	c8 01       	movw	r24, r16
    5e9e:	b7 01       	movw	r22, r14
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	30 e0       	ldi	r19, 0x00	; 0
    5ea4:	40 e0       	ldi	r20, 0x00	; 0
    5ea6:	5f e4       	ldi	r21, 0x4F	; 79
    5ea8:	0e 94 b8 30 	call	0x6170	; 0x6170 <__subsf3>
    5eac:	0e 94 4c 33 	call	0x6698	; 0x6698 <__fixsfsi>
    5eb0:	9b 01       	movw	r18, r22
    5eb2:	ac 01       	movw	r20, r24
    5eb4:	20 50       	subi	r18, 0x00	; 0
    5eb6:	30 40       	sbci	r19, 0x00	; 0
    5eb8:	40 40       	sbci	r20, 0x00	; 0
    5eba:	50 48       	sbci	r21, 0x80	; 128
    5ebc:	06 c0       	rjmp	.+12     	; 0x5eca <__fixunssfsi+0x4a>
    5ebe:	c8 01       	movw	r24, r16
    5ec0:	b7 01       	movw	r22, r14
    5ec2:	0e 94 4c 33 	call	0x6698	; 0x6698 <__fixsfsi>
    5ec6:	9b 01       	movw	r18, r22
    5ec8:	ac 01       	movw	r20, r24
    5eca:	b9 01       	movw	r22, r18
    5ecc:	ca 01       	movw	r24, r20
    5ece:	1f 91       	pop	r17
    5ed0:	0f 91       	pop	r16
    5ed2:	ff 90       	pop	r15
    5ed4:	ef 90       	pop	r14
    5ed6:	08 95       	ret

00005ed8 <_fpadd_parts>:
    5ed8:	a0 e0       	ldi	r26, 0x00	; 0
    5eda:	b0 e0       	ldi	r27, 0x00	; 0
    5edc:	e2 e7       	ldi	r30, 0x72	; 114
    5ede:	ff e2       	ldi	r31, 0x2F	; 47
    5ee0:	0c 94 48 36 	jmp	0x6c90	; 0x6c90 <__prologue_saves__>
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	2b 01       	movw	r4, r22
    5ee8:	fa 01       	movw	r30, r20
    5eea:	9c 91       	ld	r25, X
    5eec:	92 30       	cpi	r25, 0x02	; 2
    5eee:	08 f4       	brcc	.+2      	; 0x5ef2 <_fpadd_parts+0x1a>
    5ef0:	39 c1       	rjmp	.+626    	; 0x6164 <_fpadd_parts+0x28c>
    5ef2:	eb 01       	movw	r28, r22
    5ef4:	88 81       	ld	r24, Y
    5ef6:	82 30       	cpi	r24, 0x02	; 2
    5ef8:	08 f4       	brcc	.+2      	; 0x5efc <_fpadd_parts+0x24>
    5efa:	33 c1       	rjmp	.+614    	; 0x6162 <_fpadd_parts+0x28a>
    5efc:	94 30       	cpi	r25, 0x04	; 4
    5efe:	69 f4       	brne	.+26     	; 0x5f1a <_fpadd_parts+0x42>
    5f00:	84 30       	cpi	r24, 0x04	; 4
    5f02:	09 f0       	breq	.+2      	; 0x5f06 <_fpadd_parts+0x2e>
    5f04:	2f c1       	rjmp	.+606    	; 0x6164 <_fpadd_parts+0x28c>
    5f06:	11 96       	adiw	r26, 0x01	; 1
    5f08:	9c 91       	ld	r25, X
    5f0a:	11 97       	sbiw	r26, 0x01	; 1
    5f0c:	89 81       	ldd	r24, Y+1	; 0x01
    5f0e:	98 17       	cp	r25, r24
    5f10:	09 f4       	brne	.+2      	; 0x5f14 <_fpadd_parts+0x3c>
    5f12:	28 c1       	rjmp	.+592    	; 0x6164 <_fpadd_parts+0x28c>
    5f14:	a0 e7       	ldi	r26, 0x70	; 112
    5f16:	b3 e0       	ldi	r27, 0x03	; 3
    5f18:	25 c1       	rjmp	.+586    	; 0x6164 <_fpadd_parts+0x28c>
    5f1a:	84 30       	cpi	r24, 0x04	; 4
    5f1c:	09 f4       	brne	.+2      	; 0x5f20 <_fpadd_parts+0x48>
    5f1e:	21 c1       	rjmp	.+578    	; 0x6162 <_fpadd_parts+0x28a>
    5f20:	82 30       	cpi	r24, 0x02	; 2
    5f22:	a9 f4       	brne	.+42     	; 0x5f4e <_fpadd_parts+0x76>
    5f24:	92 30       	cpi	r25, 0x02	; 2
    5f26:	09 f0       	breq	.+2      	; 0x5f2a <_fpadd_parts+0x52>
    5f28:	1d c1       	rjmp	.+570    	; 0x6164 <_fpadd_parts+0x28c>
    5f2a:	9a 01       	movw	r18, r20
    5f2c:	ad 01       	movw	r20, r26
    5f2e:	88 e0       	ldi	r24, 0x08	; 8
    5f30:	ea 01       	movw	r28, r20
    5f32:	09 90       	ld	r0, Y+
    5f34:	ae 01       	movw	r20, r28
    5f36:	e9 01       	movw	r28, r18
    5f38:	09 92       	st	Y+, r0
    5f3a:	9e 01       	movw	r18, r28
    5f3c:	81 50       	subi	r24, 0x01	; 1
    5f3e:	c1 f7       	brne	.-16     	; 0x5f30 <_fpadd_parts+0x58>
    5f40:	e2 01       	movw	r28, r4
    5f42:	89 81       	ldd	r24, Y+1	; 0x01
    5f44:	11 96       	adiw	r26, 0x01	; 1
    5f46:	9c 91       	ld	r25, X
    5f48:	89 23       	and	r24, r25
    5f4a:	81 83       	std	Z+1, r24	; 0x01
    5f4c:	08 c1       	rjmp	.+528    	; 0x615e <_fpadd_parts+0x286>
    5f4e:	92 30       	cpi	r25, 0x02	; 2
    5f50:	09 f4       	brne	.+2      	; 0x5f54 <_fpadd_parts+0x7c>
    5f52:	07 c1       	rjmp	.+526    	; 0x6162 <_fpadd_parts+0x28a>
    5f54:	12 96       	adiw	r26, 0x02	; 2
    5f56:	2d 90       	ld	r2, X+
    5f58:	3c 90       	ld	r3, X
    5f5a:	13 97       	sbiw	r26, 0x03	; 3
    5f5c:	eb 01       	movw	r28, r22
    5f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f60:	9b 81       	ldd	r25, Y+3	; 0x03
    5f62:	14 96       	adiw	r26, 0x04	; 4
    5f64:	ad 90       	ld	r10, X+
    5f66:	bd 90       	ld	r11, X+
    5f68:	cd 90       	ld	r12, X+
    5f6a:	dc 90       	ld	r13, X
    5f6c:	17 97       	sbiw	r26, 0x07	; 7
    5f6e:	ec 80       	ldd	r14, Y+4	; 0x04
    5f70:	fd 80       	ldd	r15, Y+5	; 0x05
    5f72:	0e 81       	ldd	r16, Y+6	; 0x06
    5f74:	1f 81       	ldd	r17, Y+7	; 0x07
    5f76:	91 01       	movw	r18, r2
    5f78:	28 1b       	sub	r18, r24
    5f7a:	39 0b       	sbc	r19, r25
    5f7c:	b9 01       	movw	r22, r18
    5f7e:	37 ff       	sbrs	r19, 7
    5f80:	04 c0       	rjmp	.+8      	; 0x5f8a <_fpadd_parts+0xb2>
    5f82:	66 27       	eor	r22, r22
    5f84:	77 27       	eor	r23, r23
    5f86:	62 1b       	sub	r22, r18
    5f88:	73 0b       	sbc	r23, r19
    5f8a:	60 32       	cpi	r22, 0x20	; 32
    5f8c:	71 05       	cpc	r23, r1
    5f8e:	0c f0       	brlt	.+2      	; 0x5f92 <_fpadd_parts+0xba>
    5f90:	61 c0       	rjmp	.+194    	; 0x6054 <_fpadd_parts+0x17c>
    5f92:	12 16       	cp	r1, r18
    5f94:	13 06       	cpc	r1, r19
    5f96:	6c f5       	brge	.+90     	; 0x5ff2 <_fpadd_parts+0x11a>
    5f98:	37 01       	movw	r6, r14
    5f9a:	48 01       	movw	r8, r16
    5f9c:	06 2e       	mov	r0, r22
    5f9e:	04 c0       	rjmp	.+8      	; 0x5fa8 <_fpadd_parts+0xd0>
    5fa0:	96 94       	lsr	r9
    5fa2:	87 94       	ror	r8
    5fa4:	77 94       	ror	r7
    5fa6:	67 94       	ror	r6
    5fa8:	0a 94       	dec	r0
    5faa:	d2 f7       	brpl	.-12     	; 0x5fa0 <_fpadd_parts+0xc8>
    5fac:	21 e0       	ldi	r18, 0x01	; 1
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	40 e0       	ldi	r20, 0x00	; 0
    5fb2:	50 e0       	ldi	r21, 0x00	; 0
    5fb4:	04 c0       	rjmp	.+8      	; 0x5fbe <_fpadd_parts+0xe6>
    5fb6:	22 0f       	add	r18, r18
    5fb8:	33 1f       	adc	r19, r19
    5fba:	44 1f       	adc	r20, r20
    5fbc:	55 1f       	adc	r21, r21
    5fbe:	6a 95       	dec	r22
    5fc0:	d2 f7       	brpl	.-12     	; 0x5fb6 <_fpadd_parts+0xde>
    5fc2:	21 50       	subi	r18, 0x01	; 1
    5fc4:	30 40       	sbci	r19, 0x00	; 0
    5fc6:	40 40       	sbci	r20, 0x00	; 0
    5fc8:	50 40       	sbci	r21, 0x00	; 0
    5fca:	2e 21       	and	r18, r14
    5fcc:	3f 21       	and	r19, r15
    5fce:	40 23       	and	r20, r16
    5fd0:	51 23       	and	r21, r17
    5fd2:	21 15       	cp	r18, r1
    5fd4:	31 05       	cpc	r19, r1
    5fd6:	41 05       	cpc	r20, r1
    5fd8:	51 05       	cpc	r21, r1
    5fda:	21 f0       	breq	.+8      	; 0x5fe4 <_fpadd_parts+0x10c>
    5fdc:	21 e0       	ldi	r18, 0x01	; 1
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	40 e0       	ldi	r20, 0x00	; 0
    5fe2:	50 e0       	ldi	r21, 0x00	; 0
    5fe4:	79 01       	movw	r14, r18
    5fe6:	8a 01       	movw	r16, r20
    5fe8:	e6 28       	or	r14, r6
    5fea:	f7 28       	or	r15, r7
    5fec:	08 29       	or	r16, r8
    5fee:	19 29       	or	r17, r9
    5ff0:	3c c0       	rjmp	.+120    	; 0x606a <_fpadd_parts+0x192>
    5ff2:	23 2b       	or	r18, r19
    5ff4:	d1 f1       	breq	.+116    	; 0x606a <_fpadd_parts+0x192>
    5ff6:	26 0e       	add	r2, r22
    5ff8:	37 1e       	adc	r3, r23
    5ffa:	35 01       	movw	r6, r10
    5ffc:	46 01       	movw	r8, r12
    5ffe:	06 2e       	mov	r0, r22
    6000:	04 c0       	rjmp	.+8      	; 0x600a <_fpadd_parts+0x132>
    6002:	96 94       	lsr	r9
    6004:	87 94       	ror	r8
    6006:	77 94       	ror	r7
    6008:	67 94       	ror	r6
    600a:	0a 94       	dec	r0
    600c:	d2 f7       	brpl	.-12     	; 0x6002 <_fpadd_parts+0x12a>
    600e:	21 e0       	ldi	r18, 0x01	; 1
    6010:	30 e0       	ldi	r19, 0x00	; 0
    6012:	40 e0       	ldi	r20, 0x00	; 0
    6014:	50 e0       	ldi	r21, 0x00	; 0
    6016:	04 c0       	rjmp	.+8      	; 0x6020 <_fpadd_parts+0x148>
    6018:	22 0f       	add	r18, r18
    601a:	33 1f       	adc	r19, r19
    601c:	44 1f       	adc	r20, r20
    601e:	55 1f       	adc	r21, r21
    6020:	6a 95       	dec	r22
    6022:	d2 f7       	brpl	.-12     	; 0x6018 <_fpadd_parts+0x140>
    6024:	21 50       	subi	r18, 0x01	; 1
    6026:	30 40       	sbci	r19, 0x00	; 0
    6028:	40 40       	sbci	r20, 0x00	; 0
    602a:	50 40       	sbci	r21, 0x00	; 0
    602c:	2a 21       	and	r18, r10
    602e:	3b 21       	and	r19, r11
    6030:	4c 21       	and	r20, r12
    6032:	5d 21       	and	r21, r13
    6034:	21 15       	cp	r18, r1
    6036:	31 05       	cpc	r19, r1
    6038:	41 05       	cpc	r20, r1
    603a:	51 05       	cpc	r21, r1
    603c:	21 f0       	breq	.+8      	; 0x6046 <_fpadd_parts+0x16e>
    603e:	21 e0       	ldi	r18, 0x01	; 1
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	40 e0       	ldi	r20, 0x00	; 0
    6044:	50 e0       	ldi	r21, 0x00	; 0
    6046:	59 01       	movw	r10, r18
    6048:	6a 01       	movw	r12, r20
    604a:	a6 28       	or	r10, r6
    604c:	b7 28       	or	r11, r7
    604e:	c8 28       	or	r12, r8
    6050:	d9 28       	or	r13, r9
    6052:	0b c0       	rjmp	.+22     	; 0x606a <_fpadd_parts+0x192>
    6054:	82 15       	cp	r24, r2
    6056:	93 05       	cpc	r25, r3
    6058:	2c f0       	brlt	.+10     	; 0x6064 <_fpadd_parts+0x18c>
    605a:	1c 01       	movw	r2, r24
    605c:	aa 24       	eor	r10, r10
    605e:	bb 24       	eor	r11, r11
    6060:	65 01       	movw	r12, r10
    6062:	03 c0       	rjmp	.+6      	; 0x606a <_fpadd_parts+0x192>
    6064:	ee 24       	eor	r14, r14
    6066:	ff 24       	eor	r15, r15
    6068:	87 01       	movw	r16, r14
    606a:	11 96       	adiw	r26, 0x01	; 1
    606c:	9c 91       	ld	r25, X
    606e:	d2 01       	movw	r26, r4
    6070:	11 96       	adiw	r26, 0x01	; 1
    6072:	8c 91       	ld	r24, X
    6074:	98 17       	cp	r25, r24
    6076:	09 f4       	brne	.+2      	; 0x607a <_fpadd_parts+0x1a2>
    6078:	45 c0       	rjmp	.+138    	; 0x6104 <_fpadd_parts+0x22c>
    607a:	99 23       	and	r25, r25
    607c:	39 f0       	breq	.+14     	; 0x608c <_fpadd_parts+0x1b4>
    607e:	a8 01       	movw	r20, r16
    6080:	97 01       	movw	r18, r14
    6082:	2a 19       	sub	r18, r10
    6084:	3b 09       	sbc	r19, r11
    6086:	4c 09       	sbc	r20, r12
    6088:	5d 09       	sbc	r21, r13
    608a:	06 c0       	rjmp	.+12     	; 0x6098 <_fpadd_parts+0x1c0>
    608c:	a6 01       	movw	r20, r12
    608e:	95 01       	movw	r18, r10
    6090:	2e 19       	sub	r18, r14
    6092:	3f 09       	sbc	r19, r15
    6094:	40 0b       	sbc	r20, r16
    6096:	51 0b       	sbc	r21, r17
    6098:	57 fd       	sbrc	r21, 7
    609a:	08 c0       	rjmp	.+16     	; 0x60ac <_fpadd_parts+0x1d4>
    609c:	11 82       	std	Z+1, r1	; 0x01
    609e:	33 82       	std	Z+3, r3	; 0x03
    60a0:	22 82       	std	Z+2, r2	; 0x02
    60a2:	24 83       	std	Z+4, r18	; 0x04
    60a4:	35 83       	std	Z+5, r19	; 0x05
    60a6:	46 83       	std	Z+6, r20	; 0x06
    60a8:	57 83       	std	Z+7, r21	; 0x07
    60aa:	1d c0       	rjmp	.+58     	; 0x60e6 <_fpadd_parts+0x20e>
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	81 83       	std	Z+1, r24	; 0x01
    60b0:	33 82       	std	Z+3, r3	; 0x03
    60b2:	22 82       	std	Z+2, r2	; 0x02
    60b4:	88 27       	eor	r24, r24
    60b6:	99 27       	eor	r25, r25
    60b8:	dc 01       	movw	r26, r24
    60ba:	82 1b       	sub	r24, r18
    60bc:	93 0b       	sbc	r25, r19
    60be:	a4 0b       	sbc	r26, r20
    60c0:	b5 0b       	sbc	r27, r21
    60c2:	84 83       	std	Z+4, r24	; 0x04
    60c4:	95 83       	std	Z+5, r25	; 0x05
    60c6:	a6 83       	std	Z+6, r26	; 0x06
    60c8:	b7 83       	std	Z+7, r27	; 0x07
    60ca:	0d c0       	rjmp	.+26     	; 0x60e6 <_fpadd_parts+0x20e>
    60cc:	22 0f       	add	r18, r18
    60ce:	33 1f       	adc	r19, r19
    60d0:	44 1f       	adc	r20, r20
    60d2:	55 1f       	adc	r21, r21
    60d4:	24 83       	std	Z+4, r18	; 0x04
    60d6:	35 83       	std	Z+5, r19	; 0x05
    60d8:	46 83       	std	Z+6, r20	; 0x06
    60da:	57 83       	std	Z+7, r21	; 0x07
    60dc:	82 81       	ldd	r24, Z+2	; 0x02
    60de:	93 81       	ldd	r25, Z+3	; 0x03
    60e0:	01 97       	sbiw	r24, 0x01	; 1
    60e2:	93 83       	std	Z+3, r25	; 0x03
    60e4:	82 83       	std	Z+2, r24	; 0x02
    60e6:	24 81       	ldd	r18, Z+4	; 0x04
    60e8:	35 81       	ldd	r19, Z+5	; 0x05
    60ea:	46 81       	ldd	r20, Z+6	; 0x06
    60ec:	57 81       	ldd	r21, Z+7	; 0x07
    60ee:	da 01       	movw	r26, r20
    60f0:	c9 01       	movw	r24, r18
    60f2:	01 97       	sbiw	r24, 0x01	; 1
    60f4:	a1 09       	sbc	r26, r1
    60f6:	b1 09       	sbc	r27, r1
    60f8:	8f 5f       	subi	r24, 0xFF	; 255
    60fa:	9f 4f       	sbci	r25, 0xFF	; 255
    60fc:	af 4f       	sbci	r26, 0xFF	; 255
    60fe:	bf 43       	sbci	r27, 0x3F	; 63
    6100:	28 f3       	brcs	.-54     	; 0x60cc <_fpadd_parts+0x1f4>
    6102:	0b c0       	rjmp	.+22     	; 0x611a <_fpadd_parts+0x242>
    6104:	91 83       	std	Z+1, r25	; 0x01
    6106:	33 82       	std	Z+3, r3	; 0x03
    6108:	22 82       	std	Z+2, r2	; 0x02
    610a:	ea 0c       	add	r14, r10
    610c:	fb 1c       	adc	r15, r11
    610e:	0c 1d       	adc	r16, r12
    6110:	1d 1d       	adc	r17, r13
    6112:	e4 82       	std	Z+4, r14	; 0x04
    6114:	f5 82       	std	Z+5, r15	; 0x05
    6116:	06 83       	std	Z+6, r16	; 0x06
    6118:	17 83       	std	Z+7, r17	; 0x07
    611a:	83 e0       	ldi	r24, 0x03	; 3
    611c:	80 83       	st	Z, r24
    611e:	24 81       	ldd	r18, Z+4	; 0x04
    6120:	35 81       	ldd	r19, Z+5	; 0x05
    6122:	46 81       	ldd	r20, Z+6	; 0x06
    6124:	57 81       	ldd	r21, Z+7	; 0x07
    6126:	57 ff       	sbrs	r21, 7
    6128:	1a c0       	rjmp	.+52     	; 0x615e <_fpadd_parts+0x286>
    612a:	c9 01       	movw	r24, r18
    612c:	aa 27       	eor	r26, r26
    612e:	97 fd       	sbrc	r25, 7
    6130:	a0 95       	com	r26
    6132:	ba 2f       	mov	r27, r26
    6134:	81 70       	andi	r24, 0x01	; 1
    6136:	90 70       	andi	r25, 0x00	; 0
    6138:	a0 70       	andi	r26, 0x00	; 0
    613a:	b0 70       	andi	r27, 0x00	; 0
    613c:	56 95       	lsr	r21
    613e:	47 95       	ror	r20
    6140:	37 95       	ror	r19
    6142:	27 95       	ror	r18
    6144:	82 2b       	or	r24, r18
    6146:	93 2b       	or	r25, r19
    6148:	a4 2b       	or	r26, r20
    614a:	b5 2b       	or	r27, r21
    614c:	84 83       	std	Z+4, r24	; 0x04
    614e:	95 83       	std	Z+5, r25	; 0x05
    6150:	a6 83       	std	Z+6, r26	; 0x06
    6152:	b7 83       	std	Z+7, r27	; 0x07
    6154:	82 81       	ldd	r24, Z+2	; 0x02
    6156:	93 81       	ldd	r25, Z+3	; 0x03
    6158:	01 96       	adiw	r24, 0x01	; 1
    615a:	93 83       	std	Z+3, r25	; 0x03
    615c:	82 83       	std	Z+2, r24	; 0x02
    615e:	df 01       	movw	r26, r30
    6160:	01 c0       	rjmp	.+2      	; 0x6164 <_fpadd_parts+0x28c>
    6162:	d2 01       	movw	r26, r4
    6164:	cd 01       	movw	r24, r26
    6166:	cd b7       	in	r28, 0x3d	; 61
    6168:	de b7       	in	r29, 0x3e	; 62
    616a:	e2 e1       	ldi	r30, 0x12	; 18
    616c:	0c 94 64 36 	jmp	0x6cc8	; 0x6cc8 <__epilogue_restores__>

00006170 <__subsf3>:
    6170:	a0 e2       	ldi	r26, 0x20	; 32
    6172:	b0 e0       	ldi	r27, 0x00	; 0
    6174:	ee eb       	ldi	r30, 0xBE	; 190
    6176:	f0 e3       	ldi	r31, 0x30	; 48
    6178:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__prologue_saves__+0x18>
    617c:	69 83       	std	Y+1, r22	; 0x01
    617e:	7a 83       	std	Y+2, r23	; 0x02
    6180:	8b 83       	std	Y+3, r24	; 0x03
    6182:	9c 83       	std	Y+4, r25	; 0x04
    6184:	2d 83       	std	Y+5, r18	; 0x05
    6186:	3e 83       	std	Y+6, r19	; 0x06
    6188:	4f 83       	std	Y+7, r20	; 0x07
    618a:	58 87       	std	Y+8, r21	; 0x08
    618c:	e9 e0       	ldi	r30, 0x09	; 9
    618e:	ee 2e       	mov	r14, r30
    6190:	f1 2c       	mov	r15, r1
    6192:	ec 0e       	add	r14, r28
    6194:	fd 1e       	adc	r15, r29
    6196:	ce 01       	movw	r24, r28
    6198:	01 96       	adiw	r24, 0x01	; 1
    619a:	b7 01       	movw	r22, r14
    619c:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    61a0:	8e 01       	movw	r16, r28
    61a2:	0f 5e       	subi	r16, 0xEF	; 239
    61a4:	1f 4f       	sbci	r17, 0xFF	; 255
    61a6:	ce 01       	movw	r24, r28
    61a8:	05 96       	adiw	r24, 0x05	; 5
    61aa:	b8 01       	movw	r22, r16
    61ac:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    61b0:	8a 89       	ldd	r24, Y+18	; 0x12
    61b2:	91 e0       	ldi	r25, 0x01	; 1
    61b4:	89 27       	eor	r24, r25
    61b6:	8a 8b       	std	Y+18, r24	; 0x12
    61b8:	c7 01       	movw	r24, r14
    61ba:	b8 01       	movw	r22, r16
    61bc:	ae 01       	movw	r20, r28
    61be:	47 5e       	subi	r20, 0xE7	; 231
    61c0:	5f 4f       	sbci	r21, 0xFF	; 255
    61c2:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <_fpadd_parts>
    61c6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__pack_f>
    61ca:	a0 96       	adiw	r28, 0x20	; 32
    61cc:	e6 e0       	ldi	r30, 0x06	; 6
    61ce:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__epilogue_restores__+0x18>

000061d2 <__addsf3>:
    61d2:	a0 e2       	ldi	r26, 0x20	; 32
    61d4:	b0 e0       	ldi	r27, 0x00	; 0
    61d6:	ef ee       	ldi	r30, 0xEF	; 239
    61d8:	f0 e3       	ldi	r31, 0x30	; 48
    61da:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__prologue_saves__+0x18>
    61de:	69 83       	std	Y+1, r22	; 0x01
    61e0:	7a 83       	std	Y+2, r23	; 0x02
    61e2:	8b 83       	std	Y+3, r24	; 0x03
    61e4:	9c 83       	std	Y+4, r25	; 0x04
    61e6:	2d 83       	std	Y+5, r18	; 0x05
    61e8:	3e 83       	std	Y+6, r19	; 0x06
    61ea:	4f 83       	std	Y+7, r20	; 0x07
    61ec:	58 87       	std	Y+8, r21	; 0x08
    61ee:	f9 e0       	ldi	r31, 0x09	; 9
    61f0:	ef 2e       	mov	r14, r31
    61f2:	f1 2c       	mov	r15, r1
    61f4:	ec 0e       	add	r14, r28
    61f6:	fd 1e       	adc	r15, r29
    61f8:	ce 01       	movw	r24, r28
    61fa:	01 96       	adiw	r24, 0x01	; 1
    61fc:	b7 01       	movw	r22, r14
    61fe:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6202:	8e 01       	movw	r16, r28
    6204:	0f 5e       	subi	r16, 0xEF	; 239
    6206:	1f 4f       	sbci	r17, 0xFF	; 255
    6208:	ce 01       	movw	r24, r28
    620a:	05 96       	adiw	r24, 0x05	; 5
    620c:	b8 01       	movw	r22, r16
    620e:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6212:	c7 01       	movw	r24, r14
    6214:	b8 01       	movw	r22, r16
    6216:	ae 01       	movw	r20, r28
    6218:	47 5e       	subi	r20, 0xE7	; 231
    621a:	5f 4f       	sbci	r21, 0xFF	; 255
    621c:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <_fpadd_parts>
    6220:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__pack_f>
    6224:	a0 96       	adiw	r28, 0x20	; 32
    6226:	e6 e0       	ldi	r30, 0x06	; 6
    6228:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__epilogue_restores__+0x18>

0000622c <__mulsf3>:
    622c:	a0 e2       	ldi	r26, 0x20	; 32
    622e:	b0 e0       	ldi	r27, 0x00	; 0
    6230:	ec e1       	ldi	r30, 0x1C	; 28
    6232:	f1 e3       	ldi	r31, 0x31	; 49
    6234:	0c 94 48 36 	jmp	0x6c90	; 0x6c90 <__prologue_saves__>
    6238:	69 83       	std	Y+1, r22	; 0x01
    623a:	7a 83       	std	Y+2, r23	; 0x02
    623c:	8b 83       	std	Y+3, r24	; 0x03
    623e:	9c 83       	std	Y+4, r25	; 0x04
    6240:	2d 83       	std	Y+5, r18	; 0x05
    6242:	3e 83       	std	Y+6, r19	; 0x06
    6244:	4f 83       	std	Y+7, r20	; 0x07
    6246:	58 87       	std	Y+8, r21	; 0x08
    6248:	ce 01       	movw	r24, r28
    624a:	01 96       	adiw	r24, 0x01	; 1
    624c:	be 01       	movw	r22, r28
    624e:	67 5f       	subi	r22, 0xF7	; 247
    6250:	7f 4f       	sbci	r23, 0xFF	; 255
    6252:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6256:	ce 01       	movw	r24, r28
    6258:	05 96       	adiw	r24, 0x05	; 5
    625a:	be 01       	movw	r22, r28
    625c:	6f 5e       	subi	r22, 0xEF	; 239
    625e:	7f 4f       	sbci	r23, 0xFF	; 255
    6260:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6264:	99 85       	ldd	r25, Y+9	; 0x09
    6266:	92 30       	cpi	r25, 0x02	; 2
    6268:	88 f0       	brcs	.+34     	; 0x628c <__mulsf3+0x60>
    626a:	89 89       	ldd	r24, Y+17	; 0x11
    626c:	82 30       	cpi	r24, 0x02	; 2
    626e:	c8 f0       	brcs	.+50     	; 0x62a2 <__mulsf3+0x76>
    6270:	94 30       	cpi	r25, 0x04	; 4
    6272:	19 f4       	brne	.+6      	; 0x627a <__mulsf3+0x4e>
    6274:	82 30       	cpi	r24, 0x02	; 2
    6276:	51 f4       	brne	.+20     	; 0x628c <__mulsf3+0x60>
    6278:	04 c0       	rjmp	.+8      	; 0x6282 <__mulsf3+0x56>
    627a:	84 30       	cpi	r24, 0x04	; 4
    627c:	29 f4       	brne	.+10     	; 0x6288 <__mulsf3+0x5c>
    627e:	92 30       	cpi	r25, 0x02	; 2
    6280:	81 f4       	brne	.+32     	; 0x62a2 <__mulsf3+0x76>
    6282:	80 e7       	ldi	r24, 0x70	; 112
    6284:	93 e0       	ldi	r25, 0x03	; 3
    6286:	c6 c0       	rjmp	.+396    	; 0x6414 <__mulsf3+0x1e8>
    6288:	92 30       	cpi	r25, 0x02	; 2
    628a:	49 f4       	brne	.+18     	; 0x629e <__mulsf3+0x72>
    628c:	20 e0       	ldi	r18, 0x00	; 0
    628e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6290:	8a 89       	ldd	r24, Y+18	; 0x12
    6292:	98 13       	cpse	r25, r24
    6294:	21 e0       	ldi	r18, 0x01	; 1
    6296:	2a 87       	std	Y+10, r18	; 0x0a
    6298:	ce 01       	movw	r24, r28
    629a:	09 96       	adiw	r24, 0x09	; 9
    629c:	bb c0       	rjmp	.+374    	; 0x6414 <__mulsf3+0x1e8>
    629e:	82 30       	cpi	r24, 0x02	; 2
    62a0:	49 f4       	brne	.+18     	; 0x62b4 <__mulsf3+0x88>
    62a2:	20 e0       	ldi	r18, 0x00	; 0
    62a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a6:	8a 89       	ldd	r24, Y+18	; 0x12
    62a8:	98 13       	cpse	r25, r24
    62aa:	21 e0       	ldi	r18, 0x01	; 1
    62ac:	2a 8b       	std	Y+18, r18	; 0x12
    62ae:	ce 01       	movw	r24, r28
    62b0:	41 96       	adiw	r24, 0x11	; 17
    62b2:	b0 c0       	rjmp	.+352    	; 0x6414 <__mulsf3+0x1e8>
    62b4:	2d 84       	ldd	r2, Y+13	; 0x0d
    62b6:	3e 84       	ldd	r3, Y+14	; 0x0e
    62b8:	4f 84       	ldd	r4, Y+15	; 0x0f
    62ba:	58 88       	ldd	r5, Y+16	; 0x10
    62bc:	6d 88       	ldd	r6, Y+21	; 0x15
    62be:	7e 88       	ldd	r7, Y+22	; 0x16
    62c0:	8f 88       	ldd	r8, Y+23	; 0x17
    62c2:	98 8c       	ldd	r9, Y+24	; 0x18
    62c4:	ee 24       	eor	r14, r14
    62c6:	ff 24       	eor	r15, r15
    62c8:	87 01       	movw	r16, r14
    62ca:	aa 24       	eor	r10, r10
    62cc:	bb 24       	eor	r11, r11
    62ce:	65 01       	movw	r12, r10
    62d0:	40 e0       	ldi	r20, 0x00	; 0
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	60 e0       	ldi	r22, 0x00	; 0
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	e0 e0       	ldi	r30, 0x00	; 0
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	c1 01       	movw	r24, r2
    62de:	81 70       	andi	r24, 0x01	; 1
    62e0:	90 70       	andi	r25, 0x00	; 0
    62e2:	89 2b       	or	r24, r25
    62e4:	e9 f0       	breq	.+58     	; 0x6320 <__mulsf3+0xf4>
    62e6:	e6 0c       	add	r14, r6
    62e8:	f7 1c       	adc	r15, r7
    62ea:	08 1d       	adc	r16, r8
    62ec:	19 1d       	adc	r17, r9
    62ee:	9a 01       	movw	r18, r20
    62f0:	ab 01       	movw	r20, r22
    62f2:	2a 0d       	add	r18, r10
    62f4:	3b 1d       	adc	r19, r11
    62f6:	4c 1d       	adc	r20, r12
    62f8:	5d 1d       	adc	r21, r13
    62fa:	80 e0       	ldi	r24, 0x00	; 0
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	a0 e0       	ldi	r26, 0x00	; 0
    6300:	b0 e0       	ldi	r27, 0x00	; 0
    6302:	e6 14       	cp	r14, r6
    6304:	f7 04       	cpc	r15, r7
    6306:	08 05       	cpc	r16, r8
    6308:	19 05       	cpc	r17, r9
    630a:	20 f4       	brcc	.+8      	; 0x6314 <__mulsf3+0xe8>
    630c:	81 e0       	ldi	r24, 0x01	; 1
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	a0 e0       	ldi	r26, 0x00	; 0
    6312:	b0 e0       	ldi	r27, 0x00	; 0
    6314:	ba 01       	movw	r22, r20
    6316:	a9 01       	movw	r20, r18
    6318:	48 0f       	add	r20, r24
    631a:	59 1f       	adc	r21, r25
    631c:	6a 1f       	adc	r22, r26
    631e:	7b 1f       	adc	r23, r27
    6320:	aa 0c       	add	r10, r10
    6322:	bb 1c       	adc	r11, r11
    6324:	cc 1c       	adc	r12, r12
    6326:	dd 1c       	adc	r13, r13
    6328:	97 fe       	sbrs	r9, 7
    632a:	08 c0       	rjmp	.+16     	; 0x633c <__mulsf3+0x110>
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	a0 e0       	ldi	r26, 0x00	; 0
    6332:	b0 e0       	ldi	r27, 0x00	; 0
    6334:	a8 2a       	or	r10, r24
    6336:	b9 2a       	or	r11, r25
    6338:	ca 2a       	or	r12, r26
    633a:	db 2a       	or	r13, r27
    633c:	31 96       	adiw	r30, 0x01	; 1
    633e:	e0 32       	cpi	r30, 0x20	; 32
    6340:	f1 05       	cpc	r31, r1
    6342:	49 f0       	breq	.+18     	; 0x6356 <__mulsf3+0x12a>
    6344:	66 0c       	add	r6, r6
    6346:	77 1c       	adc	r7, r7
    6348:	88 1c       	adc	r8, r8
    634a:	99 1c       	adc	r9, r9
    634c:	56 94       	lsr	r5
    634e:	47 94       	ror	r4
    6350:	37 94       	ror	r3
    6352:	27 94       	ror	r2
    6354:	c3 cf       	rjmp	.-122    	; 0x62dc <__mulsf3+0xb0>
    6356:	fa 85       	ldd	r31, Y+10	; 0x0a
    6358:	ea 89       	ldd	r30, Y+18	; 0x12
    635a:	2b 89       	ldd	r18, Y+19	; 0x13
    635c:	3c 89       	ldd	r19, Y+20	; 0x14
    635e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6360:	9c 85       	ldd	r25, Y+12	; 0x0c
    6362:	28 0f       	add	r18, r24
    6364:	39 1f       	adc	r19, r25
    6366:	2e 5f       	subi	r18, 0xFE	; 254
    6368:	3f 4f       	sbci	r19, 0xFF	; 255
    636a:	17 c0       	rjmp	.+46     	; 0x639a <__mulsf3+0x16e>
    636c:	ca 01       	movw	r24, r20
    636e:	81 70       	andi	r24, 0x01	; 1
    6370:	90 70       	andi	r25, 0x00	; 0
    6372:	89 2b       	or	r24, r25
    6374:	61 f0       	breq	.+24     	; 0x638e <__mulsf3+0x162>
    6376:	16 95       	lsr	r17
    6378:	07 95       	ror	r16
    637a:	f7 94       	ror	r15
    637c:	e7 94       	ror	r14
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	a0 e0       	ldi	r26, 0x00	; 0
    6384:	b0 e8       	ldi	r27, 0x80	; 128
    6386:	e8 2a       	or	r14, r24
    6388:	f9 2a       	or	r15, r25
    638a:	0a 2b       	or	r16, r26
    638c:	1b 2b       	or	r17, r27
    638e:	76 95       	lsr	r23
    6390:	67 95       	ror	r22
    6392:	57 95       	ror	r21
    6394:	47 95       	ror	r20
    6396:	2f 5f       	subi	r18, 0xFF	; 255
    6398:	3f 4f       	sbci	r19, 0xFF	; 255
    639a:	77 fd       	sbrc	r23, 7
    639c:	e7 cf       	rjmp	.-50     	; 0x636c <__mulsf3+0x140>
    639e:	0c c0       	rjmp	.+24     	; 0x63b8 <__mulsf3+0x18c>
    63a0:	44 0f       	add	r20, r20
    63a2:	55 1f       	adc	r21, r21
    63a4:	66 1f       	adc	r22, r22
    63a6:	77 1f       	adc	r23, r23
    63a8:	17 fd       	sbrc	r17, 7
    63aa:	41 60       	ori	r20, 0x01	; 1
    63ac:	ee 0c       	add	r14, r14
    63ae:	ff 1c       	adc	r15, r15
    63b0:	00 1f       	adc	r16, r16
    63b2:	11 1f       	adc	r17, r17
    63b4:	21 50       	subi	r18, 0x01	; 1
    63b6:	30 40       	sbci	r19, 0x00	; 0
    63b8:	40 30       	cpi	r20, 0x00	; 0
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	59 07       	cpc	r21, r25
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	69 07       	cpc	r22, r25
    63c2:	90 e4       	ldi	r25, 0x40	; 64
    63c4:	79 07       	cpc	r23, r25
    63c6:	60 f3       	brcs	.-40     	; 0x63a0 <__mulsf3+0x174>
    63c8:	2b 8f       	std	Y+27, r18	; 0x1b
    63ca:	3c 8f       	std	Y+28, r19	; 0x1c
    63cc:	db 01       	movw	r26, r22
    63ce:	ca 01       	movw	r24, r20
    63d0:	8f 77       	andi	r24, 0x7F	; 127
    63d2:	90 70       	andi	r25, 0x00	; 0
    63d4:	a0 70       	andi	r26, 0x00	; 0
    63d6:	b0 70       	andi	r27, 0x00	; 0
    63d8:	80 34       	cpi	r24, 0x40	; 64
    63da:	91 05       	cpc	r25, r1
    63dc:	a1 05       	cpc	r26, r1
    63de:	b1 05       	cpc	r27, r1
    63e0:	61 f4       	brne	.+24     	; 0x63fa <__mulsf3+0x1ce>
    63e2:	47 fd       	sbrc	r20, 7
    63e4:	0a c0       	rjmp	.+20     	; 0x63fa <__mulsf3+0x1ce>
    63e6:	e1 14       	cp	r14, r1
    63e8:	f1 04       	cpc	r15, r1
    63ea:	01 05       	cpc	r16, r1
    63ec:	11 05       	cpc	r17, r1
    63ee:	29 f0       	breq	.+10     	; 0x63fa <__mulsf3+0x1ce>
    63f0:	40 5c       	subi	r20, 0xC0	; 192
    63f2:	5f 4f       	sbci	r21, 0xFF	; 255
    63f4:	6f 4f       	sbci	r22, 0xFF	; 255
    63f6:	7f 4f       	sbci	r23, 0xFF	; 255
    63f8:	40 78       	andi	r20, 0x80	; 128
    63fa:	1a 8e       	std	Y+26, r1	; 0x1a
    63fc:	fe 17       	cp	r31, r30
    63fe:	11 f0       	breq	.+4      	; 0x6404 <__mulsf3+0x1d8>
    6400:	81 e0       	ldi	r24, 0x01	; 1
    6402:	8a 8f       	std	Y+26, r24	; 0x1a
    6404:	4d 8f       	std	Y+29, r20	; 0x1d
    6406:	5e 8f       	std	Y+30, r21	; 0x1e
    6408:	6f 8f       	std	Y+31, r22	; 0x1f
    640a:	78 a3       	std	Y+32, r23	; 0x20
    640c:	83 e0       	ldi	r24, 0x03	; 3
    640e:	89 8f       	std	Y+25, r24	; 0x19
    6410:	ce 01       	movw	r24, r28
    6412:	49 96       	adiw	r24, 0x19	; 25
    6414:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__pack_f>
    6418:	a0 96       	adiw	r28, 0x20	; 32
    641a:	e2 e1       	ldi	r30, 0x12	; 18
    641c:	0c 94 64 36 	jmp	0x6cc8	; 0x6cc8 <__epilogue_restores__>

00006420 <__divsf3>:
    6420:	a8 e1       	ldi	r26, 0x18	; 24
    6422:	b0 e0       	ldi	r27, 0x00	; 0
    6424:	e6 e1       	ldi	r30, 0x16	; 22
    6426:	f2 e3       	ldi	r31, 0x32	; 50
    6428:	0c 94 50 36 	jmp	0x6ca0	; 0x6ca0 <__prologue_saves__+0x10>
    642c:	69 83       	std	Y+1, r22	; 0x01
    642e:	7a 83       	std	Y+2, r23	; 0x02
    6430:	8b 83       	std	Y+3, r24	; 0x03
    6432:	9c 83       	std	Y+4, r25	; 0x04
    6434:	2d 83       	std	Y+5, r18	; 0x05
    6436:	3e 83       	std	Y+6, r19	; 0x06
    6438:	4f 83       	std	Y+7, r20	; 0x07
    643a:	58 87       	std	Y+8, r21	; 0x08
    643c:	b9 e0       	ldi	r27, 0x09	; 9
    643e:	eb 2e       	mov	r14, r27
    6440:	f1 2c       	mov	r15, r1
    6442:	ec 0e       	add	r14, r28
    6444:	fd 1e       	adc	r15, r29
    6446:	ce 01       	movw	r24, r28
    6448:	01 96       	adiw	r24, 0x01	; 1
    644a:	b7 01       	movw	r22, r14
    644c:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6450:	8e 01       	movw	r16, r28
    6452:	0f 5e       	subi	r16, 0xEF	; 239
    6454:	1f 4f       	sbci	r17, 0xFF	; 255
    6456:	ce 01       	movw	r24, r28
    6458:	05 96       	adiw	r24, 0x05	; 5
    645a:	b8 01       	movw	r22, r16
    645c:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6460:	29 85       	ldd	r18, Y+9	; 0x09
    6462:	22 30       	cpi	r18, 0x02	; 2
    6464:	08 f4       	brcc	.+2      	; 0x6468 <__divsf3+0x48>
    6466:	7e c0       	rjmp	.+252    	; 0x6564 <__divsf3+0x144>
    6468:	39 89       	ldd	r19, Y+17	; 0x11
    646a:	32 30       	cpi	r19, 0x02	; 2
    646c:	10 f4       	brcc	.+4      	; 0x6472 <__divsf3+0x52>
    646e:	b8 01       	movw	r22, r16
    6470:	7c c0       	rjmp	.+248    	; 0x656a <__divsf3+0x14a>
    6472:	8a 85       	ldd	r24, Y+10	; 0x0a
    6474:	9a 89       	ldd	r25, Y+18	; 0x12
    6476:	89 27       	eor	r24, r25
    6478:	8a 87       	std	Y+10, r24	; 0x0a
    647a:	24 30       	cpi	r18, 0x04	; 4
    647c:	11 f0       	breq	.+4      	; 0x6482 <__divsf3+0x62>
    647e:	22 30       	cpi	r18, 0x02	; 2
    6480:	31 f4       	brne	.+12     	; 0x648e <__divsf3+0x6e>
    6482:	23 17       	cp	r18, r19
    6484:	09 f0       	breq	.+2      	; 0x6488 <__divsf3+0x68>
    6486:	6e c0       	rjmp	.+220    	; 0x6564 <__divsf3+0x144>
    6488:	60 e7       	ldi	r22, 0x70	; 112
    648a:	73 e0       	ldi	r23, 0x03	; 3
    648c:	6e c0       	rjmp	.+220    	; 0x656a <__divsf3+0x14a>
    648e:	34 30       	cpi	r19, 0x04	; 4
    6490:	39 f4       	brne	.+14     	; 0x64a0 <__divsf3+0x80>
    6492:	1d 86       	std	Y+13, r1	; 0x0d
    6494:	1e 86       	std	Y+14, r1	; 0x0e
    6496:	1f 86       	std	Y+15, r1	; 0x0f
    6498:	18 8a       	std	Y+16, r1	; 0x10
    649a:	1c 86       	std	Y+12, r1	; 0x0c
    649c:	1b 86       	std	Y+11, r1	; 0x0b
    649e:	04 c0       	rjmp	.+8      	; 0x64a8 <__divsf3+0x88>
    64a0:	32 30       	cpi	r19, 0x02	; 2
    64a2:	21 f4       	brne	.+8      	; 0x64ac <__divsf3+0x8c>
    64a4:	84 e0       	ldi	r24, 0x04	; 4
    64a6:	89 87       	std	Y+9, r24	; 0x09
    64a8:	b7 01       	movw	r22, r14
    64aa:	5f c0       	rjmp	.+190    	; 0x656a <__divsf3+0x14a>
    64ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    64ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    64b0:	8b 89       	ldd	r24, Y+19	; 0x13
    64b2:	9c 89       	ldd	r25, Y+20	; 0x14
    64b4:	28 1b       	sub	r18, r24
    64b6:	39 0b       	sbc	r19, r25
    64b8:	3c 87       	std	Y+12, r19	; 0x0c
    64ba:	2b 87       	std	Y+11, r18	; 0x0b
    64bc:	ed 84       	ldd	r14, Y+13	; 0x0d
    64be:	fe 84       	ldd	r15, Y+14	; 0x0e
    64c0:	0f 85       	ldd	r16, Y+15	; 0x0f
    64c2:	18 89       	ldd	r17, Y+16	; 0x10
    64c4:	ad 88       	ldd	r10, Y+21	; 0x15
    64c6:	be 88       	ldd	r11, Y+22	; 0x16
    64c8:	cf 88       	ldd	r12, Y+23	; 0x17
    64ca:	d8 8c       	ldd	r13, Y+24	; 0x18
    64cc:	ea 14       	cp	r14, r10
    64ce:	fb 04       	cpc	r15, r11
    64d0:	0c 05       	cpc	r16, r12
    64d2:	1d 05       	cpc	r17, r13
    64d4:	40 f4       	brcc	.+16     	; 0x64e6 <__divsf3+0xc6>
    64d6:	ee 0c       	add	r14, r14
    64d8:	ff 1c       	adc	r15, r15
    64da:	00 1f       	adc	r16, r16
    64dc:	11 1f       	adc	r17, r17
    64de:	21 50       	subi	r18, 0x01	; 1
    64e0:	30 40       	sbci	r19, 0x00	; 0
    64e2:	3c 87       	std	Y+12, r19	; 0x0c
    64e4:	2b 87       	std	Y+11, r18	; 0x0b
    64e6:	20 e0       	ldi	r18, 0x00	; 0
    64e8:	30 e0       	ldi	r19, 0x00	; 0
    64ea:	40 e0       	ldi	r20, 0x00	; 0
    64ec:	50 e0       	ldi	r21, 0x00	; 0
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	a0 e0       	ldi	r26, 0x00	; 0
    64f4:	b0 e4       	ldi	r27, 0x40	; 64
    64f6:	60 e0       	ldi	r22, 0x00	; 0
    64f8:	70 e0       	ldi	r23, 0x00	; 0
    64fa:	ea 14       	cp	r14, r10
    64fc:	fb 04       	cpc	r15, r11
    64fe:	0c 05       	cpc	r16, r12
    6500:	1d 05       	cpc	r17, r13
    6502:	40 f0       	brcs	.+16     	; 0x6514 <__divsf3+0xf4>
    6504:	28 2b       	or	r18, r24
    6506:	39 2b       	or	r19, r25
    6508:	4a 2b       	or	r20, r26
    650a:	5b 2b       	or	r21, r27
    650c:	ea 18       	sub	r14, r10
    650e:	fb 08       	sbc	r15, r11
    6510:	0c 09       	sbc	r16, r12
    6512:	1d 09       	sbc	r17, r13
    6514:	b6 95       	lsr	r27
    6516:	a7 95       	ror	r26
    6518:	97 95       	ror	r25
    651a:	87 95       	ror	r24
    651c:	ee 0c       	add	r14, r14
    651e:	ff 1c       	adc	r15, r15
    6520:	00 1f       	adc	r16, r16
    6522:	11 1f       	adc	r17, r17
    6524:	6f 5f       	subi	r22, 0xFF	; 255
    6526:	7f 4f       	sbci	r23, 0xFF	; 255
    6528:	6f 31       	cpi	r22, 0x1F	; 31
    652a:	71 05       	cpc	r23, r1
    652c:	31 f7       	brne	.-52     	; 0x64fa <__divsf3+0xda>
    652e:	da 01       	movw	r26, r20
    6530:	c9 01       	movw	r24, r18
    6532:	8f 77       	andi	r24, 0x7F	; 127
    6534:	90 70       	andi	r25, 0x00	; 0
    6536:	a0 70       	andi	r26, 0x00	; 0
    6538:	b0 70       	andi	r27, 0x00	; 0
    653a:	80 34       	cpi	r24, 0x40	; 64
    653c:	91 05       	cpc	r25, r1
    653e:	a1 05       	cpc	r26, r1
    6540:	b1 05       	cpc	r27, r1
    6542:	61 f4       	brne	.+24     	; 0x655c <__divsf3+0x13c>
    6544:	27 fd       	sbrc	r18, 7
    6546:	0a c0       	rjmp	.+20     	; 0x655c <__divsf3+0x13c>
    6548:	e1 14       	cp	r14, r1
    654a:	f1 04       	cpc	r15, r1
    654c:	01 05       	cpc	r16, r1
    654e:	11 05       	cpc	r17, r1
    6550:	29 f0       	breq	.+10     	; 0x655c <__divsf3+0x13c>
    6552:	20 5c       	subi	r18, 0xC0	; 192
    6554:	3f 4f       	sbci	r19, 0xFF	; 255
    6556:	4f 4f       	sbci	r20, 0xFF	; 255
    6558:	5f 4f       	sbci	r21, 0xFF	; 255
    655a:	20 78       	andi	r18, 0x80	; 128
    655c:	2d 87       	std	Y+13, r18	; 0x0d
    655e:	3e 87       	std	Y+14, r19	; 0x0e
    6560:	4f 87       	std	Y+15, r20	; 0x0f
    6562:	58 8b       	std	Y+16, r21	; 0x10
    6564:	be 01       	movw	r22, r28
    6566:	67 5f       	subi	r22, 0xF7	; 247
    6568:	7f 4f       	sbci	r23, 0xFF	; 255
    656a:	cb 01       	movw	r24, r22
    656c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__pack_f>
    6570:	68 96       	adiw	r28, 0x18	; 24
    6572:	ea e0       	ldi	r30, 0x0A	; 10
    6574:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <__epilogue_restores__+0x10>

00006578 <__gtsf2>:
    6578:	a8 e1       	ldi	r26, 0x18	; 24
    657a:	b0 e0       	ldi	r27, 0x00	; 0
    657c:	e2 ec       	ldi	r30, 0xC2	; 194
    657e:	f2 e3       	ldi	r31, 0x32	; 50
    6580:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__prologue_saves__+0x18>
    6584:	69 83       	std	Y+1, r22	; 0x01
    6586:	7a 83       	std	Y+2, r23	; 0x02
    6588:	8b 83       	std	Y+3, r24	; 0x03
    658a:	9c 83       	std	Y+4, r25	; 0x04
    658c:	2d 83       	std	Y+5, r18	; 0x05
    658e:	3e 83       	std	Y+6, r19	; 0x06
    6590:	4f 83       	std	Y+7, r20	; 0x07
    6592:	58 87       	std	Y+8, r21	; 0x08
    6594:	89 e0       	ldi	r24, 0x09	; 9
    6596:	e8 2e       	mov	r14, r24
    6598:	f1 2c       	mov	r15, r1
    659a:	ec 0e       	add	r14, r28
    659c:	fd 1e       	adc	r15, r29
    659e:	ce 01       	movw	r24, r28
    65a0:	01 96       	adiw	r24, 0x01	; 1
    65a2:	b7 01       	movw	r22, r14
    65a4:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    65a8:	8e 01       	movw	r16, r28
    65aa:	0f 5e       	subi	r16, 0xEF	; 239
    65ac:	1f 4f       	sbci	r17, 0xFF	; 255
    65ae:	ce 01       	movw	r24, r28
    65b0:	05 96       	adiw	r24, 0x05	; 5
    65b2:	b8 01       	movw	r22, r16
    65b4:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    65b8:	89 85       	ldd	r24, Y+9	; 0x09
    65ba:	82 30       	cpi	r24, 0x02	; 2
    65bc:	40 f0       	brcs	.+16     	; 0x65ce <__gtsf2+0x56>
    65be:	89 89       	ldd	r24, Y+17	; 0x11
    65c0:	82 30       	cpi	r24, 0x02	; 2
    65c2:	28 f0       	brcs	.+10     	; 0x65ce <__gtsf2+0x56>
    65c4:	c7 01       	movw	r24, r14
    65c6:	b8 01       	movw	r22, r16
    65c8:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fpcmp_parts_f>
    65cc:	01 c0       	rjmp	.+2      	; 0x65d0 <__gtsf2+0x58>
    65ce:	8f ef       	ldi	r24, 0xFF	; 255
    65d0:	68 96       	adiw	r28, 0x18	; 24
    65d2:	e6 e0       	ldi	r30, 0x06	; 6
    65d4:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__epilogue_restores__+0x18>

000065d8 <__gesf2>:
    65d8:	a8 e1       	ldi	r26, 0x18	; 24
    65da:	b0 e0       	ldi	r27, 0x00	; 0
    65dc:	e2 ef       	ldi	r30, 0xF2	; 242
    65de:	f2 e3       	ldi	r31, 0x32	; 50
    65e0:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__prologue_saves__+0x18>
    65e4:	69 83       	std	Y+1, r22	; 0x01
    65e6:	7a 83       	std	Y+2, r23	; 0x02
    65e8:	8b 83       	std	Y+3, r24	; 0x03
    65ea:	9c 83       	std	Y+4, r25	; 0x04
    65ec:	2d 83       	std	Y+5, r18	; 0x05
    65ee:	3e 83       	std	Y+6, r19	; 0x06
    65f0:	4f 83       	std	Y+7, r20	; 0x07
    65f2:	58 87       	std	Y+8, r21	; 0x08
    65f4:	89 e0       	ldi	r24, 0x09	; 9
    65f6:	e8 2e       	mov	r14, r24
    65f8:	f1 2c       	mov	r15, r1
    65fa:	ec 0e       	add	r14, r28
    65fc:	fd 1e       	adc	r15, r29
    65fe:	ce 01       	movw	r24, r28
    6600:	01 96       	adiw	r24, 0x01	; 1
    6602:	b7 01       	movw	r22, r14
    6604:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6608:	8e 01       	movw	r16, r28
    660a:	0f 5e       	subi	r16, 0xEF	; 239
    660c:	1f 4f       	sbci	r17, 0xFF	; 255
    660e:	ce 01       	movw	r24, r28
    6610:	05 96       	adiw	r24, 0x05	; 5
    6612:	b8 01       	movw	r22, r16
    6614:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6618:	89 85       	ldd	r24, Y+9	; 0x09
    661a:	82 30       	cpi	r24, 0x02	; 2
    661c:	40 f0       	brcs	.+16     	; 0x662e <__gesf2+0x56>
    661e:	89 89       	ldd	r24, Y+17	; 0x11
    6620:	82 30       	cpi	r24, 0x02	; 2
    6622:	28 f0       	brcs	.+10     	; 0x662e <__gesf2+0x56>
    6624:	c7 01       	movw	r24, r14
    6626:	b8 01       	movw	r22, r16
    6628:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fpcmp_parts_f>
    662c:	01 c0       	rjmp	.+2      	; 0x6630 <__gesf2+0x58>
    662e:	8f ef       	ldi	r24, 0xFF	; 255
    6630:	68 96       	adiw	r28, 0x18	; 24
    6632:	e6 e0       	ldi	r30, 0x06	; 6
    6634:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__epilogue_restores__+0x18>

00006638 <__ltsf2>:
    6638:	a8 e1       	ldi	r26, 0x18	; 24
    663a:	b0 e0       	ldi	r27, 0x00	; 0
    663c:	e2 e2       	ldi	r30, 0x22	; 34
    663e:	f3 e3       	ldi	r31, 0x33	; 51
    6640:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__prologue_saves__+0x18>
    6644:	69 83       	std	Y+1, r22	; 0x01
    6646:	7a 83       	std	Y+2, r23	; 0x02
    6648:	8b 83       	std	Y+3, r24	; 0x03
    664a:	9c 83       	std	Y+4, r25	; 0x04
    664c:	2d 83       	std	Y+5, r18	; 0x05
    664e:	3e 83       	std	Y+6, r19	; 0x06
    6650:	4f 83       	std	Y+7, r20	; 0x07
    6652:	58 87       	std	Y+8, r21	; 0x08
    6654:	89 e0       	ldi	r24, 0x09	; 9
    6656:	e8 2e       	mov	r14, r24
    6658:	f1 2c       	mov	r15, r1
    665a:	ec 0e       	add	r14, r28
    665c:	fd 1e       	adc	r15, r29
    665e:	ce 01       	movw	r24, r28
    6660:	01 96       	adiw	r24, 0x01	; 1
    6662:	b7 01       	movw	r22, r14
    6664:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6668:	8e 01       	movw	r16, r28
    666a:	0f 5e       	subi	r16, 0xEF	; 239
    666c:	1f 4f       	sbci	r17, 0xFF	; 255
    666e:	ce 01       	movw	r24, r28
    6670:	05 96       	adiw	r24, 0x05	; 5
    6672:	b8 01       	movw	r22, r16
    6674:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    6678:	89 85       	ldd	r24, Y+9	; 0x09
    667a:	82 30       	cpi	r24, 0x02	; 2
    667c:	40 f0       	brcs	.+16     	; 0x668e <__ltsf2+0x56>
    667e:	89 89       	ldd	r24, Y+17	; 0x11
    6680:	82 30       	cpi	r24, 0x02	; 2
    6682:	28 f0       	brcs	.+10     	; 0x668e <__ltsf2+0x56>
    6684:	c7 01       	movw	r24, r14
    6686:	b8 01       	movw	r22, r16
    6688:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fpcmp_parts_f>
    668c:	01 c0       	rjmp	.+2      	; 0x6690 <__ltsf2+0x58>
    668e:	81 e0       	ldi	r24, 0x01	; 1
    6690:	68 96       	adiw	r28, 0x18	; 24
    6692:	e6 e0       	ldi	r30, 0x06	; 6
    6694:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__epilogue_restores__+0x18>

00006698 <__fixsfsi>:
    6698:	ac e0       	ldi	r26, 0x0C	; 12
    669a:	b0 e0       	ldi	r27, 0x00	; 0
    669c:	e2 e5       	ldi	r30, 0x52	; 82
    669e:	f3 e3       	ldi	r31, 0x33	; 51
    66a0:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <__prologue_saves__+0x20>
    66a4:	69 83       	std	Y+1, r22	; 0x01
    66a6:	7a 83       	std	Y+2, r23	; 0x02
    66a8:	8b 83       	std	Y+3, r24	; 0x03
    66aa:	9c 83       	std	Y+4, r25	; 0x04
    66ac:	ce 01       	movw	r24, r28
    66ae:	01 96       	adiw	r24, 0x01	; 1
    66b0:	be 01       	movw	r22, r28
    66b2:	6b 5f       	subi	r22, 0xFB	; 251
    66b4:	7f 4f       	sbci	r23, 0xFF	; 255
    66b6:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__unpack_f>
    66ba:	8d 81       	ldd	r24, Y+5	; 0x05
    66bc:	82 30       	cpi	r24, 0x02	; 2
    66be:	61 f1       	breq	.+88     	; 0x6718 <__fixsfsi+0x80>
    66c0:	82 30       	cpi	r24, 0x02	; 2
    66c2:	50 f1       	brcs	.+84     	; 0x6718 <__fixsfsi+0x80>
    66c4:	84 30       	cpi	r24, 0x04	; 4
    66c6:	21 f4       	brne	.+8      	; 0x66d0 <__fixsfsi+0x38>
    66c8:	8e 81       	ldd	r24, Y+6	; 0x06
    66ca:	88 23       	and	r24, r24
    66cc:	51 f1       	breq	.+84     	; 0x6722 <__fixsfsi+0x8a>
    66ce:	2e c0       	rjmp	.+92     	; 0x672c <__fixsfsi+0x94>
    66d0:	2f 81       	ldd	r18, Y+7	; 0x07
    66d2:	38 85       	ldd	r19, Y+8	; 0x08
    66d4:	37 fd       	sbrc	r19, 7
    66d6:	20 c0       	rjmp	.+64     	; 0x6718 <__fixsfsi+0x80>
    66d8:	6e 81       	ldd	r22, Y+6	; 0x06
    66da:	2f 31       	cpi	r18, 0x1F	; 31
    66dc:	31 05       	cpc	r19, r1
    66de:	1c f0       	brlt	.+6      	; 0x66e6 <__fixsfsi+0x4e>
    66e0:	66 23       	and	r22, r22
    66e2:	f9 f0       	breq	.+62     	; 0x6722 <__fixsfsi+0x8a>
    66e4:	23 c0       	rjmp	.+70     	; 0x672c <__fixsfsi+0x94>
    66e6:	8e e1       	ldi	r24, 0x1E	; 30
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	82 1b       	sub	r24, r18
    66ec:	93 0b       	sbc	r25, r19
    66ee:	29 85       	ldd	r18, Y+9	; 0x09
    66f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    66f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    66f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    66f6:	04 c0       	rjmp	.+8      	; 0x6700 <__fixsfsi+0x68>
    66f8:	56 95       	lsr	r21
    66fa:	47 95       	ror	r20
    66fc:	37 95       	ror	r19
    66fe:	27 95       	ror	r18
    6700:	8a 95       	dec	r24
    6702:	d2 f7       	brpl	.-12     	; 0x66f8 <__fixsfsi+0x60>
    6704:	66 23       	and	r22, r22
    6706:	b1 f0       	breq	.+44     	; 0x6734 <__fixsfsi+0x9c>
    6708:	50 95       	com	r21
    670a:	40 95       	com	r20
    670c:	30 95       	com	r19
    670e:	21 95       	neg	r18
    6710:	3f 4f       	sbci	r19, 0xFF	; 255
    6712:	4f 4f       	sbci	r20, 0xFF	; 255
    6714:	5f 4f       	sbci	r21, 0xFF	; 255
    6716:	0e c0       	rjmp	.+28     	; 0x6734 <__fixsfsi+0x9c>
    6718:	20 e0       	ldi	r18, 0x00	; 0
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	40 e0       	ldi	r20, 0x00	; 0
    671e:	50 e0       	ldi	r21, 0x00	; 0
    6720:	09 c0       	rjmp	.+18     	; 0x6734 <__fixsfsi+0x9c>
    6722:	2f ef       	ldi	r18, 0xFF	; 255
    6724:	3f ef       	ldi	r19, 0xFF	; 255
    6726:	4f ef       	ldi	r20, 0xFF	; 255
    6728:	5f e7       	ldi	r21, 0x7F	; 127
    672a:	04 c0       	rjmp	.+8      	; 0x6734 <__fixsfsi+0x9c>
    672c:	20 e0       	ldi	r18, 0x00	; 0
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	40 e0       	ldi	r20, 0x00	; 0
    6732:	50 e8       	ldi	r21, 0x80	; 128
    6734:	b9 01       	movw	r22, r18
    6736:	ca 01       	movw	r24, r20
    6738:	2c 96       	adiw	r28, 0x0c	; 12
    673a:	e2 e0       	ldi	r30, 0x02	; 2
    673c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__epilogue_restores__+0x20>

00006740 <__floatunsisf>:
    6740:	a8 e0       	ldi	r26, 0x08	; 8
    6742:	b0 e0       	ldi	r27, 0x00	; 0
    6744:	e6 ea       	ldi	r30, 0xA6	; 166
    6746:	f3 e3       	ldi	r31, 0x33	; 51
    6748:	0c 94 50 36 	jmp	0x6ca0	; 0x6ca0 <__prologue_saves__+0x10>
    674c:	7b 01       	movw	r14, r22
    674e:	8c 01       	movw	r16, r24
    6750:	61 15       	cp	r22, r1
    6752:	71 05       	cpc	r23, r1
    6754:	81 05       	cpc	r24, r1
    6756:	91 05       	cpc	r25, r1
    6758:	19 f4       	brne	.+6      	; 0x6760 <__floatunsisf+0x20>
    675a:	82 e0       	ldi	r24, 0x02	; 2
    675c:	89 83       	std	Y+1, r24	; 0x01
    675e:	60 c0       	rjmp	.+192    	; 0x6820 <__floatunsisf+0xe0>
    6760:	83 e0       	ldi	r24, 0x03	; 3
    6762:	89 83       	std	Y+1, r24	; 0x01
    6764:	8e e1       	ldi	r24, 0x1E	; 30
    6766:	c8 2e       	mov	r12, r24
    6768:	d1 2c       	mov	r13, r1
    676a:	dc 82       	std	Y+4, r13	; 0x04
    676c:	cb 82       	std	Y+3, r12	; 0x03
    676e:	ed 82       	std	Y+5, r14	; 0x05
    6770:	fe 82       	std	Y+6, r15	; 0x06
    6772:	0f 83       	std	Y+7, r16	; 0x07
    6774:	18 87       	std	Y+8, r17	; 0x08
    6776:	c8 01       	movw	r24, r16
    6778:	b7 01       	movw	r22, r14
    677a:	0e 94 19 34 	call	0x6832	; 0x6832 <__clzsi2>
    677e:	fc 01       	movw	r30, r24
    6780:	31 97       	sbiw	r30, 0x01	; 1
    6782:	f7 ff       	sbrs	r31, 7
    6784:	3b c0       	rjmp	.+118    	; 0x67fc <__floatunsisf+0xbc>
    6786:	22 27       	eor	r18, r18
    6788:	33 27       	eor	r19, r19
    678a:	2e 1b       	sub	r18, r30
    678c:	3f 0b       	sbc	r19, r31
    678e:	57 01       	movw	r10, r14
    6790:	68 01       	movw	r12, r16
    6792:	02 2e       	mov	r0, r18
    6794:	04 c0       	rjmp	.+8      	; 0x679e <__floatunsisf+0x5e>
    6796:	d6 94       	lsr	r13
    6798:	c7 94       	ror	r12
    679a:	b7 94       	ror	r11
    679c:	a7 94       	ror	r10
    679e:	0a 94       	dec	r0
    67a0:	d2 f7       	brpl	.-12     	; 0x6796 <__floatunsisf+0x56>
    67a2:	40 e0       	ldi	r20, 0x00	; 0
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	60 e0       	ldi	r22, 0x00	; 0
    67a8:	70 e0       	ldi	r23, 0x00	; 0
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	a0 e0       	ldi	r26, 0x00	; 0
    67b0:	b0 e0       	ldi	r27, 0x00	; 0
    67b2:	04 c0       	rjmp	.+8      	; 0x67bc <__floatunsisf+0x7c>
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	aa 1f       	adc	r26, r26
    67ba:	bb 1f       	adc	r27, r27
    67bc:	2a 95       	dec	r18
    67be:	d2 f7       	brpl	.-12     	; 0x67b4 <__floatunsisf+0x74>
    67c0:	01 97       	sbiw	r24, 0x01	; 1
    67c2:	a1 09       	sbc	r26, r1
    67c4:	b1 09       	sbc	r27, r1
    67c6:	8e 21       	and	r24, r14
    67c8:	9f 21       	and	r25, r15
    67ca:	a0 23       	and	r26, r16
    67cc:	b1 23       	and	r27, r17
    67ce:	00 97       	sbiw	r24, 0x00	; 0
    67d0:	a1 05       	cpc	r26, r1
    67d2:	b1 05       	cpc	r27, r1
    67d4:	21 f0       	breq	.+8      	; 0x67de <__floatunsisf+0x9e>
    67d6:	41 e0       	ldi	r20, 0x01	; 1
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	60 e0       	ldi	r22, 0x00	; 0
    67dc:	70 e0       	ldi	r23, 0x00	; 0
    67de:	4a 29       	or	r20, r10
    67e0:	5b 29       	or	r21, r11
    67e2:	6c 29       	or	r22, r12
    67e4:	7d 29       	or	r23, r13
    67e6:	4d 83       	std	Y+5, r20	; 0x05
    67e8:	5e 83       	std	Y+6, r21	; 0x06
    67ea:	6f 83       	std	Y+7, r22	; 0x07
    67ec:	78 87       	std	Y+8, r23	; 0x08
    67ee:	8e e1       	ldi	r24, 0x1E	; 30
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	8e 1b       	sub	r24, r30
    67f4:	9f 0b       	sbc	r25, r31
    67f6:	9c 83       	std	Y+4, r25	; 0x04
    67f8:	8b 83       	std	Y+3, r24	; 0x03
    67fa:	12 c0       	rjmp	.+36     	; 0x6820 <__floatunsisf+0xe0>
    67fc:	30 97       	sbiw	r30, 0x00	; 0
    67fe:	81 f0       	breq	.+32     	; 0x6820 <__floatunsisf+0xe0>
    6800:	0e 2e       	mov	r0, r30
    6802:	04 c0       	rjmp	.+8      	; 0x680c <__floatunsisf+0xcc>
    6804:	ee 0c       	add	r14, r14
    6806:	ff 1c       	adc	r15, r15
    6808:	00 1f       	adc	r16, r16
    680a:	11 1f       	adc	r17, r17
    680c:	0a 94       	dec	r0
    680e:	d2 f7       	brpl	.-12     	; 0x6804 <__floatunsisf+0xc4>
    6810:	ed 82       	std	Y+5, r14	; 0x05
    6812:	fe 82       	std	Y+6, r15	; 0x06
    6814:	0f 83       	std	Y+7, r16	; 0x07
    6816:	18 87       	std	Y+8, r17	; 0x08
    6818:	ce 1a       	sub	r12, r30
    681a:	df 0a       	sbc	r13, r31
    681c:	dc 82       	std	Y+4, r13	; 0x04
    681e:	cb 82       	std	Y+3, r12	; 0x03
    6820:	1a 82       	std	Y+2, r1	; 0x02
    6822:	ce 01       	movw	r24, r28
    6824:	01 96       	adiw	r24, 0x01	; 1
    6826:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__pack_f>
    682a:	28 96       	adiw	r28, 0x08	; 8
    682c:	ea e0       	ldi	r30, 0x0A	; 10
    682e:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <__epilogue_restores__+0x10>

00006832 <__clzsi2>:
    6832:	ef 92       	push	r14
    6834:	ff 92       	push	r15
    6836:	0f 93       	push	r16
    6838:	1f 93       	push	r17
    683a:	7b 01       	movw	r14, r22
    683c:	8c 01       	movw	r16, r24
    683e:	80 e0       	ldi	r24, 0x00	; 0
    6840:	e8 16       	cp	r14, r24
    6842:	80 e0       	ldi	r24, 0x00	; 0
    6844:	f8 06       	cpc	r15, r24
    6846:	81 e0       	ldi	r24, 0x01	; 1
    6848:	08 07       	cpc	r16, r24
    684a:	80 e0       	ldi	r24, 0x00	; 0
    684c:	18 07       	cpc	r17, r24
    684e:	88 f4       	brcc	.+34     	; 0x6872 <__clzsi2+0x40>
    6850:	8f ef       	ldi	r24, 0xFF	; 255
    6852:	e8 16       	cp	r14, r24
    6854:	f1 04       	cpc	r15, r1
    6856:	01 05       	cpc	r16, r1
    6858:	11 05       	cpc	r17, r1
    685a:	31 f0       	breq	.+12     	; 0x6868 <__clzsi2+0x36>
    685c:	28 f0       	brcs	.+10     	; 0x6868 <__clzsi2+0x36>
    685e:	88 e0       	ldi	r24, 0x08	; 8
    6860:	90 e0       	ldi	r25, 0x00	; 0
    6862:	a0 e0       	ldi	r26, 0x00	; 0
    6864:	b0 e0       	ldi	r27, 0x00	; 0
    6866:	17 c0       	rjmp	.+46     	; 0x6896 <__clzsi2+0x64>
    6868:	80 e0       	ldi	r24, 0x00	; 0
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	a0 e0       	ldi	r26, 0x00	; 0
    686e:	b0 e0       	ldi	r27, 0x00	; 0
    6870:	12 c0       	rjmp	.+36     	; 0x6896 <__clzsi2+0x64>
    6872:	80 e0       	ldi	r24, 0x00	; 0
    6874:	e8 16       	cp	r14, r24
    6876:	80 e0       	ldi	r24, 0x00	; 0
    6878:	f8 06       	cpc	r15, r24
    687a:	80 e0       	ldi	r24, 0x00	; 0
    687c:	08 07       	cpc	r16, r24
    687e:	81 e0       	ldi	r24, 0x01	; 1
    6880:	18 07       	cpc	r17, r24
    6882:	28 f0       	brcs	.+10     	; 0x688e <__clzsi2+0x5c>
    6884:	88 e1       	ldi	r24, 0x18	; 24
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	a0 e0       	ldi	r26, 0x00	; 0
    688a:	b0 e0       	ldi	r27, 0x00	; 0
    688c:	04 c0       	rjmp	.+8      	; 0x6896 <__clzsi2+0x64>
    688e:	80 e1       	ldi	r24, 0x10	; 16
    6890:	90 e0       	ldi	r25, 0x00	; 0
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	b0 e0       	ldi	r27, 0x00	; 0
    6896:	20 e2       	ldi	r18, 0x20	; 32
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	40 e0       	ldi	r20, 0x00	; 0
    689c:	50 e0       	ldi	r21, 0x00	; 0
    689e:	28 1b       	sub	r18, r24
    68a0:	39 0b       	sbc	r19, r25
    68a2:	4a 0b       	sbc	r20, r26
    68a4:	5b 0b       	sbc	r21, r27
    68a6:	04 c0       	rjmp	.+8      	; 0x68b0 <__clzsi2+0x7e>
    68a8:	16 95       	lsr	r17
    68aa:	07 95       	ror	r16
    68ac:	f7 94       	ror	r15
    68ae:	e7 94       	ror	r14
    68b0:	8a 95       	dec	r24
    68b2:	d2 f7       	brpl	.-12     	; 0x68a8 <__clzsi2+0x76>
    68b4:	f7 01       	movw	r30, r14
    68b6:	e8 58       	subi	r30, 0x88	; 136
    68b8:	fc 4f       	sbci	r31, 0xFC	; 252
    68ba:	80 81       	ld	r24, Z
    68bc:	28 1b       	sub	r18, r24
    68be:	31 09       	sbc	r19, r1
    68c0:	41 09       	sbc	r20, r1
    68c2:	51 09       	sbc	r21, r1
    68c4:	c9 01       	movw	r24, r18
    68c6:	1f 91       	pop	r17
    68c8:	0f 91       	pop	r16
    68ca:	ff 90       	pop	r15
    68cc:	ef 90       	pop	r14
    68ce:	08 95       	ret

000068d0 <__pack_f>:
    68d0:	df 92       	push	r13
    68d2:	ef 92       	push	r14
    68d4:	ff 92       	push	r15
    68d6:	0f 93       	push	r16
    68d8:	1f 93       	push	r17
    68da:	fc 01       	movw	r30, r24
    68dc:	e4 80       	ldd	r14, Z+4	; 0x04
    68de:	f5 80       	ldd	r15, Z+5	; 0x05
    68e0:	06 81       	ldd	r16, Z+6	; 0x06
    68e2:	17 81       	ldd	r17, Z+7	; 0x07
    68e4:	d1 80       	ldd	r13, Z+1	; 0x01
    68e6:	80 81       	ld	r24, Z
    68e8:	82 30       	cpi	r24, 0x02	; 2
    68ea:	48 f4       	brcc	.+18     	; 0x68fe <__pack_f+0x2e>
    68ec:	80 e0       	ldi	r24, 0x00	; 0
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	a0 e1       	ldi	r26, 0x10	; 16
    68f2:	b0 e0       	ldi	r27, 0x00	; 0
    68f4:	e8 2a       	or	r14, r24
    68f6:	f9 2a       	or	r15, r25
    68f8:	0a 2b       	or	r16, r26
    68fa:	1b 2b       	or	r17, r27
    68fc:	a5 c0       	rjmp	.+330    	; 0x6a48 <__pack_f+0x178>
    68fe:	84 30       	cpi	r24, 0x04	; 4
    6900:	09 f4       	brne	.+2      	; 0x6904 <__pack_f+0x34>
    6902:	9f c0       	rjmp	.+318    	; 0x6a42 <__pack_f+0x172>
    6904:	82 30       	cpi	r24, 0x02	; 2
    6906:	21 f4       	brne	.+8      	; 0x6910 <__pack_f+0x40>
    6908:	ee 24       	eor	r14, r14
    690a:	ff 24       	eor	r15, r15
    690c:	87 01       	movw	r16, r14
    690e:	05 c0       	rjmp	.+10     	; 0x691a <__pack_f+0x4a>
    6910:	e1 14       	cp	r14, r1
    6912:	f1 04       	cpc	r15, r1
    6914:	01 05       	cpc	r16, r1
    6916:	11 05       	cpc	r17, r1
    6918:	19 f4       	brne	.+6      	; 0x6920 <__pack_f+0x50>
    691a:	e0 e0       	ldi	r30, 0x00	; 0
    691c:	f0 e0       	ldi	r31, 0x00	; 0
    691e:	96 c0       	rjmp	.+300    	; 0x6a4c <__pack_f+0x17c>
    6920:	62 81       	ldd	r22, Z+2	; 0x02
    6922:	73 81       	ldd	r23, Z+3	; 0x03
    6924:	9f ef       	ldi	r25, 0xFF	; 255
    6926:	62 38       	cpi	r22, 0x82	; 130
    6928:	79 07       	cpc	r23, r25
    692a:	0c f0       	brlt	.+2      	; 0x692e <__pack_f+0x5e>
    692c:	5b c0       	rjmp	.+182    	; 0x69e4 <__pack_f+0x114>
    692e:	22 e8       	ldi	r18, 0x82	; 130
    6930:	3f ef       	ldi	r19, 0xFF	; 255
    6932:	26 1b       	sub	r18, r22
    6934:	37 0b       	sbc	r19, r23
    6936:	2a 31       	cpi	r18, 0x1A	; 26
    6938:	31 05       	cpc	r19, r1
    693a:	2c f0       	brlt	.+10     	; 0x6946 <__pack_f+0x76>
    693c:	20 e0       	ldi	r18, 0x00	; 0
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	40 e0       	ldi	r20, 0x00	; 0
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	2a c0       	rjmp	.+84     	; 0x699a <__pack_f+0xca>
    6946:	b8 01       	movw	r22, r16
    6948:	a7 01       	movw	r20, r14
    694a:	02 2e       	mov	r0, r18
    694c:	04 c0       	rjmp	.+8      	; 0x6956 <__pack_f+0x86>
    694e:	76 95       	lsr	r23
    6950:	67 95       	ror	r22
    6952:	57 95       	ror	r21
    6954:	47 95       	ror	r20
    6956:	0a 94       	dec	r0
    6958:	d2 f7       	brpl	.-12     	; 0x694e <__pack_f+0x7e>
    695a:	81 e0       	ldi	r24, 0x01	; 1
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	a0 e0       	ldi	r26, 0x00	; 0
    6960:	b0 e0       	ldi	r27, 0x00	; 0
    6962:	04 c0       	rjmp	.+8      	; 0x696c <__pack_f+0x9c>
    6964:	88 0f       	add	r24, r24
    6966:	99 1f       	adc	r25, r25
    6968:	aa 1f       	adc	r26, r26
    696a:	bb 1f       	adc	r27, r27
    696c:	2a 95       	dec	r18
    696e:	d2 f7       	brpl	.-12     	; 0x6964 <__pack_f+0x94>
    6970:	01 97       	sbiw	r24, 0x01	; 1
    6972:	a1 09       	sbc	r26, r1
    6974:	b1 09       	sbc	r27, r1
    6976:	8e 21       	and	r24, r14
    6978:	9f 21       	and	r25, r15
    697a:	a0 23       	and	r26, r16
    697c:	b1 23       	and	r27, r17
    697e:	00 97       	sbiw	r24, 0x00	; 0
    6980:	a1 05       	cpc	r26, r1
    6982:	b1 05       	cpc	r27, r1
    6984:	21 f0       	breq	.+8      	; 0x698e <__pack_f+0xbe>
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	a0 e0       	ldi	r26, 0x00	; 0
    698c:	b0 e0       	ldi	r27, 0x00	; 0
    698e:	9a 01       	movw	r18, r20
    6990:	ab 01       	movw	r20, r22
    6992:	28 2b       	or	r18, r24
    6994:	39 2b       	or	r19, r25
    6996:	4a 2b       	or	r20, r26
    6998:	5b 2b       	or	r21, r27
    699a:	da 01       	movw	r26, r20
    699c:	c9 01       	movw	r24, r18
    699e:	8f 77       	andi	r24, 0x7F	; 127
    69a0:	90 70       	andi	r25, 0x00	; 0
    69a2:	a0 70       	andi	r26, 0x00	; 0
    69a4:	b0 70       	andi	r27, 0x00	; 0
    69a6:	80 34       	cpi	r24, 0x40	; 64
    69a8:	91 05       	cpc	r25, r1
    69aa:	a1 05       	cpc	r26, r1
    69ac:	b1 05       	cpc	r27, r1
    69ae:	39 f4       	brne	.+14     	; 0x69be <__pack_f+0xee>
    69b0:	27 ff       	sbrs	r18, 7
    69b2:	09 c0       	rjmp	.+18     	; 0x69c6 <__pack_f+0xf6>
    69b4:	20 5c       	subi	r18, 0xC0	; 192
    69b6:	3f 4f       	sbci	r19, 0xFF	; 255
    69b8:	4f 4f       	sbci	r20, 0xFF	; 255
    69ba:	5f 4f       	sbci	r21, 0xFF	; 255
    69bc:	04 c0       	rjmp	.+8      	; 0x69c6 <__pack_f+0xf6>
    69be:	21 5c       	subi	r18, 0xC1	; 193
    69c0:	3f 4f       	sbci	r19, 0xFF	; 255
    69c2:	4f 4f       	sbci	r20, 0xFF	; 255
    69c4:	5f 4f       	sbci	r21, 0xFF	; 255
    69c6:	e0 e0       	ldi	r30, 0x00	; 0
    69c8:	f0 e0       	ldi	r31, 0x00	; 0
    69ca:	20 30       	cpi	r18, 0x00	; 0
    69cc:	a0 e0       	ldi	r26, 0x00	; 0
    69ce:	3a 07       	cpc	r19, r26
    69d0:	a0 e0       	ldi	r26, 0x00	; 0
    69d2:	4a 07       	cpc	r20, r26
    69d4:	a0 e4       	ldi	r26, 0x40	; 64
    69d6:	5a 07       	cpc	r21, r26
    69d8:	10 f0       	brcs	.+4      	; 0x69de <__pack_f+0x10e>
    69da:	e1 e0       	ldi	r30, 0x01	; 1
    69dc:	f0 e0       	ldi	r31, 0x00	; 0
    69de:	79 01       	movw	r14, r18
    69e0:	8a 01       	movw	r16, r20
    69e2:	27 c0       	rjmp	.+78     	; 0x6a32 <__pack_f+0x162>
    69e4:	60 38       	cpi	r22, 0x80	; 128
    69e6:	71 05       	cpc	r23, r1
    69e8:	64 f5       	brge	.+88     	; 0x6a42 <__pack_f+0x172>
    69ea:	fb 01       	movw	r30, r22
    69ec:	e1 58       	subi	r30, 0x81	; 129
    69ee:	ff 4f       	sbci	r31, 0xFF	; 255
    69f0:	d8 01       	movw	r26, r16
    69f2:	c7 01       	movw	r24, r14
    69f4:	8f 77       	andi	r24, 0x7F	; 127
    69f6:	90 70       	andi	r25, 0x00	; 0
    69f8:	a0 70       	andi	r26, 0x00	; 0
    69fa:	b0 70       	andi	r27, 0x00	; 0
    69fc:	80 34       	cpi	r24, 0x40	; 64
    69fe:	91 05       	cpc	r25, r1
    6a00:	a1 05       	cpc	r26, r1
    6a02:	b1 05       	cpc	r27, r1
    6a04:	39 f4       	brne	.+14     	; 0x6a14 <__pack_f+0x144>
    6a06:	e7 fe       	sbrs	r14, 7
    6a08:	0d c0       	rjmp	.+26     	; 0x6a24 <__pack_f+0x154>
    6a0a:	80 e4       	ldi	r24, 0x40	; 64
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 e0       	ldi	r26, 0x00	; 0
    6a10:	b0 e0       	ldi	r27, 0x00	; 0
    6a12:	04 c0       	rjmp	.+8      	; 0x6a1c <__pack_f+0x14c>
    6a14:	8f e3       	ldi	r24, 0x3F	; 63
    6a16:	90 e0       	ldi	r25, 0x00	; 0
    6a18:	a0 e0       	ldi	r26, 0x00	; 0
    6a1a:	b0 e0       	ldi	r27, 0x00	; 0
    6a1c:	e8 0e       	add	r14, r24
    6a1e:	f9 1e       	adc	r15, r25
    6a20:	0a 1f       	adc	r16, r26
    6a22:	1b 1f       	adc	r17, r27
    6a24:	17 ff       	sbrs	r17, 7
    6a26:	05 c0       	rjmp	.+10     	; 0x6a32 <__pack_f+0x162>
    6a28:	16 95       	lsr	r17
    6a2a:	07 95       	ror	r16
    6a2c:	f7 94       	ror	r15
    6a2e:	e7 94       	ror	r14
    6a30:	31 96       	adiw	r30, 0x01	; 1
    6a32:	87 e0       	ldi	r24, 0x07	; 7
    6a34:	16 95       	lsr	r17
    6a36:	07 95       	ror	r16
    6a38:	f7 94       	ror	r15
    6a3a:	e7 94       	ror	r14
    6a3c:	8a 95       	dec	r24
    6a3e:	d1 f7       	brne	.-12     	; 0x6a34 <__pack_f+0x164>
    6a40:	05 c0       	rjmp	.+10     	; 0x6a4c <__pack_f+0x17c>
    6a42:	ee 24       	eor	r14, r14
    6a44:	ff 24       	eor	r15, r15
    6a46:	87 01       	movw	r16, r14
    6a48:	ef ef       	ldi	r30, 0xFF	; 255
    6a4a:	f0 e0       	ldi	r31, 0x00	; 0
    6a4c:	6e 2f       	mov	r22, r30
    6a4e:	67 95       	ror	r22
    6a50:	66 27       	eor	r22, r22
    6a52:	67 95       	ror	r22
    6a54:	90 2f       	mov	r25, r16
    6a56:	9f 77       	andi	r25, 0x7F	; 127
    6a58:	d7 94       	ror	r13
    6a5a:	dd 24       	eor	r13, r13
    6a5c:	d7 94       	ror	r13
    6a5e:	8e 2f       	mov	r24, r30
    6a60:	86 95       	lsr	r24
    6a62:	49 2f       	mov	r20, r25
    6a64:	46 2b       	or	r20, r22
    6a66:	58 2f       	mov	r21, r24
    6a68:	5d 29       	or	r21, r13
    6a6a:	b7 01       	movw	r22, r14
    6a6c:	ca 01       	movw	r24, r20
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	ff 90       	pop	r15
    6a74:	ef 90       	pop	r14
    6a76:	df 90       	pop	r13
    6a78:	08 95       	ret

00006a7a <__unpack_f>:
    6a7a:	fc 01       	movw	r30, r24
    6a7c:	db 01       	movw	r26, r22
    6a7e:	40 81       	ld	r20, Z
    6a80:	51 81       	ldd	r21, Z+1	; 0x01
    6a82:	22 81       	ldd	r18, Z+2	; 0x02
    6a84:	62 2f       	mov	r22, r18
    6a86:	6f 77       	andi	r22, 0x7F	; 127
    6a88:	70 e0       	ldi	r23, 0x00	; 0
    6a8a:	22 1f       	adc	r18, r18
    6a8c:	22 27       	eor	r18, r18
    6a8e:	22 1f       	adc	r18, r18
    6a90:	93 81       	ldd	r25, Z+3	; 0x03
    6a92:	89 2f       	mov	r24, r25
    6a94:	88 0f       	add	r24, r24
    6a96:	82 2b       	or	r24, r18
    6a98:	28 2f       	mov	r18, r24
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	99 1f       	adc	r25, r25
    6a9e:	99 27       	eor	r25, r25
    6aa0:	99 1f       	adc	r25, r25
    6aa2:	11 96       	adiw	r26, 0x01	; 1
    6aa4:	9c 93       	st	X, r25
    6aa6:	11 97       	sbiw	r26, 0x01	; 1
    6aa8:	21 15       	cp	r18, r1
    6aaa:	31 05       	cpc	r19, r1
    6aac:	a9 f5       	brne	.+106    	; 0x6b18 <__unpack_f+0x9e>
    6aae:	41 15       	cp	r20, r1
    6ab0:	51 05       	cpc	r21, r1
    6ab2:	61 05       	cpc	r22, r1
    6ab4:	71 05       	cpc	r23, r1
    6ab6:	11 f4       	brne	.+4      	; 0x6abc <__unpack_f+0x42>
    6ab8:	82 e0       	ldi	r24, 0x02	; 2
    6aba:	37 c0       	rjmp	.+110    	; 0x6b2a <__unpack_f+0xb0>
    6abc:	82 e8       	ldi	r24, 0x82	; 130
    6abe:	9f ef       	ldi	r25, 0xFF	; 255
    6ac0:	13 96       	adiw	r26, 0x03	; 3
    6ac2:	9c 93       	st	X, r25
    6ac4:	8e 93       	st	-X, r24
    6ac6:	12 97       	sbiw	r26, 0x02	; 2
    6ac8:	9a 01       	movw	r18, r20
    6aca:	ab 01       	movw	r20, r22
    6acc:	67 e0       	ldi	r22, 0x07	; 7
    6ace:	22 0f       	add	r18, r18
    6ad0:	33 1f       	adc	r19, r19
    6ad2:	44 1f       	adc	r20, r20
    6ad4:	55 1f       	adc	r21, r21
    6ad6:	6a 95       	dec	r22
    6ad8:	d1 f7       	brne	.-12     	; 0x6ace <__unpack_f+0x54>
    6ada:	83 e0       	ldi	r24, 0x03	; 3
    6adc:	8c 93       	st	X, r24
    6ade:	0d c0       	rjmp	.+26     	; 0x6afa <__unpack_f+0x80>
    6ae0:	22 0f       	add	r18, r18
    6ae2:	33 1f       	adc	r19, r19
    6ae4:	44 1f       	adc	r20, r20
    6ae6:	55 1f       	adc	r21, r21
    6ae8:	12 96       	adiw	r26, 0x02	; 2
    6aea:	8d 91       	ld	r24, X+
    6aec:	9c 91       	ld	r25, X
    6aee:	13 97       	sbiw	r26, 0x03	; 3
    6af0:	01 97       	sbiw	r24, 0x01	; 1
    6af2:	13 96       	adiw	r26, 0x03	; 3
    6af4:	9c 93       	st	X, r25
    6af6:	8e 93       	st	-X, r24
    6af8:	12 97       	sbiw	r26, 0x02	; 2
    6afa:	20 30       	cpi	r18, 0x00	; 0
    6afc:	80 e0       	ldi	r24, 0x00	; 0
    6afe:	38 07       	cpc	r19, r24
    6b00:	80 e0       	ldi	r24, 0x00	; 0
    6b02:	48 07       	cpc	r20, r24
    6b04:	80 e4       	ldi	r24, 0x40	; 64
    6b06:	58 07       	cpc	r21, r24
    6b08:	58 f3       	brcs	.-42     	; 0x6ae0 <__unpack_f+0x66>
    6b0a:	14 96       	adiw	r26, 0x04	; 4
    6b0c:	2d 93       	st	X+, r18
    6b0e:	3d 93       	st	X+, r19
    6b10:	4d 93       	st	X+, r20
    6b12:	5c 93       	st	X, r21
    6b14:	17 97       	sbiw	r26, 0x07	; 7
    6b16:	08 95       	ret
    6b18:	2f 3f       	cpi	r18, 0xFF	; 255
    6b1a:	31 05       	cpc	r19, r1
    6b1c:	79 f4       	brne	.+30     	; 0x6b3c <__unpack_f+0xc2>
    6b1e:	41 15       	cp	r20, r1
    6b20:	51 05       	cpc	r21, r1
    6b22:	61 05       	cpc	r22, r1
    6b24:	71 05       	cpc	r23, r1
    6b26:	19 f4       	brne	.+6      	; 0x6b2e <__unpack_f+0xb4>
    6b28:	84 e0       	ldi	r24, 0x04	; 4
    6b2a:	8c 93       	st	X, r24
    6b2c:	08 95       	ret
    6b2e:	64 ff       	sbrs	r22, 4
    6b30:	03 c0       	rjmp	.+6      	; 0x6b38 <__unpack_f+0xbe>
    6b32:	81 e0       	ldi	r24, 0x01	; 1
    6b34:	8c 93       	st	X, r24
    6b36:	12 c0       	rjmp	.+36     	; 0x6b5c <__unpack_f+0xe2>
    6b38:	1c 92       	st	X, r1
    6b3a:	10 c0       	rjmp	.+32     	; 0x6b5c <__unpack_f+0xe2>
    6b3c:	2f 57       	subi	r18, 0x7F	; 127
    6b3e:	30 40       	sbci	r19, 0x00	; 0
    6b40:	13 96       	adiw	r26, 0x03	; 3
    6b42:	3c 93       	st	X, r19
    6b44:	2e 93       	st	-X, r18
    6b46:	12 97       	sbiw	r26, 0x02	; 2
    6b48:	83 e0       	ldi	r24, 0x03	; 3
    6b4a:	8c 93       	st	X, r24
    6b4c:	87 e0       	ldi	r24, 0x07	; 7
    6b4e:	44 0f       	add	r20, r20
    6b50:	55 1f       	adc	r21, r21
    6b52:	66 1f       	adc	r22, r22
    6b54:	77 1f       	adc	r23, r23
    6b56:	8a 95       	dec	r24
    6b58:	d1 f7       	brne	.-12     	; 0x6b4e <__unpack_f+0xd4>
    6b5a:	70 64       	ori	r23, 0x40	; 64
    6b5c:	14 96       	adiw	r26, 0x04	; 4
    6b5e:	4d 93       	st	X+, r20
    6b60:	5d 93       	st	X+, r21
    6b62:	6d 93       	st	X+, r22
    6b64:	7c 93       	st	X, r23
    6b66:	17 97       	sbiw	r26, 0x07	; 7
    6b68:	08 95       	ret

00006b6a <__fpcmp_parts_f>:
    6b6a:	1f 93       	push	r17
    6b6c:	dc 01       	movw	r26, r24
    6b6e:	fb 01       	movw	r30, r22
    6b70:	9c 91       	ld	r25, X
    6b72:	92 30       	cpi	r25, 0x02	; 2
    6b74:	08 f4       	brcc	.+2      	; 0x6b78 <__fpcmp_parts_f+0xe>
    6b76:	47 c0       	rjmp	.+142    	; 0x6c06 <__fpcmp_parts_f+0x9c>
    6b78:	80 81       	ld	r24, Z
    6b7a:	82 30       	cpi	r24, 0x02	; 2
    6b7c:	08 f4       	brcc	.+2      	; 0x6b80 <__fpcmp_parts_f+0x16>
    6b7e:	43 c0       	rjmp	.+134    	; 0x6c06 <__fpcmp_parts_f+0x9c>
    6b80:	94 30       	cpi	r25, 0x04	; 4
    6b82:	51 f4       	brne	.+20     	; 0x6b98 <__fpcmp_parts_f+0x2e>
    6b84:	11 96       	adiw	r26, 0x01	; 1
    6b86:	1c 91       	ld	r17, X
    6b88:	84 30       	cpi	r24, 0x04	; 4
    6b8a:	99 f5       	brne	.+102    	; 0x6bf2 <__fpcmp_parts_f+0x88>
    6b8c:	81 81       	ldd	r24, Z+1	; 0x01
    6b8e:	68 2f       	mov	r22, r24
    6b90:	70 e0       	ldi	r23, 0x00	; 0
    6b92:	61 1b       	sub	r22, r17
    6b94:	71 09       	sbc	r23, r1
    6b96:	3f c0       	rjmp	.+126    	; 0x6c16 <__fpcmp_parts_f+0xac>
    6b98:	84 30       	cpi	r24, 0x04	; 4
    6b9a:	21 f0       	breq	.+8      	; 0x6ba4 <__fpcmp_parts_f+0x3a>
    6b9c:	92 30       	cpi	r25, 0x02	; 2
    6b9e:	31 f4       	brne	.+12     	; 0x6bac <__fpcmp_parts_f+0x42>
    6ba0:	82 30       	cpi	r24, 0x02	; 2
    6ba2:	b9 f1       	breq	.+110    	; 0x6c12 <__fpcmp_parts_f+0xa8>
    6ba4:	81 81       	ldd	r24, Z+1	; 0x01
    6ba6:	88 23       	and	r24, r24
    6ba8:	89 f1       	breq	.+98     	; 0x6c0c <__fpcmp_parts_f+0xa2>
    6baa:	2d c0       	rjmp	.+90     	; 0x6c06 <__fpcmp_parts_f+0x9c>
    6bac:	11 96       	adiw	r26, 0x01	; 1
    6bae:	1c 91       	ld	r17, X
    6bb0:	11 97       	sbiw	r26, 0x01	; 1
    6bb2:	82 30       	cpi	r24, 0x02	; 2
    6bb4:	f1 f0       	breq	.+60     	; 0x6bf2 <__fpcmp_parts_f+0x88>
    6bb6:	81 81       	ldd	r24, Z+1	; 0x01
    6bb8:	18 17       	cp	r17, r24
    6bba:	d9 f4       	brne	.+54     	; 0x6bf2 <__fpcmp_parts_f+0x88>
    6bbc:	12 96       	adiw	r26, 0x02	; 2
    6bbe:	2d 91       	ld	r18, X+
    6bc0:	3c 91       	ld	r19, X
    6bc2:	13 97       	sbiw	r26, 0x03	; 3
    6bc4:	82 81       	ldd	r24, Z+2	; 0x02
    6bc6:	93 81       	ldd	r25, Z+3	; 0x03
    6bc8:	82 17       	cp	r24, r18
    6bca:	93 07       	cpc	r25, r19
    6bcc:	94 f0       	brlt	.+36     	; 0x6bf2 <__fpcmp_parts_f+0x88>
    6bce:	28 17       	cp	r18, r24
    6bd0:	39 07       	cpc	r19, r25
    6bd2:	bc f0       	brlt	.+46     	; 0x6c02 <__fpcmp_parts_f+0x98>
    6bd4:	14 96       	adiw	r26, 0x04	; 4
    6bd6:	8d 91       	ld	r24, X+
    6bd8:	9d 91       	ld	r25, X+
    6bda:	0d 90       	ld	r0, X+
    6bdc:	bc 91       	ld	r27, X
    6bde:	a0 2d       	mov	r26, r0
    6be0:	24 81       	ldd	r18, Z+4	; 0x04
    6be2:	35 81       	ldd	r19, Z+5	; 0x05
    6be4:	46 81       	ldd	r20, Z+6	; 0x06
    6be6:	57 81       	ldd	r21, Z+7	; 0x07
    6be8:	28 17       	cp	r18, r24
    6bea:	39 07       	cpc	r19, r25
    6bec:	4a 07       	cpc	r20, r26
    6bee:	5b 07       	cpc	r21, r27
    6bf0:	18 f4       	brcc	.+6      	; 0x6bf8 <__fpcmp_parts_f+0x8e>
    6bf2:	11 23       	and	r17, r17
    6bf4:	41 f0       	breq	.+16     	; 0x6c06 <__fpcmp_parts_f+0x9c>
    6bf6:	0a c0       	rjmp	.+20     	; 0x6c0c <__fpcmp_parts_f+0xa2>
    6bf8:	82 17       	cp	r24, r18
    6bfa:	93 07       	cpc	r25, r19
    6bfc:	a4 07       	cpc	r26, r20
    6bfe:	b5 07       	cpc	r27, r21
    6c00:	40 f4       	brcc	.+16     	; 0x6c12 <__fpcmp_parts_f+0xa8>
    6c02:	11 23       	and	r17, r17
    6c04:	19 f0       	breq	.+6      	; 0x6c0c <__fpcmp_parts_f+0xa2>
    6c06:	61 e0       	ldi	r22, 0x01	; 1
    6c08:	70 e0       	ldi	r23, 0x00	; 0
    6c0a:	05 c0       	rjmp	.+10     	; 0x6c16 <__fpcmp_parts_f+0xac>
    6c0c:	6f ef       	ldi	r22, 0xFF	; 255
    6c0e:	7f ef       	ldi	r23, 0xFF	; 255
    6c10:	02 c0       	rjmp	.+4      	; 0x6c16 <__fpcmp_parts_f+0xac>
    6c12:	60 e0       	ldi	r22, 0x00	; 0
    6c14:	70 e0       	ldi	r23, 0x00	; 0
    6c16:	cb 01       	movw	r24, r22
    6c18:	1f 91       	pop	r17
    6c1a:	08 95       	ret

00006c1c <atoi>:
    6c1c:	fc 01       	movw	r30, r24
    6c1e:	88 27       	eor	r24, r24
    6c20:	99 27       	eor	r25, r25
    6c22:	e8 94       	clt
    6c24:	21 91       	ld	r18, Z+
    6c26:	20 32       	cpi	r18, 0x20	; 32
    6c28:	e9 f3       	breq	.-6      	; 0x6c24 <atoi+0x8>
    6c2a:	29 30       	cpi	r18, 0x09	; 9
    6c2c:	10 f0       	brcs	.+4      	; 0x6c32 <atoi+0x16>
    6c2e:	2e 30       	cpi	r18, 0x0E	; 14
    6c30:	c8 f3       	brcs	.-14     	; 0x6c24 <atoi+0x8>
    6c32:	2b 32       	cpi	r18, 0x2B	; 43
    6c34:	41 f0       	breq	.+16     	; 0x6c46 <atoi+0x2a>
    6c36:	2d 32       	cpi	r18, 0x2D	; 45
    6c38:	39 f4       	brne	.+14     	; 0x6c48 <atoi+0x2c>
    6c3a:	68 94       	set
    6c3c:	04 c0       	rjmp	.+8      	; 0x6c46 <atoi+0x2a>
    6c3e:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__mulhi_const_10>
    6c42:	82 0f       	add	r24, r18
    6c44:	91 1d       	adc	r25, r1
    6c46:	21 91       	ld	r18, Z+
    6c48:	20 53       	subi	r18, 0x30	; 48
    6c4a:	2a 30       	cpi	r18, 0x0A	; 10
    6c4c:	c0 f3       	brcs	.-16     	; 0x6c3e <atoi+0x22>
    6c4e:	1e f4       	brtc	.+6      	; 0x6c56 <atoi+0x3a>
    6c50:	90 95       	com	r25
    6c52:	81 95       	neg	r24
    6c54:	9f 4f       	sbci	r25, 0xFF	; 255
    6c56:	08 95       	ret

00006c58 <__mulhi_const_10>:
    6c58:	7a e0       	ldi	r23, 0x0A	; 10
    6c5a:	97 9f       	mul	r25, r23
    6c5c:	90 2d       	mov	r25, r0
    6c5e:	87 9f       	mul	r24, r23
    6c60:	80 2d       	mov	r24, r0
    6c62:	91 0d       	add	r25, r1
    6c64:	11 24       	eor	r1, r1
    6c66:	08 95       	ret

00006c68 <__udivmodhi4>:
    6c68:	aa 1b       	sub	r26, r26
    6c6a:	bb 1b       	sub	r27, r27
    6c6c:	51 e1       	ldi	r21, 0x11	; 17
    6c6e:	07 c0       	rjmp	.+14     	; 0x6c7e <__udivmodhi4_ep>

00006c70 <__udivmodhi4_loop>:
    6c70:	aa 1f       	adc	r26, r26
    6c72:	bb 1f       	adc	r27, r27
    6c74:	a6 17       	cp	r26, r22
    6c76:	b7 07       	cpc	r27, r23
    6c78:	10 f0       	brcs	.+4      	; 0x6c7e <__udivmodhi4_ep>
    6c7a:	a6 1b       	sub	r26, r22
    6c7c:	b7 0b       	sbc	r27, r23

00006c7e <__udivmodhi4_ep>:
    6c7e:	88 1f       	adc	r24, r24
    6c80:	99 1f       	adc	r25, r25
    6c82:	5a 95       	dec	r21
    6c84:	a9 f7       	brne	.-22     	; 0x6c70 <__udivmodhi4_loop>
    6c86:	80 95       	com	r24
    6c88:	90 95       	com	r25
    6c8a:	bc 01       	movw	r22, r24
    6c8c:	cd 01       	movw	r24, r26
    6c8e:	08 95       	ret

00006c90 <__prologue_saves__>:
    6c90:	2f 92       	push	r2
    6c92:	3f 92       	push	r3
    6c94:	4f 92       	push	r4
    6c96:	5f 92       	push	r5
    6c98:	6f 92       	push	r6
    6c9a:	7f 92       	push	r7
    6c9c:	8f 92       	push	r8
    6c9e:	9f 92       	push	r9
    6ca0:	af 92       	push	r10
    6ca2:	bf 92       	push	r11
    6ca4:	cf 92       	push	r12
    6ca6:	df 92       	push	r13
    6ca8:	ef 92       	push	r14
    6caa:	ff 92       	push	r15
    6cac:	0f 93       	push	r16
    6cae:	1f 93       	push	r17
    6cb0:	cf 93       	push	r28
    6cb2:	df 93       	push	r29
    6cb4:	cd b7       	in	r28, 0x3d	; 61
    6cb6:	de b7       	in	r29, 0x3e	; 62
    6cb8:	ca 1b       	sub	r28, r26
    6cba:	db 0b       	sbc	r29, r27
    6cbc:	0f b6       	in	r0, 0x3f	; 63
    6cbe:	f8 94       	cli
    6cc0:	de bf       	out	0x3e, r29	; 62
    6cc2:	0f be       	out	0x3f, r0	; 63
    6cc4:	cd bf       	out	0x3d, r28	; 61
    6cc6:	19 94       	eijmp

00006cc8 <__epilogue_restores__>:
    6cc8:	2a 88       	ldd	r2, Y+18	; 0x12
    6cca:	39 88       	ldd	r3, Y+17	; 0x11
    6ccc:	48 88       	ldd	r4, Y+16	; 0x10
    6cce:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cda:	b9 84       	ldd	r11, Y+9	; 0x09
    6cdc:	c8 84       	ldd	r12, Y+8	; 0x08
    6cde:	df 80       	ldd	r13, Y+7	; 0x07
    6ce0:	ee 80       	ldd	r14, Y+6	; 0x06
    6ce2:	fd 80       	ldd	r15, Y+5	; 0x05
    6ce4:	0c 81       	ldd	r16, Y+4	; 0x04
    6ce6:	1b 81       	ldd	r17, Y+3	; 0x03
    6ce8:	aa 81       	ldd	r26, Y+2	; 0x02
    6cea:	b9 81       	ldd	r27, Y+1	; 0x01
    6cec:	ce 0f       	add	r28, r30
    6cee:	d1 1d       	adc	r29, r1
    6cf0:	0f b6       	in	r0, 0x3f	; 63
    6cf2:	f8 94       	cli
    6cf4:	de bf       	out	0x3e, r29	; 62
    6cf6:	0f be       	out	0x3f, r0	; 63
    6cf8:	cd bf       	out	0x3d, r28	; 61
    6cfa:	ed 01       	movw	r28, r26
    6cfc:	08 95       	ret

00006cfe <_exit>:
    6cfe:	f8 94       	cli

00006d00 <__stop_program>:
    6d00:	ff cf       	rjmp	.-2      	; 0x6d00 <__stop_program>
